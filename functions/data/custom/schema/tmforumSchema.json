{
  "AbstractEnvironment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AbstractEnvironment.schema.json",
      "title": "AbstractEnvironment",
      "definitions": {
        "AbstractEnvironment": {
          "$id": "#AbstractEnvironment",
          "type": "object",
          "description": "A managed abstract environment resource",
          "required": [
            "abstractEnvironmentDefinition"
          ],
          "properties": {
            "abstractEnvironmentDefinition": {
              "$ref": "../Common/AbstractEnvironmentDefinition.schema.json#AbstractEnvironmentDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "AbstractEnvironmentDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AbstractEnvironmentDefinition.schema.json",
      "title": "AbstractEnvironmentDefinition",
      "definitions": {
        "AbstractEnvironmentDefinition": {
          "$id": "#AbstractEnvironmentDefinition",
          "type": "object",
          "description": "Abstract environment definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "AbstractEnvironmentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AbstractEnvironmentRef.schema.json",
      "title": "AbstractEnvironmentRef",
      "definitions": {
        "AbstractEnvironmentRef": {
          "$id": "#AbstractEnvironmentRef",
          "type": "object",
          "description": "A reference to a managed test abstract environment resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AccessPoint": [
    {
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/AccessPoint/schema.json",
      "title": "NGSI GTFS Schema",
      "description": "GTFS Access Point",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/UrbanMobility/gtfs-schema.json#/definitions/GTFS-Stop-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:AccessPoint"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name",
        "location"
      ]
    }
  ],
  "Account": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Account.schema.json",
      "title": "Account",
      "definitions": {
        "Account": {
          "$id": "#Account",
          "description": "Generic Account structure used to define commonalities between sub concepts of PartyAccount and Financial Account.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "creditLimit": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "The maximum amount of money that may be charged on an account"
            },
            "description": {
              "type": "string",
              "description": "Detailed description of the party account"
            },
            "href": {
              "type": "string",
              "description": "Unique reference of the account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the account"
            },
            "lastModified": {
              "type": "string",
              "format": "date-time",
              "description": "Date of last modification of the account"
            },
            "name": {
              "type": "string",
              "description": "Name of the account"
            },
            "state": {
              "type": "string",
              "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
            },
            "accountType": {
              "type": "string",
              "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "taxExemption": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/TaxExemptionCertificate.schema.json#TaxExemptionCertificate"
              }
            },
            "contact": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/Contact.schema.json#Contact"
              }
            },
            "accountBalance": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountBalance.schema.json#AccountBalance"
              }
            },
            "accountRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRelationship.schema.json#AccountRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountBalance.schema.json",
      "title": "AccountBalance",
      "definitions": {
        "AccountBalance": {
          "$id": "#AccountBalance",
          "description": "Balances linked to the account",
          "type": "object",
          "required": [
            "amount",
            "balanceType",
            "validFor"
          ],
          "properties": {
            "amount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Balance amount"
            },
            "balanceType": {
              "type": "string",
              "description": "Type of the balance : deposit balance, disputed balance, loyalty balance, receivable balance..."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Balance validity period"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountBalanceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountBalanceRef.schema.json",
      "title": "AccountBalanceRef",
      "definitions": {
        "AccountBalanceRef": {
          "$id": "#AccountBalanceRef",
          "description": "Balances linked to the account",
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Balance amount"
            },
            "status": {
              "type": "string",
              "description": "The condition of the account balance, such as due, paid, in arrears."
            },
            "balanceType": {
              "type": "string",
              "description": "Type of the balance : deposit balance, disputed balance, loyalty balance, receivable balance..."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountDirectDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountDirectDetails.schema.json",
      "title": "AccountDirectDetails",
      "definitions": {
        "AccountDirectDetails": {
          "$id": "#AccountDirectDetails",
          "type": "object",
          "properties": {
            "account": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountDirectMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountDirectMethod.schema.json",
      "title": "AccountDirectMethod",
      "definitions": {
        "AccountDirectMethod": {
          "$id": "#AccountDirectMethod",
          "description": "A payment method using an internal account that could be billed directly to perform the payment",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountPaymentMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountPaymentMethod.schema.json",
      "title": "AccountPaymentMethod",
      "definitions": {
        "AccountPaymentMethod": {
          "$id": "#AccountPaymentMethod",
          "description": "Reference an internal account that could be billed directly to perform the payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "billedAccount": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            },
            "@type": {
              "type": "string",
              "enum": [
                "accountPaymentMethod"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "AccountRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountRef.schema.json",
      "title": "AccountRef",
      "definitions": {
        "AccountRef": {
          "$id": "#AccountRef",
          "description": "Account reference. A account may be a party account or a financial account.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Detailed description of the account"
            },
            "href": {
              "type": "string",
              "description": "Reference of the account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the account"
            },
            "name": {
              "type": "string",
              "description": "Name of the account"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccountRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccountRelationship.schema.json",
      "title": "AccountRelationship",
      "definitions": {
        "AccountRelationship": {
          "$id": "#AccountRelationship",
          "description": "Significant connection between accounts. For instance an aggregating account for a list of shop branches each having its own billing account.",
          "type": "object",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity period of that relationship"
            },
            "account": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AccumulatedBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AccumulatedBalance.schema.json",
      "title": "AccumulatedBalance",
      "definitions": {
        "AccumulatedBalance": {
          "$id": "#AccumulatedBalance",
          "description": "Represents and tracks the aggregated amount remained or owed in certain account which is owned by certain customer for a set of buckets.",
          "properties": {
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information."
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the recharge operation request"
            },
            "bucket": {
              "type": "array",
              "items": {
                "$ref": "BucketRef.schema.json#BucketRef"
              },
              "description": "A reference to the buckets involved in the aggregation"
            },
            "logicalResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/LogicalResourceRef.schema.json#LogicalResourceRef",
                "description": "A reference to the logical resources that can be used to identify the bucket balance for example where product ids are not unique."
              }
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the aggregated balance"
            },
            "name": {
              "type": "string",
              "description": "Friendly name to identify the aggregated balance"
            },
            "partyAccount": {
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef",
              "description": "A reference to the account that owns the buckets aggregated"
            },
            "product": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRef.schema.json#ProductRef"
              },
              "description": "A reference to the product whose consumption is managed by the bucket . This is an array to allow scenarios where a buckets are shared between different products"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
            },
            "totalBalance": {
              "description": "Aggregated for a set of prepay balance buckets associated to the product",
              "$ref": "../Common/Quantity.schema.json#/Quantity"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AckAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AckAlarms.schema.json",
      "title": "AckAlarms",
      "definitions": {
        "AckAlarms": {
          "$id": "#AckAlarms",
          "description": "Task resource for the acknowledge alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "ackSystemId": {
              "description": "Name of the acknowledging system",
              "type": "string"
            },
            "ackUserId": {
              "description": "Name of the acknowledging user",
              "type": "string"
            },
            "ackTime": {
              "description": "Time of the acknowledgement",
              "type": "string",
              "format": "date-time"
            },
            "alarmPattern": {
              "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm.",
              "type": "array",
              "items": {
                "$ref": "../Resource/Alarm.schema.json#Alarm"
              }
            },
            "ackedAlarm": {
              "description": "The successfully acknowledged alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "ActionStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ActionStatusType.schema.json",
      "title": "ActionStatusType",
      "definitions": {
        "ActionStatusType": {
          "$id": "#ActionStatusType",
          "type": "string",
          "description": "Valid values for the Action Status Type",
          "enum": [
            "created",
            "failed",
            "cancelled",
            "completed"
          ]
        }
      }
    }
  ],
  "Activity": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/User/UserActivity/schema.json",
      "title": "FIWARE - User Activity schema",
      "description": "Information on the current activity performed by an anonymized user in a given point in time",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "dateActivityStarted": {
              "type": "string",
              "format": "date-time"
            },
            "dateActivityEnded": {
              "type": "string",
              "format": "date-time"
            },
            "refObject": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "activityType": {
              "type": "string"
            },
            "refTarget": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "refAgent": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "UserActivity"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "activityType",
        "refAgent",
        "type",
        "id"
      ]
    }
  ],
  "Address": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Address.schema.json",
      "title": "Address",
      "definitions": {
        "Address": {
          "$id": "#Address",
          "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often\ndefined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
          "type": "object",
          "properties": {
            "city": {
              "type": "string",
              "description": "City that the address is in"
            },
            "country": {
              "type": "string",
              "description": "Country that the address is in"
            },
            "locality": {
              "type": "string",
              "description": "\"An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature.\" [ANZLIC-STREET], or a suburb \"a bounded locality within a city, town or shire principally of urban character \" [ANZLICSTREET]"
            },
            "postcode": {
              "type": "string",
              "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
            },
            "stateOrProvince": {
              "type": "string",
              "description": "the State or Province that the address is in"
            },
            "streetName": {
              "type": "string",
              "description": "Name of the street or other street type"
            },
            "streetNr": {
              "type": "string",
              "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
            },
            "streetNrLast": {
              "type": "string",
              "description": "Last number in a range of street numbers allocated to a property"
            },
            "streetNrLastSuffix": {
              "type": "string",
              "description": "Last street number suffix for a ranged address"
            },
            "streetNrSuffix": {
              "type": "string",
              "description": "the first street number suffix"
            },
            "streetSuffix": {
              "type": "string",
              "description": "A modifier denoting a relative direction"
            },
            "streetType": {
              "type": "string",
              "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
            },
            "subAddress": {
              "$ref": "../Common/SubAddress.schema.json#SubAddress",
              "description": "Within a property in an urban area, may refer to a building, building cluster, or a floor of a multistory building"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AddressRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AddressRef.schema.json",
      "title": "AddressRef",
      "definitions": {
        "AddressRef": {
          "$id": "#AddressRef",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Addressable": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Addressable.schema.json",
      "title": "Addressable",
      "definitions": {
        "Addressable": {
          "$id": "#Addressable",
          "type": "object",
          "description": "Base schema for adressable entities",
          "properties": {
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference"
            },
            "id": {
              "type": "string",
              "description": "unique identifier"
            }
          }
        }
      }
    }
  ],
  "AdhocCollection": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AdhocCollection.schema.json",
      "title": "AdhocCollection",
      "definitions": {
        "AdhocCollection": {
          "$id": "AdhocCollection",
          "description": "",
          "type": "object",
          "properties": {
            "consumingApplicationId": {
              "type": "string"
            },
            "producingApplicationId": {
              "type": "string"
            },
            "granulatiry": {
              "$ref": "#/definitions/Granularity"
            },
            "outputFormat": {
              "type": "string"
            },
            "collectionPeriod": {
              "$ref": "#/definitions/TimePeriod"
            },
            "trackingRecord": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrackingRecord"
              },
              "minItems": 0
            },
            "performanceIndicatorGroupSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
              },
              "minItems": 0
            },
            "performanceIndicatorSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecification"
              },
              "minItems": 0
            },
            "monitoredInstancesCriteria": {
              "$ref": "#/definitions/MonitoredInstancesCriteria"
            },
            "monitoredClassCriteria": {
              "$ref": "#/definitions/MonitoredClassCriteria"
            }
          },
          "allOf": [
            {
              "$ref": "ManagementJob.schema.json#/definitions/ManagementJob"
            },
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AdjustBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AdjustBalance.schema.json",
      "title": "AdjustBalance",
      "definitions": {
        "AdjustBalance": {
          "$id": "#AdjustBalance",
          "description": "The AdjustBalance resource allows adjustments to be made to the original BalanceTopup e.g. increment the amount, alter the recharge periodicity. Alternatively, an adjustment can be made to an outstanding reservation request, in which case the reservedValue of the bucket will be adjusted, not the remaining value",
          "properties": {
            "adjustType": {
              "description": "The type of the adjustment. For example: recurringChargeDebit, oneTimeChargeCredit, oneTimeChargeDebit, goodWillCredit, generalDebit, reservationDebit",
              "type": "string"
            },
            "reserveBalance": {
              "$ref": "../Customer/ReserveBalanceRef.schema.json#ReserveBalanceRef",
              "description": "Should be present for types relating to reservation, such as reservation debit. Means that the adjustment needs to be executed according to this reservation request. The amount of the balance action is optional in this case, and if not supplied the entire reserved amount will be adjusted in the bucket. If a specific implementation can support partial consumption of the reservation, then amount can be supplied, and that amount will be adjusted in the bucket and the reservation request"
            }
          },
          "allOf": [
            {
              "$ref": "BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "AdjustProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AdjustProductStock.schema.json",
      "title": "AdjustProductStock",
      "definitions": {
        "AdjustProductStock": {
          "$id": "#AdjustProductStock",
          "description": "AdjustProductStock is used to log and execute on or several Product Stock level change",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the AdjustProductStock",
              "type": "string"
            },
            "href": {
              "description": "Reference of the AdjustProductStock",
              "type": "string"
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the AdjustProductStock (acknowledged, inProgress, terminatedWithError, done)"
            },
            "instantSyncAdjust": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects the adjustment immediately. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
            },
            "description": {
              "description": "Free-text description of the AdjustProductStock",
              "type": "string"
            },
            "creationDate": {
              "description": "Date when the AdjustProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "requestedAdjustProductStockDate": {
              "description": "Date when the AdjustProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "completedAdjustProductStockDate": {
              "description": "Date when the AdjustProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "adjustReason": {
              "description": "A reason for this product stock adjustment like theft or wastage.",
              "type": "string"
            },
            "adjustProductStockItem": {
              "type": "array",
              "items": {
                "$ref": "../Resource/AdjustProductStockItem.schema.json#AdjustProductStockItem"
              },
              "minItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "AdjustProductStockItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AdjustProductStockItem.schema.json",
      "title": "AdjustProductStockItem",
      "definitions": {
        "AdjustProductStockItem": {
          "$id": "#AdjustProductStockItem",
          "description": "A list of AdjustProductStock items. Every item is a ProductStock adjustement request.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the AdjustProductStockItem"
            },
            "adjustProductStockQuantity": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the AdjustProductStockItem (acknowledged, inProgress, terminatedWithError, done)"
            },
            "productStockTarget": {
              "$ref": "../Resource/ProductStockRef.schema.json#ProductStockRef",
              "description": "The product stock to adjust ."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AdministrativeState": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AdministrativeState.schema.json",
      "title": "AdministrativeState",
      "definitions": {
        "AdministrativeState": {
          "$id": "#AdministrativeState",
          "description": "This is enumeration for Administrative state",
          "type": "string",
          "enum": [
            "locked",
            "unlocked"
          ]
        }
      }
    }
  ],
  "AeroAllergenObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Environment/AeroAllergenObserved/schema.json",
      "title": "GSMA / FIWARE - Pollen levels observed schema",
      "description": "An observation of pollen levels at a certain place and time.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "AeroAllergenObserved"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string"
            },
            "allergenRisk": {
              "type": "string",
              "enum": [
                "none",
                "low",
                "moderate",
                "high",
                "veryHigh"
              ]
            },
            "refDevice": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved",
        "location"
      ]
    }
  ],
  "AffectedService": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AffectedService.schema.json",
      "title": "AffectedService",
      "definitions": {
        "AffectedService": {
          "$id": "#AffectedService",
          "type": "object",
          "description": "",
          "properties": {
            "id": {
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Provides the identifier of the service affected by the alarm"
            }
          }
        }
      }
    }
  ],
  "Agency": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Agency/schema.json",
      "title": "NGSI GTFS Schema - Agency",
      "description": "GTFS Agency",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Agency"
              ],
              "description": "NGSI Entity type"
            },
            "source": {
              "type": "string",
              "format": "uri"
            },
            "name": {
              "type": "string"
            },
            "page": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "timezone": {
              "type": "string"
            },
            "language": {
              "type": "string"
            },
            "address": {
              "type": "object"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name",
        "source"
      ]
    }
  ],
  "Agreement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Agreement.schema.json",
      "title": "Agreement",
      "definitions": {
        "Agreement": {
          "$id": "#Agreement",
          "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "type": "object",
          "required": [
            "name",
            "agreementType",
            "engagedParty",
            "agreementItem"
          ],
          "properties": {
            "agreementPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period during which the Agreement is in effect."
            },
            "completionDate": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date at which the agreement is completed"
            },
            "description": {
              "type": "string",
              "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
            },
            "documentNumber": {
              "type": "integer",
              "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
            },
            "href": {
              "type": "string",
              "description": "Unique url identifying the agreement as a resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the agreement"
            },
            "initialDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the agreement was initialized"
            },
            "name": {
              "type": "string",
              "description": "A human-readable name for the agreement"
            },
            "statementOfIntent": {
              "type": "string",
              "description": "An overview and goals of the Agreement"
            },
            "status": {
              "type": "string",
              "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
            },
            "agreementType": {
              "type": "string",
              "description": "The type of the agreement. For example commercial"
            },
            "version": {
              "type": "string",
              "description": "A string identifying the version of the agreement"
            },
            "agreementSpecification": {
              "$ref": "../EngagedParty/AgreementSpecificationRef.schema.json#AgreementSpecificationRef"
            },
            "agreementItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementItem.schema.json#AgreementItem"
              },
              "minItems": 1
            },
            "engagedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "agreementAuthorization": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementAuthorization.schema.json#AgreementAuthorization"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "associatedAgreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementAttachment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementAttachment.schema.json",
      "title": "AgreementAttachment",
      "definitions": {
        "AgreementAttachment": {
          "$id": "#AgreementAttachment",
          "description": "Represents a complementary piece of information to describe the agreement. Could be a document, picture, a video or any kind of multimedia content.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the attachment"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the attachment"
            },
            "attachmentType": {
              "type": "string",
              "description": "The type of attachment, such as video, picture"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementAuthorization": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementAuthorization.schema.json",
      "title": "AgreementAuthorization",
      "definitions": {
        "AgreementAuthorization": {
          "$id": "#AgreementAuthorization",
          "description": "A business participant that is responsible for approving the agreement.",
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "The date associated with the authorization state."
            },
            "signatureRepresentation": {
              "type": "string",
              "description": "Indication that represents whether the signature is a physical paper signature or a digital signature."
            },
            "state": {
              "type": "string",
              "description": "Current status of the authorization, for example in process, approved, rejected."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementItem.schema.json",
      "title": "AgreementItem",
      "definitions": {
        "AgreementItem": {
          "$id": "#AgreementItem",
          "description": "A part of the agreement expressed in terms of a product offering and possibly including specific terms and conditions.",
          "type": "object",
          "properties": {
            "productOffering": {
              "description": "The list of product offerings referred by this agreement item",
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
              }
            },
            "termOrCondition": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementTermOrCondition.schema.json#AgreementTermOrCondition"
              }
            },
            "product": {
              "description": "The list of products indirectly referred by this agreement item (since an agreement item refers primarily to product offerings)",
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRef.schema.json#ProductRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementItemRef.schema.json",
      "title": "AgreementItemRef",
      "definitions": {
        "AgreementItemRef": {
          "$id": "#AgreementItemRef",
          "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "type": "object",
          "properties": {
            "agreementItemId": {
              "type": "string",
              "description": "Identifier of the agreement"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AgreementRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementRef.schema.json",
      "title": "AgreementRef",
      "definitions": {
        "AgreementRef": {
          "$id": "#AgreementRef",
          "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the agreement"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AgreementSpecCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementSpecCharacteristic.schema.json",
      "title": "AgreementSpecCharacteristic",
      "definitions": {
        "AgreementSpecCharacteristic": {
          "$id": "#AgreementSpecCharacteristic",
          "description": "A characteristic quality or distinctive feature of an agreement.",
          "type": "object",
          "properties": {
            "configurable": {
              "type": "boolean",
              "description": "If true, the Boolean indicates that the characteristic is configurable"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the characteristic is"
            },
            "name": {
              "type": "string",
              "description": "Name of the characteristic being specified."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the specification characteristic is valid"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "specCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementSpecCharacteristicValue.schema.json#AgreementSpecCharacteristicValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementSpecCharacteristicValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementSpecCharacteristicValue.schema.json",
      "title": "AgreementSpecCharacteristicValue",
      "definitions": {
        "AgreementSpecCharacteristicValue": {
          "$id": "#AgreementSpecCharacteristicValue",
          "description": "A number or text that can be assigned to an agreement specification characteristic.",
          "type": "object",
          "properties": {
            "default": {
              "type": "boolean",
              "description": "Indicates if the value is the default value for a characteristic"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Unit of measure for the characteristic, such as minutes, gigabytes (GB) and so on."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which a value is applicable"
            },
            "value": {
              "$ref": "../Common/Any.schema.json#Any",
              "description": "A discrete value that the characteristic can take on"
            },
            "valueFrom": {
              "type": "string",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "string",
              "description": "The upper range value that a characteristic can take on"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementSpecification.schema.json",
      "title": "AgreementSpecification",
      "definitions": {
        "AgreementSpecification": {
          "$id": "#AgreementSpecification",
          "description": "A template of an agreement that can be used when establishing partnerships",
          "type": "object",
          "required": [
            "name",
            "attachment"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the agreement specification is about"
            },
            "href": {
              "type": "string",
              "description": "Reference of the agreement specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the agreement specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "If true, this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided by the specificationRelationship property"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Indicates the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the agreement specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the agreement specification is valid"
            },
            "version": {
              "type": "string",
              "description": "Agreement specification version"
            },
            "serviceCategory": {
              "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
            },
            "specificationCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementSpecCharacteristic.schema.json#AgreementSpecCharacteristic"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "specificationRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementSpecificationRelationship.schema.json#AgreementSpecificationRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AgreementSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementSpecificationRef.schema.json",
      "title": "AgreementSpecificationRef",
      "definitions": {
        "AgreementSpecificationRef": {
          "$id": "#AgreementSpecificationRef",
          "description": "Agreement specification reference. An AgreementSpecification represents a template of an agreement that can be used when establishing partnerships.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the agreement specification is about."
            },
            "name": {
              "type": "string",
              "description": "Name of the agreement specification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AgreementSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementSpecificationRelationship.schema.json",
      "title": "AgreementSpecificationRelationship",
      "definitions": {
        "AgreementSpecificationRelationship": {
          "$id": "#AgreementSpecificationRelationship",
          "description": "A relationship between agreement specifications. Typical relationships are substitution and dependency.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as, substitution or dependency."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the relationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AgreementTermOrCondition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AgreementTermOrCondition.schema.json",
      "title": "AgreementTermOrCondition",
      "definitions": {
        "AgreementTermOrCondition": {
          "$id": "#AgreementTermOrCondition",
          "description": "Aspects of the agreement not formally specified elsewhere in the agreement and that cannot be captured elsewhere in a formal notation, or automatically monitored and require a more human level of management.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Text that explains the term or condition of the agreement."
            },
            "id": {
              "type": "string",
              "description": "Unique number assigned for reference."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time during which the term or condition of the agreement applies."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AiContract": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AiContract.schema.json",
      "title": "AiContract",
      "definitions": {
        "AiContract": {
          "$id": "#AiContract",
          "type": "object",
          "description": "An Ai Contract represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "properties": {
            "aiModel": {
              "description": "Reference to the AI Model ",
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            },
            "aiContractSpecification": {
              "description": "Reference to the AI Model Specification",
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/SLA.schema.json#SLA"
            }
          ]
        }
      }
    }
  ],
  "AiContractSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AiContractSpecification.schema.json",
      "title": "AiContractSpecification",
      "definitions": {
        "AiContractSpecification": {
          "$id": "#AiContractSpecification",
          "type": "object",
          "description": "A template of an agreement that can be used when establishing partnerships",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntitySpecification.schema.json#EntitySpecification"
            }
          ]
        }
      }
    }
  ],
  "AiContractViolation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AiContractViolation.schema.json",
      "title": "AiContractViolation",
      "definitions": {
        "AiContractViolation": {
          "$id": "#AiContractViolation",
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "violation": {
              "$ref": "../EngagedParty/Violation.schema.json#Violation"
            },
            "aiContract": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AiModel": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AiModel.schema.json",
      "title": "AiModel",
      "definitions": {
        "AiModel": {
          "$id": "#AiModel",
          "description": "AiModel is a base class for defining the AiModel hierarchy",
          "type": "object",
          "properties": {
            "software": {
              "type": "array",
              "description": "Reference to Software in Inventory",
              "items": {
                "$ref": "../Resource/SoftwareRef.schema.json#/definitions/SoftwareRef"
              }
            },
            "gpu": {
              "description": "Reference to GPU in Inventory",
              "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
            },
            "trainingData": {
              "description": "Reference to training data set",
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            },
            "aiModelSpecification": {
              "$ref": "../Common/AiModelSpecification.schema.json#/definitions/AiModelSpecification"
            }
          },
          "allOf": [
            {
              "$ref": "../Service/Service.schema.json#Service"
            }
          ]
        }
      }
    }
  ],
  "AiModelSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AiModelSpecification.schema.json",
      "title": "AiModelSpecification",
      "definitions": {
        "AiModelSpecification": {
          "$id": "#AiModelSpecification",
          "description": "AiModelSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
          "type": "object",
          "properties": {
            "modelSpecificationHistory": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "inheritedModel": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "modelTrainingData": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "modelEvaluationData": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "modelDataSheet": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "mimeType": {
                  "type": "string"
                }
              }
            },
            "deploymentRecord": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            },
            "modelContractVersionHistory": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Service/ServiceSpecification.schema.json#/definitions/ServiceSpecification"
            }
          ]
        }
      }
    }
  ],
  "AirQualityObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Environment/AirQualityObserved/schema.json",
      "title": "GSMA / FIWARE - Air quality observed schema",
      "description": "An observation of air quality conditions at a certain place and time.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "AirQualityObserved"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string"
            },
            "airQualityIndex": {
              "type": "integer",
              "minimum": 0
            },
            "airQualityLevel": {
              "type": "string",
              "minLength": 2
            },
            "reliability": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "refDevice": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refPointOfInterest": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refWeatherObserved": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved",
        "location"
      ]
    }
  ],
  "Alarm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Alarm.schema.json",
      "title": "Alarm",
      "definitions": {
        "Alarm": {
          "$id": "#Alarm",
          "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.",
          "type": "object",
          "properties": {
            "externalAlarmId": {
              "type": "string",
              "description": "An identifier of the alarm in the source system."
            },
            "state": {
              "type": "string",
              "description": "Defines the alarm state during its life cycle (raised | updated | cleared).",
              "enum": [
                "raised",
                "updated",
                "cleared"
              ]
            },
            "alarmType": {
              "$ref": "../Resource/AlarmType.schema.json#AlarmType"
            },
            "perceivedSeverity": {
              "$ref": "../Resource/PerceivedSeverity.schema.json#PerceivedSeverity"
            },
            "probableCause": {
              "type": "string",
              "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
            },
            "specificProblem": {
              "type": "string",
              "description": "Provides more specific information about the alarm."
            },
            "alarmedObjectType": {
              "type": "string",
              "description": "The type (class) of the managed object associated with the event."
            },
            "alarmedObject": {
              "$ref": "../Resource/AlarmedObject.schema.json#AlarmedObject"
            },
            "reportingSystemId": {
              "type": "string",
              "description": "Reporting system identity."
            },
            "sourceSystemId": {
              "type": "string",
              "description": "Source system identity."
            },
            "alarmDetails": {
              "type": "string",
              "description": "Contains further information on the alarm."
            },
            "alarmRaisedTime": {
              "type": "string",
              "format": "date-time",
              "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
            },
            "alarmChangedTime": {
              "type": "string",
              "format": "date-time",
              "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
            },
            "alarmClearedTime": {
              "type": "string",
              "format": "date-time",
              "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
            },
            "alarmReportingTime": {
              "type": "string",
              "format": "date-time",
              "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
            },
            "ackState": {
              "type": "string",
              "description": "Provides the Acknowledgement State of the alarm (unacknowledged | acknowledged).",
              "enum": [
                "unacknowledged",
                "acknowledged"
              ]
            },
            "ackSystemId": {
              "type": "string",
              "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
            },
            "ackUserId": {
              "type": "string",
              "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
            },
            "affectedService": {
              "type": "array",
              "items": {
                "$ref": "../Resource/AffectedService.schema.json#AffectedService"
              }
            },
            "alarmEscalation": {
              "type": "boolean",
              "description": "Indicates if this alarm has been escalated or not. "
            },
            "clearSystemId": {
              "type": "string",
              "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
            },
            "clearUserId": {
              "type": "string",
              "description": "Provides the id of the user who invoked the alarmCleared operation"
            },
            "comment": {
              "type": "array",
              "items": {
                "$ref": "../Common/Comment.schema.json#Comment"
              }
            },
            "correlatedAlarm": {
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRef.schema.json#AlarmRef"
              }
            },
            "crossedThresholdInformation": {
              "$ref": "../Resource/CrossedThresholdInformation.schema.json#CrossedThresholdInformation"
            },
            "isRootCause": {
              "type": "boolean",
              "description": "Indicates whether the alarm is a root cause alarm.. "
            },
            "parentAlarm": {
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRef.schema.json#AlarmRef"
              }
            },
            "plannedOutageIndicator": {
              "type": "string",
              "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
            },
            "proposedRepairedActions": {
              "type": "string",
              "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
            },
            "serviceAffecting": {
              "type": "boolean",
              "description": "Indicates whether the alarm affects service or not."
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AlarmRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlarmRef.schema.json",
      "title": "AlarmRef",
      "definitions": {
        "AlarmRef": {
          "$id": "#AlarmRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AlarmRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlarmRefOrValue.schema.json",
      "title": "AlarmRefOrValue",
      "definitions": {
        "AlarmRefOrValue": {
          "$id": "#AlarmRefOrValue",
          "description": "An alarm defined by reference or value. The polymorphic attributes @type, @schemaLocation & @referredType are related to the alarm entity and not the RelatedAlarmRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Resource/AlarmRef.schema.json#AlarmRef"
            },
            {
              "$ref": "../Resource/Alarm.schema.json#Alarm"
            }
          ]
        }
      }
    }
  ],
  "AlarmType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Alarmtype.schema.json",
      "title": "AlarmType",
      "definitions": {
        "AlarmType": {
          "$id": "#AlarmType",
          "description": "Categorizes the alarm (X.733 8.1.1, 3GPP TS 32.111-2 Annex A)",
          "type": "string",
          "enum": [
            "communicationsAlarm",
            "processingErrorAlarm",
            "environmentalAlarm",
            "qualityOfServiceAlarm",
            "equipmentAlarm",
            "integrityViolation",
            "operationalViolation",
            "physicalViolation",
            "securityService",
            "mechanismViolation",
            "timeDomainViolation"
          ]
        }
      }
    }
  ],
  "AlarmedObject": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlarmedObject.schema.json",
      "title": "AlarmedObject",
      "definitions": {
        "AlarmedObject": {
          "$id": "#AlarmedObject",
          "type": "object",
          "description": "Identifies the managed object instance associated with the alarm.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the managed object associated with the event."
            },
            "href": {
              "type": "string",
              "description": "A reference to the managed object associated with the event."
            }
          }
        }
      }
    }
  ],
  "AlgorithmParams": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlgorithmParams.schema.json",
      "title": "AlgorithmParams",
      "definitions": {
        "AlgorithmParams": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "AlgorithmThresholdRule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlgorithmThresholdRule.schema.json",
      "title": "AlgorithmThresholdRule",
      "definitions": {
        "AlgorithmThresholdRule": {
          "type": "object",
          "description": "A threshold rule that is a reference to an algorithm",
          "properties": {
            "algorithmParams": {
              "type": "array",
              "items": {
                "$ref": "../Common/AlgorithmParams.schema.json#/definitions/AlgorithmParams"
              }
            },
            "algorithmRef": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ThresholdRule.schema.json#ThresholdRule"
            }
          ]
        }
      }
    }
  ],
  "AlternateGeographicAddress": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateGeographicAddress.schema.json",
      "title": "AlternateGeographicAddress",
      "definitions": {
        "AlternateGeographicAddress": {
          "$id": "#AlternateGeographicAddress",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "An URI used to access to the address resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the address"
            },
            "name": {
              "type": "string",
              "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
            },
            "role": {
              "type": "string",
              "description": "Role of the place, such as: [home delivery], [shop retrieval])"
            },
            "city": {
              "type": "string",
              "description": "City that the address is in"
            },
            "country": {
              "type": "string",
              "description": "Country that the address is in"
            },
            "locality": {
              "type": "string",
              "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
            },
            "postcode": {
              "type": "string",
              "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
            },
            "stateOrProvince": {
              "type": "string",
              "description": "the State or Province that the address is in"
            },
            "streetName": {
              "type": "string",
              "description": "Name of the street or other street type"
            },
            "streetNr": {
              "type": "string",
              "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
            },
            "streetNrLast": {
              "type": "string",
              "description": "Last number in a range of street numbers allocated to a property"
            },
            "streetNrLastSuffix": {
              "type": "string",
              "description": "Last street number suffix for a ranged address"
            },
            "streetNrSuffix": {
              "type": "string",
              "description": "the first street number suffix"
            },
            "streetSuffix": {
              "type": "string",
              "description": "A modifier denoting a relative direction"
            },
            "streetType": {
              "type": "string",
              "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
            },
            "geographicLocation": {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            },
            "geographicSubAddress": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeographicSubAddress.schema.json#GeographicSubAddress"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AlternateProduct": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateProduct.schema.json",
      "title": "AlternateProduct",
      "definitions": {
        "AlternateProduct": {
          "$id": "#AlternateProduct",
          "description": "In the context of a product offering qualification, this data structure is useful to describe alternate product than can be proposed",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "isRef": {
              "type": "boolean",
              "default": true,
              "description": "indicate if ref pattern is used"
            },
            "name": {
              "type": "string",
              "description": "This is the name of the product."
            },
            "productCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "productRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRelationship.schema.json#ProductRelationship"
              }
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AlternateProductOfferingProposal": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateProductOfferingProposal.schema.json",
      "title": "AlternateProductOfferingProposal",
      "definitions": {
        "AlternateProductOfferingProposal": {
          "$id": "#AlternateProductOfferingProposal",
          "description": "Alternate product Offering proposal is used when the requested product offering is not available with characteristic and date asked for. An alternate proposal could be a distinct product offering or product Spec close to requested one or same as requested but with a different activation date.",
          "type": "object",
          "properties": {
            "alternateActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Alternate activation date in case seller is not able to meet requested expected activation date."
            },
            "id": {
              "type": "string",
              "description": "Identifier of a alternate product offering proposal"
            },
            "alternateProduct": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue",
              "description": "Alternate product proposal"
            },
            "alternateProductOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef",
              "description": "Alternate product offering proposal"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AlternateProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateProductStock.schema.json",
      "title": "AlternateProductStock",
      "definitions": {
        "AlternateProductStock": {
          "$id": "#AlternateProductStock",
          "description": "AlternateProductStock is used to log and execute Alternate about product  stock availability",
          "type": "object",
          "properties": {
            "alternateAvailabilityDate": {
              "description": "Alternate date when the product stock is available.",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "identifier of the Alternate product stock ",
              "type": "string"
            },
            "alternateQuantity": {
              "description": "Alternate quantity available",
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "alternatePlace": {
              "description": "Alternate place where product stock is available",
              "$ref": "../Common/PlaceRefOrValue.schema.json#PlaceRefOrValue"
            },
            "alternateStock": {
              "description": "Alternate product stock available",
              "$ref": "ProductStockRef.schema.json#/definitions/ProductStockRef"
            },
            "alternateProduct": {
              "$ref": "../Product/ProductRefOrValue.schema.json#/definitions/ProductRefOrValue",
              "description": "Alternat product available"
            }
          },
          "allOf": [
            {
              "$ref": "Extensible.schema.json#/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AlternateServiceProposal": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateServiceProposal.schema.json",
      "title": "AlternateServiceProposal",
      "definitions": {
        "AlternateServiceProposal": {
          "$id": "#AlternateServiceProposal",
          "description": "Alternate service proposal is used when the requested service is not available with characteristic and date asked for. An alternate proposal could be a distinct serviceSpecification close to requested one or same as requested but with a different activation date",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier of a alternate service proposal",
              "type": "string"
            },
            "alternateServiceAvailabilityDate": {
              "description": "Alternate availability date in case seller is not able to meet requested expected availability date for the service",
              "type": "string",
              "format": "date-time"
            },
            "alternateService": {
              "$ref": "ServiceRefOrValue.schema.json#/definitions/ServiceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AlternateShipmentProposal": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateShipmentProposal.schema.json",
      "title": "AlternateShipmentProposal",
      "definitions": {
        "AlternateShipmentProposal": {
          "$id": "#AlternateShipmentProposal",
          "type": "object",
          "description": "Alternate shipment proposal is used when the requested shipment is not valid as specified in the request. An alternate proposal could be a distinct shipmentSpecification close to the requested one or the same specification as requested but with a different carrier or shipping options",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of an alternate shipment proposal"
            },
            "alternateShipmentDeliveryDate": {
              "type": "string",
              "description": "Alternate delivery date in case the carrier is not able to meet requested expected delivery date for the shipment",
              "format": "date-time"
            },
            "alternateShipment": {
              "$ref": "../EngagedParty/ShipmentRefOrValue.schema.json#/definitions/ShipmentRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AlternateWorkProposal": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AlternateWorkProposal.schema.json",
      "title": "AlternateWorkProposal",
      "definitions": {
        "AlternateWorkProposal": {
          "$id": "#AlternateWorkProposal",
          "type": "object",
          "description": "Alternate work proposal is used when the requested unit of work is not valid as specified in the request. An alternate proposal could be a distinct workSpecification close to the requested one or the same specification as requested but with a different parameters.",
          "properties": {
            "alternateWork": {
              "$ref": "../EngagedParty/WorkRefOrValue.schema.json#/definitions/WorkRefOrValue"
            },
            "alternateWorkDate": {
              "type": "string",
              "format": "date-time",
              "description": "Alternate date where the work could take place in case the expected date cannot be met."
            },
            "id": {
              "type": "string",
              "description": "Identifier of an alternate work proposal"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Any": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Any.schema.json",
      "title": "Any",
      "definitions": {
        "Any": {
          "$id": "#Any"
        }
      }
    }
  ],
  "AppUsageDataAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppUsageDataAnalytics.schema.json",
      "title": "AppUsageDataAnalytics",
      "definitions": {
        "AppUsageDataAnalytics": {
          "$id": "#AppUsageDataAnalytics",
          "type": "object",
          "properties": {
            "startTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The beginning of the measurement interval \r\nSTART_TIMESTAMP to END_TIME_STAMP defines define the period for which the measurement is done"
            },
            "endTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The beginning of the measurement interval \r\nSTART_TIMESTAMP to END_TIME_STAMP defines define the period for which the measurement is done"
            },
            "appInstalledTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The TIMESTAMP of the APP installation (empty if not in the period START_TIMESTAMP-END_TIMESTAMP)"
            },
            "appUpdatedTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The TIMESTAMP of the APP update (empty if not in the period START_TIMESTAMP-END_TIMESTAMP)"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ApplicableTimePeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ApplicableTimePeriod.schema.json",
      "title": "ApplicableTimePeriod",
      "definitions": {
        "ApplicableTimePeriod": {
          "$id": "#ApplicableTimePeriod",
          "type": "object",
          "description": "The period of time for which Capacity or CapacityDemand applies.",
          "properties": {
            "dayOfWeek": {
              "type": "string",
              "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
            },
            "fromToDateTime": {
              "description": "The period of time for which the schedule is applicable. \r\nInstance values are mutually exclusive with daysOfWeek values.",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AppliedBillingRate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedBillingRate.schema.json",
      "title": "AppliedBillingRate",
      "definitions": {
        "AppliedBillingRate": {
          "$id": "#AppliedBillingRate",
          "description": "An applied billing rate presented on a bill. It is created before or during the billing process",
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date of the applied billing charge"
            },
            "description": {
              "type": "string",
              "description": "Additional data to be displayed on the bill for this applied billing charge"
            },
            "href": {
              "type": "string",
              "description": "Reference of the applied billing charge"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the applied billing charge"
            },
            "name": {
              "type": "string",
              "description": "Name of the applied billing rate"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax excluded amount to be charged on the bill (expresses in the given currency) for this applied billing rate"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "All taxes included amount to be charged on the bill (expressed in the given currency) for this applied billing rate"
            },
            "rateType": {
              "type": "string",
              "description": "Type of the applied billing rate : appliedBillingCharge (any kind of charge except taxation charges : recurringCharge, oneTimeCharge, usageCharge),  appliedBillingCredit (any kind of credit : rebate or productAlteration) or appliedPenaltyCharge (penalty charges such as late fees, payment rejection fees,...)"
            },
            "appliedTax": {
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedBillingTaxRate.schema.json#AppliedBillingTaxRate"
              }
            },
            "bill": {
              "$ref": "../Customer/BillRef.schema.json#BillRef"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedBillingRateCharacteristic.schema.json#AppliedBillingRateCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppliedBillingRateCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedBillingRateCharacteristic.schema.json",
      "title": "AppliedBillingRateCharacteristic",
      "definitions": {
        "AppliedBillingRateCharacteristic": {
          "$id": "#AppliedBillingRateCharacteristic",
          "description": "An applied billing rate has dynamic characteristics according to the its type (characteristics are based on the service type, line of business or on others parameters)",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Characteristic name"
            },
            "value": {
              "type": "string",
              "description": "Value affected to the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppliedBillingTaxRate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedBillingTaxRate.schema.json",
      "title": "AppliedBillingTaxRate",
      "definitions": {
        "AppliedBillingTaxRate": {
          "$id": "#AppliedBillingTaxRate",
          "description": "The applied billing tax rate represents taxes applied billing rate it refers to. It is calculated during the billing process.",
          "type": "object",
          "properties": {
            "taxAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax amount expressed in the given currency"
            },
            "taxCategory": {
              "type": "string",
              "description": "A categorization of the tax rate"
            },
            "taxRate": {
              "type": "number",
              "format": "float",
              "description": "Applied rate"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppliedCapacityAmount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedCapacityAmount.schema.json",
      "title": "AppliedCapacityAmount",
      "definitions": {
        "AppliedCapacityAmount": {
          "$id": "#AppliedCapacityAmount",
          "type": "object",
          "description": "The amount of ResourceCapacityDemand applied to a CapacityAmount.",
          "properties": {
            "appliedDemandAmount": {
              "type": "string",
              "description": "An amount of demand applied to a CapacityAmount. Note that this is a composite attribute defined by CapacityAmount."
            },
            "resource": {
              "type": "array",
              "description": "A list of resources being referred to in the AppliedCapacityAmount.",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
              }
            },
            "resourceCapacityDemand": {
              "description": "he amount of capacity that is planned to be consumed or has been consumed.",
              "$ref": "../Resource/ResourceCapacityDemand.schema.json#/definitions/ResourceCapacityDemand"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AppliedConsequence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedConsequence.schema.json",
      "title": "AppliedConsequence",
      "definitions": {
        "AppliedConsequence": {
          "$id": "#AppliedConsequence",
          "type": "object",
          "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a \nMeasureThresholdRuleViolation occurs.",
          "properties": {
            "appliedAction": {
              "type": "string",
              "description": "The action for a violated threshold. This could be a hyperlink to \nthe action."
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the consequence is."
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which Consequence is known and \ndistinguished from other MetricDefMeasureConsequences."
            },
            "repeatAction": {
              "type": "boolean",
              "description": "An indicator used to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value.  \nIf the repeatAction is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAction is False, the consequence is applied only if the previous MetricMeasure value was not in the same range."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "AppliedCustomerBillingRate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedCustomerBillingRate.schema.json",
      "title": "AppliedCustomerBillingRate",
      "definitions": {
        "AppliedCustomerBillingRate": {
          "$id": "#AppliedCustomerBillingRate",
          "type": "object",
          "description": "A customer bill displays applied billing rates created before or during the billing process.",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the customer applied billing rate"
            },
            "href": {
              "type": "string",
              "description": "Explanation: Reference of the customer applied billing rate."
            },
            "appliedTax": {
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedBillingTaxRate.schema.json#AppliedBillingTaxRate"
              }
            },
            "isBilled": {
              "type": "boolean",
              "description": "If isBilled = true then bill should be provided, if false then billingAccount should be provided"
            },
            "bill": {
              "$ref": "../Customer/CustomerBillRef.schema.json#CustomerBillRef"
            },
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date of the applied billing rate"
            },
            "description": {
              "type": "string",
              "description": "Additional data to be displayed on the bill for this customer applied billing rate"
            },
            "name": {
              "type": "string",
              "description": "Name of the customer applied billing rate"
            },
            "periodCoverage": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "periodCoverage for RecurringCharge (RC) indicating the RC coverage period dates for different purposes, such as RC proration, display on bill, GL reporting, etc. periodCoverage for OC start and end date will be the same"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "appliedBillingRateType": {
              "type": "string",
              "description": "Type of the applied billing rate : appliedBillingCharge (any kind of charge except taxation charges : recurringCharge, oneTimeCharge, usageCharge),  appliedBillingCredit (any kind of credit : rebate or productAlteration) or appliedPenaltyCharge (penalty charges such as late fees, payment rejection fees,...)"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef",
              "description": "Usually this information should be provided by the PRODUCT, which implies that there is a valid reference to product. In this case, this property should be empty. For all other situations, a text or structured info could be provided using this property. Regular modelling would suggest tu use the reforvalue pattern for this case. It is not choosen here because it would generate declarational dependencies which would be hard to maintain."
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic",
                "description": "Dynnamically needed additional information for the specific billitem, here named 'appliedCustomerBillingRate'. It should come from a catalog with the value and the schemas for the presentation on the bill"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppliedPartyBillingRate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedPartyBillingRate.schema.json",
      "title": "AppliedPartyBillingRate",
      "definitions": {
        "AppliedPartyBillingRate": {
          "$id": "#AppliedPartyBillingRate",
          "description": "An applied billing rate presented on a party bill. It is created before or during the billing process.",
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date of the applied billing charge"
            },
            "description": {
              "type": "string",
              "description": "Additional data to be displayed on the bill for this applied billing charge"
            },
            "href": {
              "type": "string",
              "description": "Reference of the applied billing charge"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the applied billing charge"
            },
            "name": {
              "type": "string",
              "description": "Name of the applied billing rate"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax excluded amount to be charged on the bill (expresses in the given currency) for this applied billing rate"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "All taxes included amount to be charged on the bill (expressed in the given currency) for this applied billing rate"
            },
            "rateType": {
              "type": "string",
              "description": "Type of the applied billing rate : appliedBillingCharge (any kind of charge except taxation charges : recurringCharge, oneTimeCharge, usageCharge),  appliedBillingCredit (any kind of credit : rebate or productAlteration) or appliedPenaltyCharge (penalty charges such as late fees, payment rejection fees,...)"
            },
            "appliedTax": {
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedBillingTaxRate.schema.json#AppliedBillingTaxRate"
              }
            },
            "bill": {
              "$ref": "../Customer/BillRef.schema.json#BillRef"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedBillingRateCharacteristic.schema.json#AppliedBillingRateCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppliedPayment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedPayment.schema.json",
      "title": "AppliedPayment",
      "definitions": {
        "AppliedPayment": {
          "$id": "#AppliedPayment",
          "type": "object",
          "description": "The applied payment is the result of lettering process. It enables to assign automatically or manually part of incoming payment amount to a bill.",
          "properties": {
            "appliedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "payment": {
              "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
            }
          }
        }
      }
    }
  ],
  "AppliedResourceCapacity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppliedResourceCapacity.schema.json",
      "title": "AppliedResourceCapacity",
      "definitions": {
        "AppliedResourceCapacity": {
          "$id": "#AppliedResourceCapacity",
          "type": "object",
          "properties": {
            "applicableTimePeriod": {
              "$ref": "../Common/ApplicableTimePeriod.schema.json#/definitions/ApplicableTimePeriod"
            },
            "appliedDemandAmount": {
              "type": "string",
              "description": "An amount of demand applied to a CapacityAmount. Note that this is a composite attribute defined by CapacityAmount."
            },
            "resource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceRefOrValue.schema.json#/definitions/ResourceRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Appointment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Appointment.schema.json",
      "title": "Appointment",
      "definitions": {
        "Appointment": {
          "$id": "#Appointment",
          "type": "object",
          "description": "An Appointment is an arrangement to do something or meet someone at a particular time, at a place (for face to face appointment) or in a contact medium (for phone appointment).",
          "properties": {
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "calendarEvent": {
              "$ref": "../Common/CalendarEventRef.schema.json#CalendarEventRef",
              "description": "A calendar event reference (CalendarEventRef). The appointment is associated with a calendar event (an happening at a point of time) associated to a calendar entry."
            },
            "category": {
              "type": "string",
              "description": "Business category : intervention for example or to be more precise after SalesIntervention, orderDeliveryIntervention,..."
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Appointment creation date"
            },
            "description": {
              "type": "string",
              "description": "Short free text describing the appointment"
            },
            "externalId": {
              "type": "string",
              "description": "External reference known by the customer"
            },
            "href": {
              "type": "string",
              "description": "Unique URI used to access to the appointment resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the appointment"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of last appointment update"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "relatedPlace": {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue",
              "description": "Related place defines (by reference or value) the place where the appointment will take place."
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "status": {
              "$ref": "../Customer/AppointmentStateType.schema.json#AppointmentStateType"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A time period (TimePeriod). Appointment beginning date time and end date time."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ],
          "required": [
            "validFor"
          ]
        }
      }
    }
  ],
  "AppointmentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppointmentRef.schema.json",
      "title": "AppointmentRef",
      "definitions": {
        "AppointmentRef": {
          "$id": "#AppointmentRef",
          "description": "Refers an appointment, such as a Customer presentation or internal meeting or site visit",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text regarding the appointment made with a party"
            },
            "href": {
              "type": "string",
              "description": "The reference of the appointment"
            },
            "id": {
              "type": "string",
              "description": "The identifier of the referred appointment"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AppointmentStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppointmentStateType.schema.json",
      "title": "AppointmentStateType",
      "definitions": {
        "AppointmentStateType": {
          "$id": "#AppointmentStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the appointment",
          "enum": [
            "initialized",
            "confirmed",
            "cancelled",
            "completed",
            "failed"
          ]
        }
      }
    }
  ],
  "AppointmentStateValues": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AppointmentStateValues.schema.json",
      "title": "AppointmentStateValues",
      "definitions": {
        "AppointmentStateValues": {
          "$id": "#AppointmentStateValues",
          "type": "string",
          "description": "",
          "enum": [
            "initialized",
            "confirmed",
            "cancelled",
            "completed",
            "failed"
          ]
        }
      }
    }
  ],
  "Area": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Area.schema.json",
      "title": "Area",
      "definitions": {
        "Area": {
          "$id": "#Area",
          "description": "Area corresponds to a geographic area as a city, a locality, a district, etc.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of an Area"
            },
            "name": {
              "type": "string",
              "description": "The defined name of the municipality"
            },
            "areaType": {
              "type": "string",
              "description": "SUBURB, LOCALITY, CITY, TOWN, BOROUGH, ..."
            },
            "characteristic": {
              "type": "array",
              "description": "Any additional characterization of the Area, defined for the Area type",
              "items": {
                "$ref": "../Common/LocationCharacteristic.schema.json#LocationCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ArrivalEstimation": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/UrbanMobility/ArrivalEstimation/schema.json",
      "title": "NGSI GTFS Schema",
      "description": "Arrival Estimation",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ArrivalEstimation"
              ],
              "description": "NGSI Entity type"
            },
            "hasStop": {
              "type": "string",
              "format": "uri"
            },
            "hasTrip": {
              "type": "string",
              "format": "uri"
            },
            "remainingTime": {
              "type": "string",
              "pattern": "^P(?=\\w*\\d)(?:\\d+Y|Y)?(?:\\d+M|M)?(?:\\d+W|W)?(?:\\d+D|D)?(?:T(?:\\d+H|H)?(?:\\d+M|M)?(?:\\d+(?:\\?.\\d{1,2})?S|S)?)?$"
            },
            "remainingDistance": {
              "type": "number",
              "minValue": 0
            },
            "headsign": {
              "type": "string"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasStop",
        "hasTrip",
        "remainingTime",
        "headSign"
      ]
    }
  ],
  "AssetUserRole": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssetUserRole.schema.json",
      "title": "AssetUserRole",
      "definitions": {
        "AssetUserRole": {
          "$id": "#AssetUserRole",
          "description": "The AssetUserRole is the detailed information concerning an individual user role",
          "type": "object",
          "required": [
            "manageableAsset",
            "userRole"
          ],
          "properties": {
            "manageableAsset": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            },
            "userRole": {
              "$ref": "../Common/UserRoleRef.schema.json#UserRoleRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Association": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Association.schema.json",
      "title": "Association",
      "definitions": {
        "Association": {
          "$id": "#Association",
          "description": "Association is the class that describes a relationship between two or more entities or entity specifications based on a given association specification (relationship type). The role of each endpoint in the relationship is given by an association role. The type of endpoints in the relationship should match the ones as defined in the corresponding association role specification.\n A relationship between entity/ entity specifications may be governed by conditions and rules which are addressed by constraint references in this resource. Constraints for a relationship may include new rules and conditions in addition to those defined for the corresponding association specification",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the association"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The last modified date of this association object"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Indicates the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name given to this association"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this association is valid"
            },
            "version": {
              "type": "string",
              "description": "Version of this REST resource"
            },
            "associationSpec": {
              "$ref": "../Common/AssociationSpecificationRef.schema.json#/definitions/AssociationSpecificationRef",
              "description": "The specification of this association"
            },
            "associationRole": {
              "type": "array",
              "items": {
                "$ref": "../Common/AssociationRole.schema.json#/definitions/AssociationRole"
              },
              "minItems": 2,
              "description": "The end point roles of this association"
            },
            "constraint": {
              "description": "Any constraints in this association",
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#/definitions/ConstraintRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AssociationRole": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationRole.schema.json",
      "title": "AssociationRole",
      "definitions": {
        "AssociationRole": {
          "$id": "#AssociationRole",
          "description": "This embedded object represents the role and type of each entity involved in a relationship.",
          "type": "object",
          "required": [
            "role",
            "entity"
          ],
          "properties": {
            "isSource": {
              "type": "boolean",
              "description": "A flag indicating if the participant involved in a relationship is the source or not. If this flag is true for both roles in an association, the association is bi-directional (both end points are navigable)"
            },
            "role": {
              "type": "string",
              "description": "The association role of this relationship participant as defined in the associationRoleSpecification"
            },
            "entity": {
              "description": "The entity being referred to",
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AssociationRoleSpec": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationRoleSpec.schema.json",
      "title": "AssociationRoleSpec",
      "definitions": {
        "AssociationRoleSpec": {
          "$id": "#AssociationRoleSpec",
          "description": "This embedded object represents the role and type of each entity involved in a relationship.",
          "type": "object",
          "properties": {
            "aggregation": {
              "type": "string"
            },
            "defaultQuantity": {
              "type": "integer"
            },
            "entityType": {
              "type": "string"
            },
            "isNavigable": {
              "type": "boolean"
            },
            "isSource": {
              "type": "boolean"
            },
            "maxQuantity": {
              "type": "integer"
            },
            "minQuantity": {
              "type": "integer"
            },
            "role": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AssociationRoleSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationRoleSpecification.schema.json",
      "title": "AssociationRoleSpecification",
      "definitions": {
        "AssociationRoleSpecification": {
          "$id": "#AssociationRoleSpecification",
          "description": "This embedded object represents the role and type of each entity involved in a relationship.",
          "type": "object",
          "properties": {
            "aggregation": {
              "description": "A flag indicates that if this role is an aggregation or a simple relationship",
              "type": "string"
            },
            "defaultQuantity": {
              "description": "Default quantity of the association role",
              "type": "integer"
            },
            "entityType": {
              "description": "The target (root) entity type associated with this role",
              "type": "string"
            },
            "isNavigable": {
              "description": "A flag indicating if access from the other end of association is allowed or not",
              "type": "boolean"
            },
            "isSource": {
              "description": "A flag indicating if the participant involved in a uni-directional relationship is the source or not. This flag is true If the association is bi-directional",
              "type": "boolean"
            },
            "maxQuantity": {
              "description": "Maximum allowed quantity of the association role",
              "type": "integer"
            },
            "minQuantity": {
              "description": "Minimum allowed quantity of the association role",
              "type": "integer"
            },
            "role": {
              "description": "The association role of this relationship participant",
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AssociationSpecRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationSpecRef.schema.json",
      "title": "AssociationSpecRef",
      "definitions": {
        "AssociationSpecRef": {
          "$id": "#AssociationSpecRef",
          "description": "reference to an AssociationSpecification object",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target AssociationSpecification"
            },
            "id": {
              "type": "string",
              "description": "reference id to the target AssociationSpecification"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AssociationSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationSpecification.schema.json",
      "title": "AssociationSpecification",
      "definitions": {
        "AssociationSpecification": {
          "$id": "#AssociationSpecification",
          "description": "AssociationSpecification is an association class that describes a type of relationship between two entities. This is a generic construct that may be used to describe relationship types and roles. The role and type of each entity in the relationship is given by an association role specification. Two role specifications are embedded in the association specification.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the specification"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The last modified date of this specification"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Indicates the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name given to this association specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this specification is valid"
            },
            "version": {
              "type": "string",
              "description": "Version of this association"
            },
            "constraint": {
              "type": "array",
              "description": "Constraints relating to this association",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#/definitions/ConstraintRef"
              }
            },
            "associationRoleSpec": {
              "type": "array",
              "description": "Role specifications for this association",
              "minItems": 2,
              "items": {
                "$ref": "../Common/AssociationRoleSpecification.schema.json#/definitions/AssociationRoleSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "AssociationSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AssociationSpecificationRef.schema.json",
      "title": "AssociationSpecificationRef",
      "definitions": {
        "AssociationSpecificationRef": {
          "$id": "#AssociationSpecificationRef",
          "description": "reference to an AssociationSpecification object",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Attachment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Attachment.schema.json",
      "title": "Attachment",
      "definitions": {
        "Attachment": {
          "$id": "#Attachment",
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for this particular attachment",
              "examples": [
                "4aafacbd-11ff-4dc8-b445-305f2215715f",
                "2334bc59-726e-4d34-ab96-f50e0561412f"
              ]
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "URI for this Attachment",
              "examples": [
                "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the attachment"
            },
            "description": {
              "type": "string",
              "description": "A narrative text describing the content of the attachment",
              "examples": [
                "Photograph of the Product",
                "Explanation Video"
              ]
            },
            "attachmentType": {
              "type": "string",
              "description": "Attachment type such as video, picture",
              "examples": [
                "video",
                "picture"
              ]
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
              "examples": [
                "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              ]
            },
            "mimeType": {
              "type": "string",
              "description": "Attachment mime type such as extension file for video, picture and document"
            },
            "content": {
              "type": "string",
              "format": "base64",
              "description": "The actual contents of the attachment object, if embedded, encoded as base64"
            },
            "size": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "The size of the attachment."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which the attachment is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AttachmentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AttachmentRef.schema.json",
      "title": "AttachmentRef",
      "definitions": {
        "AttachmentRef": {
          "$id": "#AttachmentRef",
          "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative text describing the content of the attachment"
            },
            "href": {
              "type": "string",
              "description": "URL serving as reference for the attachment resource",
              "format": "uri"
            },
            "id": {
              "description": "Unique-Identifier for this attachment",
              "type": "string"
            },
            "url": {
              "description": "Link to the attachment media/content",
              "type": "string",
              "format": "uri"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "AttachmentRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AttachmentRefOrValue.schema.json",
      "title": "AttachmentRefOrValue",
      "definitions": {
        "AttachmentRefOrValue": {
          "$id": "#AttachmentRefOrValue",
          "type": "object",
          "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
          "allOf": [
            {
              "$ref": "../Common/AttachmentRef.schema.json#AttachmentRef"
            },
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "Attribute": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Attribute.schema.json",
      "title": "Attribute",
      "definitions": {
        "Attribute": {
          "$id": "#Attribute",
          "type": "object",
          "properties": {
            "characteristic": {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            },
            "description": {
              "type": "string",
              "description": "The attribute description"
            }
          }
        }
      }
    }
  ],
  "AttributeValuePair": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AttributeValuePair.schema.json",
      "title": "AttributeValuePair",
      "definitions": {
        "AttributeValuePair": {
          "$id": "#AttributeValuePair",
          "type": "object",
          "properties": {
            "attributeName": {
              "type": "string"
            },
            "attributeValue": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Authorization": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Authorization.schema.json",
      "title": "Authorization",
      "definitions": {
        "Authorization": {
          "$id": "#Authorization",
          "description": "If special discount or special product offering price or specific condition need an approval for ISP sale representative it is described here.",
          "type": "object",
          "properties": {
            "givenDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the authorization (approved or declined) was done"
            },
            "name": {
              "type": "string",
              "description": "Name of the required authorization"
            },
            "requestedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the authorization is requested for"
            },
            "signatureRepresentation": {
              "type": "string",
              "description": "To describe a digital or manual signature"
            },
            "state": {
              "type": "string",
              "description": "State of the authorization, such as: approved or declined"
            },
            "approver": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "AuthorizePayment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AuthorizePayment.schema.json",
      "title": "AuthorizePayment",
      "definitions": {
        "AuthorizePayment": {
          "$id": "#AuthorizePayment",
          "required": [
            "authorizedPayment"
          ],
          "description": "Task resource for operation authorize payment",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "authorizePaymentDate ": {
              "description": "date of the operation authorize payment",
              "type": "string",
              "format": "date-time"
            },
            "authorizedPaymentDate ": {
              "description": "date when the operation was authorized",
              "type": "string",
              "format": "date-time"
            },
            "authorizedPayment ": {
              "$ref": "../Customer/PaymentRefOrValue.schema.json#PaymentRefOrValue",
              "description": "Related payment to this operation."
            }
          }
        }
      }
    }
  ],
  "AuthorizePaymentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "AuthorizePaymentRef.schema.json",
      "title": "AuthorizePaymentRef",
      "definitions": {
        "AuthorizePaymentRef": {
          "$id": "#AuthorizePaymentRef",
          "type": "object",
          "description": "Operation to payment authorization, prior to payment capture.",
          "properties": {
            "name": {
              "type": "string",
              "description": "A name for the payment authorization"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "BalanceAction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceAction.schema.json",
      "title": "BalanceAction",
      "definitions": {
        "BalanceAction": {
          "$id": "#BalanceAction",
          "description": "an abstract resource. example extensions are TopupBalance, AdjustBalance",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique Identifier for the resource"
            },
            "href": {
              "type": "string",
              "description": "A reference to the resource"
            },
            "reason": {
              "type": "string",
              "description": "Text describing the reason for the action/task"
            },
            "description": {
              "type": "string",
              "description": "Description of the recharge operation"
            },
            "channel": {
              "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name",
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
            },
            "amount": {
              "description": "Indicate the amount on the bucket. This is always a postive value. If part of an AdjustBalance then the adjustType will indicate if the amount is to be credited or debited",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "usageType": {
              "type": "string",
              "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
            },
            "impactedBucket": {
              "type": "array",
              "description": "A reference to the bucket impacted by the request or the value itself.",
              "items": {
                "$ref": "ImpactedBucket.schema.json#ImpactedBucket"
              }
            },
            "bucket": {
              "description": "A reference to the bucket impacted by the request or the value itself.",
              "$ref": "BucketRef.schema.json#BucketRef"
            },
            "requestor": {
              "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes role and name.",
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "requestedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction request was received in the server"
            },
            "confirmationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction was confirmed in the server"
            },
            "logicalResource": {
              "$ref": "../Resource/LogicalResourceRef.schema.json#LogicalResourceRef",
              "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
            },
            "product": {
              "description": "A reference to the Product associated with this bucket",
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "status": {
              "type": "string",
              "description": "Status of the operation"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket impacted by the balance related operation",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the operation"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BalanceActionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceActionRef.schema.json",
      "title": "BalanceActionRef",
      "definitions": {
        "BalanceActionRef": {
          "$id": "#BalanceActionRef",
          "description": "link to the resource that holds balance-related request information",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ],
          "type": "object"
        }
      }
    }
  ],
  "BalanceAdjustment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceAdjustment.schema.json",
      "title": "BalanceAdjustment",
      "definitions": {
        "BalanceAdjustment": {
          "$id": "#BalanceAdjustment",
          "description": "#TODO",
          "type": "object"
        }
      }
    }
  ],
  "BalanceDeduct": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceDeduct.schema.json",
      "title": "BalanceDeduct",
      "definitions": {
        "BalanceDeduct": {
          "$id": "#BalanceDeduct",
          "description": "The Balance Deduct task resource is a detailed description of deduction operation. If balanceReserve Resource ID is contained in the deduct request message, the reserved balance will be performed deduct operation (if part of the reserved balance is deducted, the remain amount will be released); if balanceReserve Resource ID is not contained in the deduct request message, the balance will be deducted directly.",
          "type": "object",
          "properties": {
            "confirmationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction was confirmed in the server"
            },
            "description": {
              "type": "string",
              "description": "Description of the deduct  operation"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a deduction"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the deduction  operation request"
            },
            "requestedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction request was received in the server"
            },
            "status": {
              "type": "string",
              "description": "Status of the deduction operation"
            },
            "deductType": {
              "type": "string",
              "description": "A preconfigured value that describes a deduct type which determines the prepay balance bucket in which the deduct is done"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "balanceReserve": {
              "$ref": "../Customer/BalanceReserveRef.schema.json#BalanceReserveRef"
            },
            "requestor": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "partyAccount": {
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BalanceDeductRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceDeductRef.schema.json",
      "title": "BalanceDeductRef",
      "definitions": {
        "BalanceDeductRef": {
          "$id": "#BalanceDeductRef",
          "description": "the resource that deduct balance information",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the balance information for a subscription"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the balancededuct entity"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BalanceDeductRollback": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceDeductRollback.schema.json",
      "title": "BalanceDeductRollback",
      "definitions": {
        "BalanceDeductRollback": {
          "$id": "#BalanceDeductRollback",
          "description": "The Rollback Balance Deduct task resource is a detailed description of rollback deduction",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the rollback deduct operation"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a rollback deduction"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the rollback deduction  operation request"
            },
            "requestedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the rollback deduction request was received in the server"
            },
            "status": {
              "type": "string",
              "description": "Status of the rollback deduction operation"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "partyAccount": {
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "balanceDeduct": {
              "$ref": "../Customer/BalanceDeductRef.schema.json#BalanceDeductRef"
            },
            "requestor": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BalanceReserve": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceReserve.schema.json",
      "title": "BalanceReserve",
      "definitions": {
        "BalanceReserve": {
          "$id": "#BalanceReserve",
          "type": "object",
          "description": "The Balance Reserve Operation resource is a detailed description of a balance reserve operation requested over a subscription",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the reserve operation"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a reserve"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the reserve operation request"
            },
            "isAutoDeduct": {
              "type": "boolean",
              "description": "Indicates if the reserved balance is auto deducted after a time period"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket impacted by the balance related operation",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "product": {
              "description": "A reference to the product related to the bucket that is impacted by the balance related operation",
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the operation"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "description": "Amount (can be monetary or non-monetary) to be reserved in the bucket"
            },
            "requestor": {
              "description": "Identifier for the user/customer/entity that performs the top-up action. This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel. Structure including at least attributes �role� and �name�.",
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "bucket": {
              "description": "A reference to the bucket impacted by the request. This is used in scenarios where the requestor knows beforehand the bucket that is going to be impacted instead of just referring to the commercial identifier of the impacted product and the type of bucket created under that product",
              "$ref": "../Customer/BucketBalanceRef.schema.json#BucketBalanceRef"
            },
            "reserveType": {
              "type": "string",
              "description": "A preconfigured value that describes a reserve type which determines the prepay balance bucket in which the reserve is done"
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "BalanceReserveRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceReserveRef.schema.json",
      "title": "BalanceReserveRef",
      "definitions": {
        "BalanceReserveRef": {
          "$id": "#BalanceReserveRef",
          "description": "the resource that holds reserved balance information",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the balance information for a subscription"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the balancereserve entity"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "BalanceTransfer": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceTransfer.schema.json",
      "title": "BalanceTransfer",
      "definitions": {
        "BalanceTransfer": {
          "$id": "#BalanceTransfer",
          "description": "The BalanceTransfer resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the balance transfer operation request."
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information. This is typically the resource url to retrieve individual transfer operation details"
            },
            "type": {
              "type": "string",
              "description": "A preconfigured value that describes a Transfer type which determines the prepay balance bucket in which the transfer is done (national-voice, roaming-voice, promotional-voice, data, ....)"
            },
            "description": {
              "type": "string",
              "description": "Description of the transfer operation"
            },
            "reason": {
              "type": "string",
              "description": "Text describing the reason for the adjustment"
            },
            "channel": {
              "description": "Indicator for the channel used to request the transfer operation. Structure including at least attribute name",
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
            },
            "requestor": {
              "description": "Identifier for the user/customer/entity that performs the transfer action.This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel Structure including at least attributes “role” and “name”",
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "targetId": {
              "type": "string",
              "description": "Identifier for the entity that receives the transfer (reference to a product via a commercial identifier such as an msisidn that relates to an internal product id)"
            },
            "targetType": {
              "type": "string",
              "description": "Intended for scenarios where the transfer is done from one bucket type to another (from voice to data). A preconfigured value that describes a Transfer type which determines the prepay balance bucket in which the transfer is done"
            },
            "receiver": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "Identifier for the user/customer/entity that receives the transfer action when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes “role” and “name”"
            },
            "amount": {
              "description": "Amount (can be monetary or non-monetary) to be transferred",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "transferCost": {
              "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "product": {
              "description": "A reference to the product related to the bucket that is impacted by the balance related operation",
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "sourceBucketBalance": {
              "description": "A reference to the source bucketBalance from which the funds are being transferred ",
              "$ref": "../Customer/BucketBalanceRef.schema.json#BucketBalanceRef"
            },
            "targetBucketBalance": {
              "description": "A reference to the target bucketBalance to which the funds are being transferred ",
              "$ref": "../Customer/BucketBalanceRef.schema.json#BucketBalanceRef"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket impacted by the balance transfer request",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the balance transfer"
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/BalanceAction.schema.json#BalanceAction"
            }
          ],
          "required": [
            "id",
            "href",
            "type",
            "reason",
            "channel",
            "targetId",
            "requestDate",
            "confirmationDate",
            "status",
            "amount",
            "product"
          ],
          "type": "object"
        }
      }
    }
  ],
  "BalanceUnreserve": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BalanceUnreserve.schema.json",
      "title": "BalanceUnreserve",
      "definitions": {
        "BalanceUnreserve": {
          "$id": "#BalanceUnreserve",
          "description": "The Balance Unreserve Operation resource is a detailed description of a balance unreserve operation requested over a subscription",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the unreserve operation"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information about a unreserve"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the unreserve operation request"
            },
            "balanceReserve": {
              "$ref": "../Customer/BalanceReserveRef.schema.json#BalanceReserveRef"
            },
            "bucketBalance": {
              "description": "A reference to the bucket involved in the balance-related operation",
              "$ref": "../Customer/BucketBalanceRef.schema.json#BucketBalanceRef"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "requestor": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "BankAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccount.schema.json",
      "title": "BankAccount",
      "definitions": {
        "BankAccount": {
          "$id": "#BankAccount",
          "description": "Describes the information of a bank account",
          "type": "object",
          "properties": {
            "accountHolder": {
              "type": "string",
              "description": "Name of the holder of the bank account"
            },
            "BIC": {
              "type": "string",
              "description": "Identifier of the bank according to its international code"
            },
            "domiciliation": {
              "type": "string",
              "description": "Address of the bank agency which manages the bank account"
            },
            "IBAN": {
              "type": "string",
              "description": "International Bank Account Number"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankAccountDebit": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountDebit.schema.json",
      "title": "BankAccountDebit",
      "definitions": {
        "BankAccountDebit": {
          "$id": "#BankAccountDebit",
          "description": "A bank account debit method of payment. This could be extended to add any required authorization fields to allow recurring payments",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "accountNumber": {
              "type": "string",
              "description": "The Bank Account Number (this could refer to the IBAN or SWIFT number)",
              "examples": [
                "GB74NATWEST122337754838313"
              ]
            },
            "accountNumberType": {
              "type": "string",
              "description": "The type of account number (e.g.: IBAN, SWIFT, ...)",
              "examples": [
                "IBAN"
              ]
            },
            "BIC": {
              "type": "string",
              "description": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
              "examples": [
                "NATWEST74GB"
              ]
            },
            "owner": {
              "type": "string",
              "description": "The owner of the bank account. This is also the account name.",
              "examples": [
                "Dominic Oyeniran"
              ]
            },
            "bank": {
              "type": "string",
              "description": "The display name of the bank.",
              "examples": [
                "Natwest Bank Limited."
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "bankAccountDebit"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "BankAccountDebitDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountDebitDetails.schema.json",
      "title": "BankAccountDebitDetails",
      "definitions": {
        "BankAccountDebitDetails": {
          "$id": "#BankAccountDebitDetails",
          "description": "Detailed information for a bank account debit. Bear in mind that this could be extended to add any required authorization fields to allow recurring payments",
          "type": "object",
          "properties": {
            "accountNumber": {
              "type": "integer",
              "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
            },
            "accountNumberType": {
              "type": "string",
              "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
            },
            "BIC": {
              "type": "string",
              "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
            },
            "blank": {
              "type": "string",
              "description": "Display name of the bank"
            },
            "owner": {
              "type": "string",
              "description": "Owner of the bank account"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankAccountDebitMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountDebitMethod.schema.json",
      "title": "BankAccountDebitMethod",
      "definitions": {
        "BankAccountDebitMethod": {
          "$id": "#BankAccountDebitMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../EngagedParty/BankAccountDebitDetails.schema.json#BankAccountDebitDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankAccountTransfer": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountTransfer.schema.json",
      "title": "BankAccountTransfer",
      "definitions": {
        "BankAccountTransfer": {
          "$id": "#BankAccountTransfer",
          "description": "A bank transfer method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "accountNumber": {
              "type": "string",
              "description": "The bank account number, this could refer to the iban or swift number.",
              "examples": [
                "GB74HSBCUK122337754838313"
              ]
            },
            "accountNumberType": {
              "type": "string",
              "description": "The type of account number (e.g.: IBAN, SWIFT, ...)",
              "examples": [
                "IBAN"
              ]
            },
            "BIC": {
              "type": "string",
              "description": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
              "examples": [
                "HBUKGB4BXXX"
              ]
            },
            "owner": {
              "type": "string",
              "description": "The owner of the bank account. This is also the account name.",
              "examples": [
                "Dom Joe Plumbing Ltd"
              ]
            },
            "bank": {
              "type": "string",
              "description": "The display name of the bank.",
              "examples": [
                "HSBC BANK UK"
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "bankAccountTransfer"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "BankAccountTransferDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountTransferDetails.schema.json",
      "title": "BankAccountTransferDetails",
      "definitions": {
        "BankAccountTransferDetails": {
          "$id": "#BankAccountTransferDetails",
          "description": "Detailed information for a bank account debit. Bear in mind that this could be extended to add any required authorization fields to allow recurring payments",
          "type": "object",
          "properties": {
            "accountNumber": {
              "type": "integer",
              "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
            },
            "accountNumberType": {
              "type": "string",
              "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
            },
            "BIC": {
              "type": "string",
              "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
            },
            "blank": {
              "type": "string",
              "description": "Display name of the bank"
            },
            "owner": {
              "type": "string",
              "description": "Owner of the bank account"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankAccountTransferMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankAccountTransferMethod.schema.json",
      "title": "BankAccountTransferMethod",
      "definitions": {
        "BankAccountTransferMethod": {
          "$id": "#BankAccountTransferMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../EngagedParty/BankAccountTransferDetails.schema.json#BankAccountTransferDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankCard": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankCard.schema.json",
      "title": "BankCard",
      "definitions": {
        "BankCard": {
          "$id": "#BankCard",
          "description": "A bank card method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "brand": {
              "type": "string",
              "description": "The card brand",
              "examples": [
                "Visa",
                "MasterCard",
                "AmericanExpress",
                "..."
              ]
            },
            "cardType": {
              "type": "string",
              "description": "The type of card e.g. Credit, debit etc.",
              "examples": [
                "Credit",
                "Debit"
              ]
            },
            "cardNumber": {
              "type": "string",
              "description": "The bank card number.",
              "examples": [
                "0000-0000-0000-0000"
              ]
            },
            "expirationDate": {
              "type": "string",
              "description": "Expiration date of the bank card.",
              "format": "date-time",
              "examples": [
                "2025-11-20T10:19:46+0000"
              ]
            },
            "cvv": {
              "type": "string",
              "description": "The security code (e.g.: CVV, CVV2) of the card.",
              "examples": [
                "123"
              ]
            },
            "lastFourDigits": {
              "type": "string",
              "description": "The last four digits of the credit card.",
              "examples": [
                "0000"
              ]
            },
            "nameOnCard": {
              "type": "string",
              "description": "The name on the card.",
              "examples": [
                "Abbey S King."
              ]
            },
            "bank": {
              "type": "string",
              "description": "The bank that issued the card.",
              "examples": [
                "Your Bank Inc."
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "bankCard"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "BankCardDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankCardDetails.schema.json",
      "title": "BankCardDetails",
      "definitions": {
        "BankCardDetails": {
          "$id": "#BankCardDetails",
          "description": "Detailed information for a bank card",
          "type": "object",
          "properties": {
            "bank": {
              "type": "string",
              "description": "Bank that issued the card"
            },
            "brand": {
              "type": "string",
              "description": "Card brand, such as Visa, MasterCard, AmericanExpress"
            },
            "cardNumber": {
              "type": "string",
              "description": "Credit long card number"
            },
            "cvv": {
              "type": "string",
              "description": "The security code (e.g.: CVV, CVV2) of the card"
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expiration date of the card"
            },
            "lastFourDigits": {
              "type": "string",
              "description": "Last four digits of the credit card"
            },
            "nameOnCard": {
              "type": "string",
              "description": "Name on the card"
            },
            "cardType": {
              "type": "string",
              "description": "Type of the card, such as Credit, Debit"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BankCardMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BankCardMethod.schema.json",
      "title": "BankCardMethod",
      "definitions": {
        "BankCardMethod": {
          "$id": "#BankCardMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/BankCardDetails.schema.json#BankCardDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BaseEvent": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BaseEvent.schema.json",
      "title": "BaseEvent",
      "definitions": {
        "BaseEvent": {
          "$id": "#BaseEvent",
          "description": "Base event with common attributes.",
          "type": "object",
          "properties": {
            "event": {
              "$ref": "../Common/Any.schema.json#Any"
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the event occurrence."
            },
            "eventType": {
              "type": "string",
              "description": "The type of the notification."
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "title": {
              "type": "string",
              "description": "The title of the event."
            },
            "description": {
              "type": "string",
              "description": "An explnatory of the event."
            },
            "priority": {
              "type": "string",
              "description": "A priority."
            },
            "timeOcurred": {
              "type": "string",
              "format": "date-time",
              "description": "The time the event occured."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BasePlusEvent": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BasePlusEvent.schema.json",
      "title": "BasePlusEvent",
      "definitions": {
        "BasePlusEvent": {
          "$id": "#BasePlusEvent",
          "description": "Base event with common attributes.",
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the event occurrence."
            },
            "eventType": {
              "type": "string",
              "description": "The type of the notification."
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "title": {
              "type": "string",
              "description": "The title of the event."
            },
            "description": {
              "type": "string",
              "description": "An explnatory of the event."
            },
            "priority": {
              "type": "string",
              "description": "A priority."
            },
            "timeOcurred": {
              "type": "string",
              "format": "date-time",
              "description": "The time the event occured."
            },
            "fieldPath": {
              "type": "string",
              "description": "The path identifying the object field concerned by this notification."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BaseProductRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BaseProductRefOrValue.schema.json",
      "title": "BaseProductRefOrValue",
      "definitions": {
        "BaseProductRefOrValue": {
          "$id": "#BaseProductRefOrValue",
          "description": "In the context of a product order or a product offering qualification, this data structure captures the product information useful to order or qualified  an existing subscribed product or to a new one. This is a subset of relevant product attributes for ordering and qualification",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "isRef": {
              "type": "boolean",
              "default": true,
              "description": "indicate if ref pattern is used"
            },
            "name": {
              "type": "string",
              "description": "This is the name of the product."
            },
            "productCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "realizingResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#ResourceRef"
              }
            },
            "realizingService": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "isBundle": {
              "type": "boolean",
              "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
            },
            "productRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRelationship.schema.json#ProductRelationship"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "relatedPlace": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BaseService": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BaseService.schema.json",
      "title": "BaseService",
      "definitions": {
        "BaseService": {
          "$id": "#BaseService",
          "description": "In the context of a service order and depending on the action requested (add/modify/delete/noChange) this data structure captures the configuration to apply to an existing subscribed service or to a new one",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the service",
              "type": "string"
            },
            "href": {
              "description": "Reference of the service",
              "type": "string"
            },
            "serviceType": {
              "description": "Business type of the service",
              "type": "string"
            },
            "name": {
              "description": "Name of the service",
              "type": "string"
            },
            "state": {
              "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]",
              "$ref": "../Service/ServiceStateType.schema.json#ServiceStateType"
            },
            "category": {
              "type": "string",
              "description": "Is it a customer facing or resource facing service"
            },
            "serviceSpecification": {
              "description": "The specification from which this service was instantiated",
              "$ref": "../Service/ServiceSpecificationRef.schema.json#ServiceSpecificationRef"
            },
            "serviceCharacteristic": {
              "type": "array",
              "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "serviceRelationship": {
              "type": "array",
              "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example).",
              "items": {
                "$ref": "../Service/ServiceRelationship.schema.json#ServiceRelationship"
              }
            },
            "supportingService": {
              "type": "array",
              "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "supportingResource": {
              "type": "array",
              "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#ResourceRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "place": {
              "type": "array",
              "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)",
              "items": {
                "$ref": "../Common/Place.schema.json#Place"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Beach": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/PointOfInterest/Beach/schema.json",
      "title": "FIWARE - Beach schema",
      "description": "A beach",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Beach"
              ],
              "description": "NGSI Entity type"
            },
            "width": {
              "type": "number"
            },
            "length": {
              "type": "number"
            },
            "beachType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "whiteSand",
                  "urban",
                  "isolated",
                  "calmWaters",
                  "blueFlag",
                  "Q-Quality",
                  "strongWaves",
                  "windy",
                  "blackSand"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "occupationRate": {
              "type": "string",
              "enum": [
                "high",
                "medium",
                "low"
              ]
            },
            "facilities": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "promenade",
                  "showers",
                  "cleaningServices",
                  "lifeGuard",
                  "sunshadeRental",
                  "sunLoungerRental",
                  "waterCraftRental",
                  "toilets",
                  "touristOffice",
                  "litterBins",
                  "telephone",
                  "surfPracticeArea",
                  "accessforDisabled"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "accessType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "privateVehicle",
                  "boat",
                  "onFoot",
                  "publicTransport"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "refSeeAlso": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              }
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "name"
      ]
    }
  ],
  "Bill": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Bill.schema.json",
      "title": "Bill",
      "definitions": {
        "Bill": {
          "$id": "#Bill",
          "description": "The Bill entity is used to model a bill (aka an invoice). It represents a total amount due for all products during the billing period and all significant date.",
          "type": "object",
          "properties": {
            "amountDue": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount due for this bill expressed in the given currency"
            },
            "billDate": {
              "type": "string",
              "format": "date-time",
              "description": "Bill date"
            },
            "billingPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Billing period of the bill (used for onCycle bill only)"
            },
            "billNo": {
              "type": "string",
              "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id."
            },
            "category": {
              "type": "string",
              "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note"
            },
            "href": {
              "type": "string",
              "description": "Bill unique reference"
            },
            "id": {
              "type": "string",
              "description": "Bill unique identifier"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of bill last update"
            },
            "nextBillDate": {
              "type": "string",
              "format": "date-time",
              "description": "Approximate date of  the next bill production given for information (only used for onCycle bill)"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the amount due should have been paid"
            },
            "remainingAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Remaining amount to be paid for this bill expressed in the given currency"
            },
            "runType": {
              "type": "string",
              "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)"
            },
            "state": {
              "type": "string",
              "description": "State that a bill could take during its lifecycle : New, Validated, On Hold, Sent, Partially paid or Settled"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Total tax excluded amount expressed in the given currency"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Total tax included amount expressed in the given"
            },
            "billDocument": {
              "type": "array",
              "items": {
                "$ref": "../Common/FileDocument.schema.json#FileDocument"
              },
              "description": "Document(s) associated to the bill"
            },
            "paymentItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentItem.schema.json#PaymentItem"
              },
              "description": "Payment items already lettered on this bill."
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              }
            },
            "paymentMethod": {
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "financialAccount": {
              "$ref": "../EngagedParty/FinancialAccountRef.schema.json#FinancialAccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycle": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycle.schema.json",
      "title": "BillCycle",
      "definitions": {
        "BillCycle": {
          "$id": "#BillCycle",
          "type": "object",
          "description": "A detailed description of a billing cycle and the various sub steps of a billing cycle.",
          "properties": {
            "billingDate": {
              "type": "string",
              "format": "date-time",
              "description": "The billing/settlement date."
            },
            "billingPeriod": {
              "type": "string",
              "description": "A billing time period. It is e.g. the concrete expressed month. Example: 'March'."
            },
            "chargeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date through when a payment method (e.g. credit card,...) will be activated."
            },
            "creditDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date through which credits previously received by the billing system are displeyed on the bill."
            },
            "description": {
              "type": "string",
              "description": "An explanation regarding this billing cycle. If necessary."
            },
            "href": {
              "type": "string",
              "description": "Reference of the billing cycle"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing cycle."
            },
            "mailingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Customer bill mailing date."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name of the actual billing cycle"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date, when the payment is due."
            },
            "BillCycleSpecification": {
              "$ref": "../Customer/BillCycleSpecificationRef.schema.json#BillCycleSpecificationRef"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the billing cycle is valid (expressed in a formal formatted way)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycleRef.schema.json",
      "title": "BillCycleRef",
      "definitions": {
        "BillCycleRef": {
          "$id": "#BillCycleRef",
          "type": "object",
          "description": "....",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "href": {
              "type": "string",
              "description": "Unique reference of the account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the account"
            },
            "name": {
              "type": "string",
              "description": "Name of the account"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycleSpec": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycleSpec.schema.json",
      "title": "BillCycleSpec",
      "definitions": {
        "BillCycleSpec": {
          "$id": "#BillCycleSpec",
          "type": "object",
          "description": "A detailed description of a billing cycle and the various sub steps of a billing cycle.",
          "properties": {
            "billingDateShift": {
              "type": "integer",
              "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
            },
            "billingPeriod": {
              "type": "string",
              "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
            },
            "chargeDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "creditDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "description": {
              "type": "string",
              "description": "An explanation regarding this billing cycle. If necessary."
            },
            "frequency_redundancy_to_billingPeriod": {
              "type": "string",
              "description": "Frequency of the billing cycle (monthly for instance)"
            },
            "href": {
              "type": "string",
              "description": "Reference of the billing cycle"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing cycle."
            },
            "mailingDateOffset": {
              "type": "integer",
              "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name of the actual billing cycle"
            },
            "paymentDueDateOffset": {
              "type": "integer",
              "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the billing cycle is valid, expressed in a formatted structured way."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycleSpecRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycleSpecRef.schema.json",
      "title": "BillCycleSpecRef",
      "definitions": {
        "BillCycleSpecRef": {
          "$id": "#BillCycleSpecRef",
          "type": "object",
          "description": "....",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the BillCycleSpec"
            },
            "href": {
              "type": "string",
              "description": "Explanation: Unique reference of the BillCycleSpec"
            },
            "name": {
              "type": "string",
              "description": "Name of the BillCycleSpec"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycleSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycleSpecification.schema.json",
      "title": "BillCycleSpecification",
      "definitions": {
        "BillCycleSpecification": {
          "$id": "#BillCycleSpecification",
          "type": "object",
          "description": "A detailed description of a billing cycle and the various sub steps of a billing cycle.",
          "properties": {
            "billingDateShift": {
              "type": "integer",
              "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
            },
            "billingPeriod": {
              "type": "string",
              "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
            },
            "chargeDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "creditDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "description": {
              "type": "string",
              "description": "An explanation regarding this billing cycle. If necessary."
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the billing cycle (monthly for instance)"
            },
            "href": {
              "type": "string",
              "description": "Reference of the billing cycle"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing cycle."
            },
            "mailingDateOffset": {
              "type": "integer",
              "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name of the actual billing cycle"
            },
            "paymentDueDateOffset": {
              "type": "integer",
              "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the billing cycle is valid, expressed in a formatted structured way."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillCycleSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillCycleSpecificationRef.schema.json",
      "title": "BillCycleSpecificationRef",
      "definitions": {
        "BillCycleSpecificationRef": {
          "$id": "#BillCycleSpecificationRef",
          "type": "object",
          "description": "....",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "href": {
              "type": "string",
              "description": "Unique reference of the BillCycleSpecification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the BillCycleSpecification"
            },
            "name": {
              "type": "string",
              "description": "Name of the BillCycleSpecification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillFormat": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillFormat.schema.json",
      "title": "BillFormat",
      "definitions": {
        "BillFormat": {
          "$id": "#BillFormat",
          "description": "A detailed description of the way in which a bill is presented.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text for this bill format"
            },
            "href": {
              "type": "string",
              "description": "Reference of the bill format"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bill format"
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillFormatRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillFormatRef.schema.json",
      "title": "BillFormatRef",
      "definitions": {
        "BillFormatRef": {
          "$id": "#BillFormatRef",
          "description": "BillFormat reference. A bill format is a description of the way in which a bill is presented.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the bill format"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bill format"
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillFormatRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillFormatRefOrValue.schema.json",
      "title": "BillFormatRefOrValue",
      "definitions": {
        "BillFormatRefOrValue": {
          "discriminator": "isRef",
          "$id": "#BillFormatRefOrValue",
          "description": "An attachment by value or by reference.",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Customer/BillFormatRef.schema.json#BillFormatRef"
            },
            {
              "$ref": "../Customer/BillFormat.schema.json#BillFormat"
            }
          ]
        }
      }
    }
  ],
  "BillPresentationMedia": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillPresentationMedia.schema.json",
      "title": "BillPresentationMedia",
      "definitions": {
        "BillPresentationMedia": {
          "$id": "#BillPresentationMedia",
          "description": "A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text describing this bill presentation media"
            },
            "href": {
              "type": "string",
              "description": "Reference of the bill presentation media"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bill presentation media"
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillPresentationMediaRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillPresentationMediaRef.schema.json",
      "title": "BillPresentationMediaRef",
      "definitions": {
        "BillPresentationMediaRef": {
          "$id": "#BillPresentationMediaRef",
          "description": "PresentationMedia reference. A mean of communicating a bill, supported by the associated bill format. For example, post mail, email, web page.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the bill presentation media"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bill presentation media"
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillPresentationMediaRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillPresentationMediaRefOrValue.schema.json",
      "title": "BillPresentationMediaRefOrValue",
      "definitions": {
        "BillPresentationMediaRefOrValue": {
          "discriminator": "isRef",
          "$id": "#BillPresentationMediaRefOrValue",
          "description": "An attachment by value or by reference.",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Customer/BillPresentationMediaRef.schema.json#BillPresentationMediaRef"
            },
            {
              "$ref": "../Customer/BillPresentationMedia.schema.json#BillPresentationMedia"
            }
          ]
        }
      }
    }
  ],
  "BillRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillRef.schema.json",
      "title": "BillRef",
      "definitions": {
        "BillRef": {
          "$id": "#BillRef",
          "description": "Bill reference.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Unique reference of the bill."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bill"
            },
            "name": {
              "type": "string",
              "description": "Name of the bill"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillStructure": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillStructure.schema.json",
      "title": "BillStructure",
      "definitions": {
        "BillStructure": {
          "$id": "#BillStructure",
          "description": "The structure of the bill for party accounts (billing or settlement).",
          "type": "object",
          "properties": {
            "presentationMedia": {
              "type": "array",
              "items": {
                "$ref": "../Customer/BillPresentationMediaRefOrValue.schema.json#BillPresentationMediaRefOrValue"
              }
            },
            "format": {
              "$ref": "../Customer/BillFormatRefOrValue.schema.json#BillFormatRefOrValue"
            },
            "cycleSpecification": {
              "$ref": "../Customer/BillingCycleSpecificationRefOrValue.schema.json#BillingCycleSpecificationRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillingAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingAccount.schema.json",
      "title": "BillingAccount",
      "definitions": {
        "BillingAccount": {
          "$id": "#BillingAccount",
          "description": "A party account used for billing purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount.",
          "type": "object",
          "required": [
            "name",
            "relatedParty"
          ],
          "properties": {
            "ratingType": {
              "type": "string",
              "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/PartyAccount.schema.json#PartyAccount"
            }
          ]
        }
      }
    }
  ],
  "BillingAccountAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingAccountAnalytics.schema.json",
      "title": "BillingAccountAnalytics",
      "definitions": {
        "BillingAccountAnalytics": {
          "$id": "#BillingAccountAnalytics",
          "type": "object",
          "properties": {
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BillingAccountRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingAccountRef.schema.json",
      "title": "BillingAccountRef",
      "definitions": {
        "BillingAccountRef": {
          "$id": "#BillingAccountRef",
          "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the billing account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing account"
            },
            "name": {
              "type": "string",
              "description": "Name of the billing account"
            },
            "ratingType": {
              "type": "string",
              "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillingCycleSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingCycleSpecification.schema.json",
      "title": "BillingCycleSpecification",
      "definitions": {
        "BillingCycleSpecification": {
          "$id": "#BillingCycleSpecification",
          "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "billingDateShift": {
              "type": "integer",
              "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
            },
            "billingPeriod": {
              "type": "string",
              "description": "A billing time period. It can be recurring, for example: week, month, quarter of year, year ."
            },
            "chargeDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "creditDateOffset": {
              "type": "integer",
              "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "description": {
              "type": "string",
              "description": "An explanation regarding this billing cycle specification"
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the billing cycle (monthly for instance)"
            },
            "href": {
              "type": "string",
              "description": "Reference of the billing cycle specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing cycle specification"
            },
            "mailingDateOffset": {
              "type": "integer",
              "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            },
            "paymentDueDateOffset": {
              "type": "integer",
              "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the billing specification cycle is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillingCycleSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingCycleSpecificationRef.schema.json",
      "title": "BillingCycleSpecificationRef",
      "definitions": {
        "BillingCycleSpecificationRef": {
          "$id": "#BillingCycleSpecificationRef",
          "description": "BillingCycleSpecification reference. A description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
          "type": "object",
          "properties": {
            "dateShift": {
              "type": "integer",
              "description": "An offset of a billing/settlement date. The offset is expressed as number of days with regard to the start of the billing/settlement period."
            },
            "frequency": {
              "type": "string",
              "description": "Frequency of the billing cycle (monthly for instance)"
            },
            "href": {
              "type": "string",
              "description": "Reference of the billing cycle specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the billing cycle specification"
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BillingCycleSpecificationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingCycleSpecificationRefOrValue.schema.json",
      "title": "BillingCycleSpecificationRefOrValue",
      "definitions": {
        "BillingCycleSpecificationRefOrValue": {
          "discriminator": "isRef",
          "$id": "#BillingCycleSpecificationRefOrValue",
          "description": "An attachment by value or by reference.",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Customer/BillingCycleSpecificationRef.schema.json#BillingCycleSpecificationRef"
            },
            {
              "$ref": "../Customer/BillingCycleSpecification.schema.json#BillingCycleSpecification"
            }
          ]
        }
      }
    }
  ],
  "BillingSubscriptionAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BillingSubscriptionAnalytics.schema.json",
      "title": "BillingSubscriptionAnalytics",
      "definitions": {
        "BillingSubscriptionAnalytics": {
          "$id": "#BillingSubscriptionAnalytics",
          "type": "object",
          "properties": {
            "subscriptionStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "subscriptionCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Subscriber creation date"
            },
            "subscriptionActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BiometricCredential": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BiometricCredential.schema.json",
      "title": "BiometricCredential",
      "definitions": {
        "BiometricCredential": {
          "$id": "#BiometricCredential",
          "description": "A Credential based on a login and a password.",
          "type": "object",
          "properties": {
            "biometricType": {
              "type": "string",
              "description": "a biometric type like finger, iris, face, etc... "
            },
            "biometricSubType": {
              "type": "string",
              "description": "a biometric sub type when required like for finger: thumb, index, ring , pinkyFinger, etc "
            },
            "attachment": {
              "description": "List of attachment(s) associated with this biometric data.",
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../engagedParty/Credential.schema.json#Credential"
            }
          ]
        }
      }
    }
  ],
  "BooleanArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BooleanArrayCharacteristic.schema.json",
      "title": "BooleanArrayCharacteristic",
      "definitions": {
        "BooleanArrayCharacteristic": {
          "$id": "#BooleanArrayCharacteristic",
          "description": "A characteristic which the value is a boolean array",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "BooleanArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BooleanArrayCharacteristicValueSpecification.schema.json",
      "title": "BooleanArrayCharacteristicValueSpecification",
      "definitions": {
        "BooleanArrayCharacteristicValueSpecification": {
          "$id": "#BooleanArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is an array booleans",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "BooleanCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BooleanCharacteristic.schema.json",
      "title": "BooleanCharacteristic",
      "definitions": {
        "BooleanCharacteristic": {
          "$id": "BooleanCharacteristic",
          "description": "A characteristic which value is a boolean",
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "BooleanCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BooleanCharacteristicValueSpecification.schema.json",
      "title": "BooleanCharacteristicValueSpecification",
      "definitions": {
        "BooleanCharacteristicValueSpecification": {
          "$id": "#BooleanCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a boolean",
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "Bucket": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Bucket.schema.json",
      "title": "Bucket",
      "definitions": {
        "Bucket": {
          "$id": "#Bucket",
          "type": "object",
          "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the bucket"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information for the bucket"
            },
            "name": {
              "type": "string",
              "description": "Friendly name to identify the bucket"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the balance managed by the bucket"
            },
            "usageType": {
              "type": "string",
              "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
            },
            "isShared": {
              "type": "boolean",
              "description": "True if the bucket is shared between several devices or users"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "product": {
              "type": "array",
              "items": {
                "description": "a reference to the Product(s) associated to the BucketReserve",
                "$ref": "../Product/ProductRef.schema.json#ProductRef"
              }
            },
            "logicalResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/LogicalResourceRef.schema.json#LogicalResourceRef",
                "description": "A reference to an array of logical resource that can be used to identify the bucket balance for example where product ids are not unique.Enables the devices to be shared by multiple users"
              }
            },
            "reservedValue": {
              "description": "Indicate the amount reserved on the bucket; should be the sum of all the valid (i.e. confirmed and not consumed or expired) amounts in the reserveBalance request array",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "reserveBalance": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ReserveBalanceRef.schema.json#ReserveBalanceRef",
                "description": "A reference to an array of outstanding reservation requests against this bucket (i.e. confirmed and not consumed or expired)"
              }
            },
            "remainingValue": {
              "description": "Indicate the amount on the bucket",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "remainingValueName": {
              "type": "string",
              "description": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
            },
            "status": {
              "type": "string",
              "description": "status for the bucket. active, expired, suspended"
            },
            "validFor": {
              "description": "The period for which the balance in the bucket is valid",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BucketBalanceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketBalanceRef.schema.json",
      "title": "BucketBalanceRef",
      "definitions": {
        "BucketBalanceRef": {
          "$id": "#BucketBalanceRef",
          "description": "link to the resource that holds bucket balance information",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "BucketPaymentMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketPaymentMethod.schema.json",
      "title": "BucketPaymentMethod",
      "definitions": {
        "Cash": {
          "$id": "#BucketPaymentMethod",
          "description": "Reference to a bucket that could be used to perform the payment, especially in the pre-paid environment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "bucket": {
              "$ref": "../Customer/BucketRef.schema.json#BucketRef"
            },
            "@type": {
              "type": "string",
              "enum": [
                "bucketPaymentMethod"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "BucketRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketRef.schema.json",
      "title": "BucketRef",
      "definitions": {
        "BucketRef": {
          "$id": "#BucketRef",
          "description": "link to the resource that holds bucket information",
          "type": "object",
          "properties": {
            "usageType": {
              "type": "string",
              "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "BucketRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketRefOrValue.schema.json",
      "title": "BucketRefOrValue",
      "definitions": {
        "BucketRefOrValue": {
          "$id": "#BucketRefOrValue",
          "type": "object",
          "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the bucket"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information for the bucket"
            },
            "name": {
              "type": "string",
              "description": "Friendly name to identify the bucket"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the balance managed by the bucket"
            },
            "usageType": {
              "type": "string",
              "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc"
            },
            "isShared": {
              "type": "boolean",
              "description": "True if the bucket is shared between several devices or users"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "product": {
              "type": "array",
              "items": {
                "description": "a reference to the Product(s) associated to the request",
                "$ref": "../Product/UsageConsumptionProductRef.schema.json#UsageConsumptionProductRef"
              }
            },
            "service": {
              "type": "array",
              "items": {
                "description": "a reference to the Service(s) associated to the request",
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "logicalResource": {
              "type": "array",
              "items": {
                "description": "a reference to the Logical Resource(s) associated to the request",
                "$ref": "../Resource/UsageConsumptionLogicalResourceRef.schema.json#UsageConsumptionLogicalResourceRef"
              }
            },
            "bucketRelationship": {
              "type": "array",
              "items": {
                "$ref": "../customer/BucketRelationship.schema.json#BucketRelationship"
              }
            },
            "bucketCounter": {
              "type": "array",
              "items": {
                "$ref": "../Product/ConsumptionSummary.schema.json#ConsumptionSummary"
              }
            },
            "reservedValue": {
              "description": "Indicate the amount reserved on the bucket; should be the sum of all the valid (i.e. confirmed and not consumed or expired) amounts in the reserveBalance request array",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "reserveBalance": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ReserveBalanceRef.schema.json#ReserveBalanceRef",
                "description": "A reference to an array of outstanding reservation requests against this bucket (i.e. confirmed and not consumed or expired)"
              }
            },
            "remainingValue": {
              "description": "Indicate the amount on the bucket",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "remainingValueName": {
              "type": "string",
              "description": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
            },
            "status": {
              "type": "string",
              "description": "status for the bucket. active, expired, suspended"
            },
            "validFor": {
              "description": "The period for which the balance in the bucket is valid",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "BucketRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketRelationship.schema.json",
      "title": "ProductRelationship",
      "definitions": {
        "BucketRelationship": {
          "$id": "#BucketRelationship",
          "description": "Linked bucket to the one instantiate, such as [isAggregated] if the bucket is a part of other or [aggregator] is the bucket holds others ",
          "type": "object",
          "required": [
            "relationshipType",
            "bucketRefOrValue"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the bucket relationship, such as [isAggregated] if the bucket is a part of other or [aggregator] is the bucket holds others"
            },
            "bucketRefOrValue": {
              "$ref": "../Customer/BucketRefOrValue.schema.json#BucketRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BucketStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BucketStatusExampleType.schema.json",
      "title": "BucketStatusExampleType",
      "definitions": {
        "BucketStatusExampleType": {
          "$id": "#BucketStatusExampleType",
          "type": "string",
          "description": "Possible values for the bucket status are (for example active,suspended,expired)",
          "enum": [
            "active",
            "suspended",
            "expired"
          ]
        }
      }
    }
  ],
  "Building": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Building/Building/schema.json",
      "title": "FIWARE - Building schema",
      "description": "Information on a given Building",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Building"
              ],
              "description": "NGSI Entity type"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "apartments",
                  "farm",
                  "hotel",
                  "house",
                  "detached",
                  "residential",
                  "dormitory",
                  "terrace",
                  "houseboat",
                  "bungalow",
                  "static_caravan",
                  "commercial",
                  "office",
                  "industrial",
                  "retail",
                  "warehouse",
                  "kiosk",
                  "bakehouse",
                  "cathedral",
                  "chapel",
                  "church",
                  "kindergarten",
                  "mosque",
                  "temple",
                  "synagogue",
                  "shrine",
                  "civic",
                  "hospital",
                  "school",
                  "stadium",
                  "train_station",
                  "transportation",
                  "university",
                  "grandstand",
                  "public",
                  "barn",
                  "bridge",
                  "bunker",
                  "cabin",
                  "carport",
                  "conservatory",
                  "construction",
                  "cowshed",
                  "digester",
                  "farm_auxiliary",
                  "garage",
                  "garages",
                  "garbage_shed",
                  "greenhouse",
                  "hangar",
                  "hut",
                  "pavilion",
                  "parking",
                  "riding_hall",
                  "roof",
                  "shed",
                  "stable",
                  "sty",
                  "transformer_tower",
                  "service",
                  "ruins",
                  "water_tower"
                ]
              }
            },
            "containedInPlace": {
              "$ref": "http://json-schema.org/geojson/geometry.json#"
            },
            "occupier": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri"
                  },
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              }
            },
            "floorsAboveGround": {
              "type": "integer"
            },
            "floorsBelowGround": {
              "type": "integer"
            },
            "refMap": {
              "type": "string",
              "format": "uri"
            },
            "openingHours": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "dayOfWeek": {
                    "type": "string"
                  },
                  "opens": {
                    "type": "string",
                    "format": "time"
                  },
                  "closes": {
                    "type": "string",
                    "format": "time"
                  },
                  "validFrom": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "validThrough": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "id",
        "category",
        "address"
      ]
    }
  ],
  "BuildingOperation": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Building/BuildingOperation/schema.json",
      "title": "FIWARE - Building Operation schema",
      "description": "Information on a given Building Operation",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "BuildingOperation"
              ],
              "description": "NGSI Entity type"
            },
            "refBuilding": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "refOperator": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "operationType": {
              "type": "string"
            },
            "result": {
              "type": "string",
              "enum": [
                "ok",
                "aborted"
              ]
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "format": "date-time"
            },
            "dateStarted": {
              "type": "string",
              "format": "date-time"
            },
            "dateFinished": {
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "enum": [
                "planned",
                "ongoing",
                "finished",
                "scheduled",
                "cancelled"
              ]
            },
            "operationSequence": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "refRelatedBuildingOperation": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              }
            },
            "refRelatedDeviceOperation": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  },
                  {
                    "type": "string",
                    "format": "uri"
                  }
                ]
              }
            }
          }
        }
      ],
      "required": [
        "type",
        "id",
        "refBuilding",
        "startDate",
        "endDate"
      ]
    }
  ],
  "BundledProductOffering": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BundledProductOffering.schema.json",
      "title": "BundledProductOffering",
      "definitions": {
        "BundledProductOffering": {
          "$id": "#BundledProductOffering",
          "type": "object",
          "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
          "properties": {
            "href": {
              "type": "string",
              "description": "Unique reference of the BundledProductOffering"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the BundledProductOffering"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the BundledProductOffering"
            },
            "bundledProductOfferingOption": {
              "$ref": "../Product/BundledProductOfferingOption.schema.json#BundledProductOfferingOption",
              "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BundledProductOfferingOption": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BundledProductOfferingOption.schema.json",
      "title": "BundledProductOfferingOption",
      "definitions": {
        "BundledProductOfferingOption": {
          "$id": "#BundledProductOfferingOption",
          "type": "object",
          "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded",
          "properties": {
            "numberRelOfferDefault": {
              "type": "integer",
              "description": "Default number of produc offereings that should be procured as part of the related BundledProductOffering"
            },
            "numberRelOfferLowerLimit": {
              "type": "integer",
              "description": "lower limit for a product offering that can be procured as part of the related BundledProductOffering"
            },
            "numberRelOfferUpperLimit": {
              "type": "integer",
              "description": "upper limit for a product offering that can be procured as part of the related BundledProductOffering"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BundledProductOfferingPriceRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BundledProductOfferingPriceRelationship.schema.json",
      "title": "BundledProductOfferingPriceRelationship",
      "definitions": {
        "BundledProductOfferingPriceRelationship": {
          "$id": "#BundledProductOfferingPriceRelationship",
          "type": "object",
          "description": "This represents a bundling pricing relationship, allowing a price to be composed of multiple other prices (e.g. a recurring charge and a onetime charge).",
          "properties": {
            "href": {
              "type": "string",
              "description": "hyperlink reference of the bundled product offering price"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the bundled product offering price"
            },
            "name": {
              "type": "string",
              "description": "Name of the bundled product offering price"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BundledProductOfferingRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BundledProductOfferingRef.schema.json",
      "title": "BundledProductOfferingRef",
      "definitions": {
        "BundledProductOfferingRef": {
          "$id": "#BundledProductOfferingRef",
          "description": "BundledProductOffering Reference. A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "BundledProductSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BundledProductSpecification.schema.json",
      "title": "BundledProductSpecification",
      "definitions": {
        "BundledProductSpecification": {
          "$id": "#BundledProductSpecification",
          "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the product specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product specification"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the product specification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "BusinessInteraction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "BusinessInteraction.schema.json",
      "title": "BusinessInteraction",
      "definitions": {
        "BusinessInteraction": {
          "$id": "#BusinessInteraction",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of this interaction"
            },
            "id": {
              "type": "string",
              "description": "The unique ID for this interaction"
            },
            "interactionData": {
              "type": "string",
              "format": "date-time"
            },
            "interactionDataComplete": {
              "type": "string",
              "format": "date-time"
            },
            "interactionDataStatus": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CalendarDateRule": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/CalendarDateRule/schema.json",
      "title": "NGSI GTFS Schema",
      "description": "GTFS Calendar Date Rule",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:CalendarDateRule"
              ],
              "description": "NGSI Entity type"
            },
            "appliesOn": {
              "type": "string",
              "format": "date"
            },
            "exceptionType": {
              "type": "string",
              "enum": [
                "1",
                "2"
              ]
            },
            "hasService": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasService",
        "appliesOn",
        "exceptionType"
      ]
    }
  ],
  "CalendarEventRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CalendarEventRef.schema.json",
      "title": "CalendarEventRef",
      "definitions": {
        "CalendarEventRef": {
          "$id": "#CalendarEventRef",
          "type": "object",
          "description": "Reference of a CalendarEvent",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "CalendarPeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CalendarPeriod.schema.json",
      "title": "CalendarPeriod",
      "definitions": {
        "CalendarPeriod": {
          "$id": "#CalendarPeriod",
          "type": "object",
          "properties": {
            "day": {
              "type": "string",
              "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
            },
            "status": {
              "type": "string",
              "description": "Indication of the availability of the site (e.g.: open)"
            },
            "timeZone": {
              "type": "string",
              "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
            },
            "hourPeriod": {
              "type": "array",
              "items": {
                "$ref": "../Common/HourPeriod.schema.json#HourPeriod"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CalendarRule": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/CalendarRule/schema.json",
      "title": "NGSI GTFS Schema",
      "description": "GTFS Calendar Rule",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:CalendarRule"
              ],
              "description": "NGSI Entity type"
            },
            "hasService": {
              "type": "string",
              "format": "uri"
            },
            "monday": {
              "type": "boolean"
            },
            "tuesday": {
              "type": "boolean"
            },
            "wednesday": {
              "type": "boolean"
            },
            "thursday": {
              "type": "boolean"
            },
            "friday": {
              "type": "boolean"
            },
            "saturday": {
              "type": "boolean"
            },
            "sunday": {
              "type": "boolean"
            },
            "startDate": {
              "type": "string",
              "format": "date"
            },
            "endDate": {
              "type": "string",
              "format": "date"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasService",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        "startDate",
        "endDate"
      ]
    }
  ],
  "CancelOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelOrder.schema.json",
      "title": "CancelOrder",
      "definitions": {
        "CancelOrder": {
          "$id": "#CancelOrder",
          "description": "A Order cancel is a type of task which  can  be used to place a request to cancel an order",
          "type": "object",
          "properties": {
            "requestedCancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the submitter wants the order to be cancelled"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the cancellation request"
            },
            "id": {
              "type": "string",
              "description": "id of the cancellation request (this is not an order id)"
            },
            "effectiveCancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled."
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled."
            },
            "state": {
              "description": "Tracks the lifecycle status of the cancellation request, such as Acknowledged, Rejected, InProgress, Pending and so on.",
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CancelProductOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelProductOrder.schema.json",
      "title": "CancelProductOrder",
      "definitions": {
        "CancelProductOrder": {
          "$id": "#CancelProductOrder",
          "description": "Request for cancellation an existing product order",
          "type": "object",
          "required": [
            "productOrder"
          ],
          "properties": {
            "productOrder": {
              "$ref": "../Customer/ProductOrderRef.schema.json#ProductOrderRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CancelOrder.schema.json#CancelOrder"
            }
          ]
        }
      }
    }
  ],
  "CancelReservation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelReservation.schema.json",
      "title": "CancelReservation",
      "definitions": {
        "CancelReservation": {
          "$id": "#CancelReservation",
          "type": "object",
          "description": "A Cancel Reservation is a type of task which  can  be used to place a request to cancel a reservation",
          "properties": {
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the reservation is cancelled."
            },
            "effectiveCancellationDate": {
              "type": "string",
              "description": "Date when the reservation is cancelled."
            },
            "requestedCancellationDate": {
              "type": "string",
              "description": "Date when the submitter wants the reservation to be cancelled"
            },
            "state": {
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "CancelResourceOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelResourceOrder.schema.json",
      "title": "CancelResourceOrder",
      "definitions": {
        "CancelResourceOrder": {
          "$id": "#CancelResourceOrder",
          "description": "Request for cancellation an existing resource order",
          "type": "object",
          "required": [
            "resourceOrder"
          ],
          "properties": {
            "resourceOrder": {
              "$ref": "../Resource/ResourceOrderRef.schema.json#ResourceOrderRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CancelOrder.schema.json#CancelOrder"
            }
          ]
        }
      }
    }
  ],
  "CancelResourceReservation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelResourceReservation.schema.json",
      "title": "CancelResourceReservation",
      "definitions": {
        "CancelResourceReservation": {
          "$id": "#CancelResourceReservation",
          "type": "object",
          "required": [
            "resourceReservation"
          ],
          "properties": {
            "resourceReservation": {
              "$ref": "../Resource/ResourceReservationRef.schema.json#/definitions/ResourceReservationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CancelReservation.schema.json#/definitions/CancelReservation"
            }
          ]
        }
      }
    }
  ],
  "CancelServiceOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelServiceOrder.schema.json",
      "title": "CancelServiceOrder",
      "definitions": {
        "CancelServiceOrder": {
          "$id": "#CancelServiceOrder",
          "description": "Request for cancellation an existing Service order",
          "type": "object",
          "required": [
            "ServiceOrder"
          ],
          "properties": {
            "serviceOrder": {
              "$ref": "../Service/ServiceOrderRef.schema.json#ServiceOrderRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CancelOrder.schema.json#CancelOrder"
            }
          ]
        }
      }
    }
  ],
  "CancelWorkOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CancelWorkOrder.schema.json",
      "title": "CancelWorkOrder",
      "definitions": {
        "CancelWorkOrder": {
          "$id": "#CancelWorkOrder",
          "type": "object",
          "required": [
            "workOrder"
          ],
          "properties": {
            "workOrder": {
              "$ref": "../EngagedParty/WorkOrderRef.schema.json#/definitions/WorkOrderRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CancelOrder.schema.json#/definitions/CancelOrder"
            }
          ]
        }
      }
    }
  ],
  "Capacity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Capacity.schema.json",
      "title": "Capacity",
      "definitions": {
        "Capacity": {
          "$id": "#Capacity",
          "type": "object",
          "description": "Specific ability of an entity measured in quantity and units of quantity over an extended period.",
          "properties": {
            "applicableTimePeriod": {
              "type": "array",
              "description": "The period of time for which Capacity or CapacityDemand applies.",
              "items": {
                "$ref": "../Common/ApplicableTimePeriod.schema.json#/definitions/ApplicableTimePeriod"
              }
            },
            "capacityAmount": {
              "description": "quantity that defines the Capacity.",
              "$ref": "../Common/CapacityAmount.schema.json#/definitions/CapacityAmount"
            },
            "capacitySpec": {
              "description": "capacity specification.",
              "$ref": "../Common/CapacitySpecRef.schema.json#/definitions/CapacitySpecRef"
            },
            "place": {
              "description": "Used to define a place useful for the resource. \r\nUsed to indicate reserved resources.",
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            },
            "plannedOrActualCapacity": {
              "type": "string",
              "description": "An indicator that specifies whether the capacity is planned or actual."
            },
            "relatedCapacity": {
              "type": "array",
              "description": "related capacity.",
              "items": {
                "$ref": "../Common/CapacityRef.schema.json#/definitions/CapacityRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "CapacityAmount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CapacityAmount.schema.json",
      "title": "CapacityAmount",
      "definitions": {
        "CapacityAmount": {
          "$id": "#CapacityAmount",
          "type": "object",
          "description": "Quantity that defines the Capacity.",
          "properties": {
            "capacityAmount": {
              "type": "string",
              "description": "A value and units that define the CapacityAmount, such as 10000 ea, 10B Mb. Instance values are mutually exclusive with From and To capacityAmounts and range interval."
            },
            "capacityAmountFrom": {
              "type": "string",
              "description": "The low range value that a Capacity Amount can take on."
            },
            "capacityAmountTo": {
              "type": "string",
              "description": "The upper range value that CapacityAmount can take on."
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the capacityAmount From and capacityAmountTo attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "CapacityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CapacityRef.schema.json",
      "title": "CapacityRef",
      "definitions": {
        "CapacityRef": {
          "$id": "#CapacityRef",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "CapacitySpecRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CapacitySpecRef.schema.json",
      "title": "CapacitySpecRef",
      "definitions": {
        "CapacitySpecRef": {
          "$id": "#CapacitySpecRef",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "CartItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartItem.schema.json",
      "title": "CartItem",
      "definitions": {
        "CartItem": {
          "$id": "#CartItem",
          "description": "An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options",
          "type": "object",
          "properties": {
            "action": {
              "$ref": "../Customer/CartItemActionType.schema.json#CartItemActionType",
              "description": "The action to be carried out on the Product. Can be: add, modify, delete, noChange"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity of cart items"
            },
            "status": {
              "$ref": "../Customer/CartItemStatusType.schema.json#CartItemStatusType",
              "description": "status of cart item. e.g \"active\" , \"savedForLater\"."
            },
            "itemTerm": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartTerm.schema.json#CartTerm"
              }
            },
            "cartItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartItem.schema.json#CartItem"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "itemTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartPrice.schema.json#CartPrice"
              }
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
            },
            "itemPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartPrice.schema.json#CartPrice"
              }
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "cartItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartItemRelationship.schema.json#CartItemRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CartItemActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartItemActionType.schema.json",
      "title": "CartItemActionType",
      "definitions": {
        "CartItemActionType": {
          "$id": "#CartItemActionType",
          "description": "action to be performed on the product",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "CartItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartItemRef.schema.json",
      "title": "CartItemRef",
      "definitions": {
        "CartItemRef": {
          "$id": "#CartItemRef",
          "description": "CartIIem reference. A CartItem is an identified part of the shopping cart.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the cart item"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CartItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartItemRelationship.schema.json",
      "title": "CartItemRelationship",
      "definitions": {
        "CartItemRelationship": {
          "$id": "#CartItemRelationship",
          "description": "Relationship among cart items mainly other than hierarchical relationships such as \"relyOn\", \"dependentOn\", \"shipping\" etc.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the referred cart item"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of the cart item relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CartItemStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartItemStatusType.schema.json",
      "title": "CartItemStatusType",
      "definitions": {
        "CartItemStatusType": {
          "$id": "#CartItemStatusType",
          "type": "string",
          "description": "Possible values for the status of the cart item",
          "enum": [
            "active",
            "saveForLater"
          ]
        }
      }
    }
  ],
  "CartPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartPrice.schema.json",
      "title": "CartPrice",
      "definitions": {
        "CartPrice": {
          "$id": "#CartPrice",
          "description": "An amount, usually of money, that represents the actual price paid by the customer for this item. May represent the total price of the shopping cart or the total of the cart item depending on the relation",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this order item price."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name such as \"Subscription price\"."
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth"
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef",
              "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time."
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price"
            },
            "priceAlteration": {
              "type": "array",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#PriceAlteration"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CartTerm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CartTerm.schema.json",
      "title": "CartTerm",
      "definitions": {
        "CartTerm": {
          "$id": "#CartTerm",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "duration": {
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "name": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Cash": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Cash.schema.json",
      "title": "Cash",
      "definitions": {
        "Cash": {
          "$id": "#Cash",
          "description": "A cash method of payment. It has no additional data, but it could be extended to add information e.g.: the cashier who took the payment, the person who paid, etc",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "cash"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "CashDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CashDetails.schema.json",
      "title": "CashDetails",
      "definitions": {
        "CashDetails": {
          "$id": "#CashDetails",
          "description": "Cash has no additional data, but it could be extended to add information (e.g.: the cashier who took the payment, the person who paid, etc)",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CashMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CashMethod.schema.json",
      "title": "CashMethod",
      "definitions": {
        "CashMethod": {
          "$id": "#CashMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/CashDetails.schema.json#CashDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Catalog": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Catalog.schema.json",
      "title": "Catalog",
      "definitions": {
        "Catalog": {
          "$id": "#Catalog",
          "description": "A collection of Product Offerings, intended for a specific DistributionChannel, enhanced with additional information such as SLA parameters, invoicing and shipping details",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Unique reference of the catalog"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Catalog"
            },
            "description": {
              "type": "string",
              "description": "Description of this catalog"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the catalog"
            },
            "catalogType": {
              "type": "string",
              "description": "Indicates if the catalog is a product, service or resource catalog"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the catalog is valid"
            },
            "version": {
              "type": "string",
              "description": "Catalog version"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "List of parties involved in this catalog"
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              },
              "description": "List of root categories contained in this catalog"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Category": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Category.schema.json",
      "title": "Category",
      "definitions": {
        "Category": {
          "$id": "#Category",
          "type": "object",
          "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the category"
            },
            "href": {
              "type": "string",
              "description": "Reference of the category"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the category"
            },
            "isRoot": {
              "type": "boolean",
              "description": "If true, this Boolean indicates that the category is a root of categories"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the category"
            },
            "parentId": {
              "type": "string",
              "description": "Unique identifier of the parent category"
            },
            "productOffering": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
              },
              "description": "A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information."
            },
            "subCategory": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              },
              "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the category is valid"
            },
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CategoryRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CategoryRef.schema.json",
      "title": "CategoryRef",
      "definitions": {
        "CategoryRef": {
          "$id": "#CategoryRef",
          "description": "The category for grouping recommendations",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "CategoryType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CategoryType.schema.json",
      "title": "CategoryType",
      "definitions": {
        "CategoryType": {
          "$id": "#CategoryType",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "sensor",
              "actuator",
              "meter",
              "HVAC",
              "network",
              "multimedia",
              "implement",
              "irrSystem",
              "irrSection",
              "endgun"
            ]
          }
        }
      }
    }
  ],
  "ChangeRequest": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ChangeRequest.schema.json",
      "title": "ChangeRequest",
      "definitions": {
        "ChangeRequest": {
          "$id": "#ChangeRequest",
          "description": "Change Request is a type of request which can be used for the management and control of Change Management \nprocess between a customer and a service provider or between a service provider and a partner and vice versa.",
          "type": "object",
          "properties": {
            "actualEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change implementation actually finished"
            },
            "actualStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change implementation actually started"
            },
            "budget": {
              "type": "string",
              "description": "The budget reserved for the change"
            },
            "channel": {
              "type": "string",
              "description": "A channel represents the way the Change Request was created"
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change request is confirmed to be completed"
            },
            "currency": {
              "type": "string",
              "description": "The used currency related with cost"
            },
            "description": {
              "type": "string",
              "description": "Description of the change request"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the requestor to facilitate the relationship set up and subsequent searches"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access a change request"
            },
            "id": {
              "type": "string",
              "description": "Identifier of a Change Request. It is created on repository side (a Change Management system)"
            },
            "impact": {
              "type": "string",
              "description": "Indicates the impact of this change"
            },
            "plannedEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change implementation is planned to be finished"
            },
            "plannedStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change implementation is planned to be started"
            },
            "priority": {
              "type": "string",
              "description": "Used by consumers to prioritize a change request in Change Management system"
            },
            "requestDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the change request is raised"
            },
            "requestType": {
              "type": "string",
              "description": "Indicates the type of the change request"
            },
            "risk": {
              "type": "string",
              "description": "The risk to implement this change request"
            },
            "riskMitigationPlan": {
              "type": "string",
              "description": "The risk mitigation plan"
            },
            "riskValue": {
              "type": "string",
              "description": "The additional cost if the risk will happen"
            },
            "scheduledDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time that the schedule is made"
            },
            "status": {
              "type": "string",
              "description": "Status of the change request and its sub-state"
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/Attachment.schema.json#Attachment"
              },
              "description": "The attachments of the communication message (when it is email type)"
            },
            "workLog": {
              "$ref": "../Common/WorkLog.schema.json#WorkLog"
            },
            "incident": {
              "type": "array",
              "items": {
                "$ref": "../Common/Incident.schema.json#Incident"
              }
            },
            "changeRequestSpecification": {
              "$ref": "../Common/ChangeRequestSpecification.schema.json#ChangeRequestSpecification"
            },
            "impactEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/ImpactEntityRef.schema.json#ImpactEntityRef"
              }
            },
            "changeRequestCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/ChangeRequestCharacteristic.schema.json#ChangeRequestCharacteristic"
              }
            },
            "targetEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/TargetEntityRef.schema.json#TargetEntityRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "The parties involved in the change request"
            },
            "resolution": {
              "$ref": "../Common/Resolution.schema.json#Resolution"
            },
            "sla": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/SLARef.schema.json#SLARef"
              }
            },
            "relateChangeRequest": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedChangeRequestRef.schema.json#RelatedChangeRequestRef"
              }
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "location": {
              "$ref": "../Common/GeographicAddressRef.schema.json#GeographicAddressRef",
              "description": "The place at which the change request occurred"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ChangeRequestCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ChangeRequestCharacteristic.schema.json",
      "title": "ChangeRequestCharacteristic",
      "definitions": {
        "ChangeRequestCharacteristic": {
          "$id": "#ChangeRequestCharacteristic",
          "description": "Characteristics of the change request to instantiate or to modify",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the characteristic."
            },
            "value": {
              "type": "string",
              "description": "Value of the characteristic."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ChangeRequestRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ChangeRequestRef.schema.json",
      "title": "ChangeRequestRef",
      "definitions": {
        "ChangeRequestRef": {
          "$id": "#ChangeRequestRef",
          "type": "object",
          "description": "Reference to a Change Request",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "href": {
              "type": "string",
              "description": "The reference link to the change request"
            },
            "id": {
              "type": "string",
              "description": "The identifier of the change request"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ChangeRequestSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ChangeRequestSpecification.schema.json",
      "title": "ChangeRequestSpecification",
      "definitions": {
        "ChangeRequestSpecification": {
          "$id": "#ChangeRequestSpecification",
          "description": "Defines a set of attributes related to Change Request.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the specification"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the specification."
            },
            "id": {
              "type": "string",
              "description": "Identifier of the specification."
            },
            "name": {
              "type": "string",
              "description": "Name of the specification."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Channel": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Channel.schema.json",
      "title": "Channel",
      "definitions": {
        "Channel": {
          "$id": "#Channel",
          "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the channel"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the channel"
            },
            "name": {
              "type": "string",
              "description": "Name of the channel"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ChannelRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ChannelRef.schema.json",
      "title": "ChannelRef",
      "definitions": {
        "ChannelRef": {
          "$id": "#ChannelRef",
          "type": "object",
          "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the channel."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Characteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Characteristic.schema.json",
      "title": "Characteristic",
      "definitions": {
        "Characteristic": {
          "$id": "#Characteristic",
          "description": "Describes a given characteristic of an object or entity through a name/value pair.",
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the characteristic"
            },
            "name": {
              "type": "string",
              "description": "Name of the characteristic"
            },
            "valueType": {
              "type": "string",
              "description": "Data type of the value of the characteristic"
            },
            "value": {
              "$ref": "../Common/Any.schema.json#Any",
              "description": "The value of the characteristic"
            },
            "characteristicRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicRelationship.schema.json#CharacteristicRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CharacteristicRelationship.schema.json",
      "title": "CharacteristicRelationship",
      "definitions": {
        "CharacteristicRelationship": {
          "$id": "#CharacteristicRelationship",
          "description": "Another Characteristic that is related to the current Characteristic;",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the characteristic"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CharacteristicSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CharacteristicSpecification.schema.json",
      "title": "CharacteristicSpecification",
      "definitions": {
        "CharacteristicSpecification": {
          "$id": "#CharacteristicSpecification",
          "description": "This class defines a characteristic specification.",
          "type": "object",
          "properties": {
            "charSpecRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicSpecificationRelationship.schema.json#CharacteristicSpecificationRelationship"
              },
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
            },
            "characteristicValueSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ]
        }
      }
    }
  ],
  "CharacteristicSpecificationBase": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CharacteristicSpecificationBase.schema.json",
      "title": "CharacteristicSpecificationBase",
      "definitions": {
        "CharacteristicSpecificationBase": {
          "$id": "#CharacteristicSpecificationBase",
          "description": "This class defines a characteristic specification.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
            },
            "id": {
              "type": "string",
              "description": "Unique ID for the characteristic"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains the CharacteristicSpecification."
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "configurable": {
              "type": "boolean",
              "description": "If true, the Boolean indicates that the target Characteristic is configurable"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which a characteristic is applicable."
            },
            "minCardinality": {
              "type": "integer",
              "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
            },
            "maxCardinality": {
              "type": "integer",
              "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
            },
            "isUnique": {
              "type": "boolean",
              "description": "Specifies if the value of this characteristic is unique across all entities instantiated from the specification that uses this characteristc. For example, consider a ProductSpecification for a set-top box, with a CharacteristicSpecification cardID. Each set-top box must have a different value for cardID, so this isUnique attribute would be set to true for the characteristic."
            },
            "regex": {
              "type": "string",
              "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
            },
            "extensible": {
              "type": "boolean",
              "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
            },
            "@valueSchemaLocation": {
              "type": "string",
              "description": "This (optional) field provides a link to the schema describing the value type."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CharacteristicSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CharacteristicSpecificationRelationship.schema.json",
      "title": "CharacteristicSpecificationRelationship",
      "definitions": {
        "CharacteristicSpecificationRelationship": {
          "$id": "#CharacteristicSpecificationRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "name": {
              "type": "string",
              "description": "Name of the target characteristic within the specification"
            },
            "characteristicSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the characteristic within the specification"
            },
            "parentSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the parent specification containing the target characteristic"
            },
            "parentSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the parent specification containing the target characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the object is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "CharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CharacteristicValueSpecification.schema.json",
      "title": "CharacteristicValueSpecification",
      "definitions": {
        "CharacteristicValueSpecification": {
          "$id": "#CharacteristicValueSpecification",
          "description": "specification of a value (number or text or an object) that can be assigned to a Characteristic.",
          "type": "object",
          "properties": {
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
            },
            "isDefault": {
              "type": "boolean",
              "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
            },
            "value": {
              "$ref": "../Common/Any.schema.json#/definitions/Any",
              "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which a value is applicable."
            },
            "valueFrom": {
              "type": "integer",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "integer",
              "description": "The upper range value that a characteristic can take on"
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "regex": {
              "type": "string",
              "description": "A regular expression constraint for given value"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Check": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Check.schema.json",
      "title": "Check",
      "definitions": {
        "Check": {
          "$id": "#Check",
          "description": "A check method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "checkId": {
              "type": "string",
              "description": "Unique identifier of the check.",
              "examples": [
                "02598636"
              ]
            },
            "drawer": {
              "type": "string",
              "description": "Person or entity writing the check.",
              "examples": [
                "A.D Oyeniran"
              ]
            },
            "payee": {
              "type": "string",
              "description": "Person or entity the check is addressed to.",
              "examples": [
                "Steve Harrop"
              ]
            },
            "signedDate": {
              "type": "string",
              "description": "Date when the check was signed.",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:19:46+0000"
              ]
            },
            "bank": {
              "type": "string",
              "description": "Bank performing the payment of the check.",
              "examples": [
                "Barclays Bank."
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "check"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "CheckDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckDetails.schema.json",
      "title": "CheckDetails",
      "definitions": {
        "CheckDetails": {
          "$id": "#CheckDetails",
          "description": "Detailed information of a check",
          "type": "object",
          "properties": {
            "bank": {
              "type": "string",
              "description": "Bank performing the payment of the check"
            },
            "code": {
              "type": "string",
              "description": "Unique identifier of the check"
            },
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the check was signed"
            },
            "drawer": {
              "type": "string",
              "description": "Person or entity writing the check"
            },
            "payee": {
              "type": "string",
              "description": "Person or entity the check is addressed to"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CheckMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckMethod.schema.json",
      "title": "CheckMethod",
      "definitions": {
        "CheckMethod": {
          "$id": "#CheckMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/CheckDetails.schema.json#CheckDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CheckProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckProductStock.schema.json",
      "title": "CheckProductStock",
      "definitions": {
        "CheckProductStock": {
          "$id": "#CheckProductStock",
          "description": "CheckProductStock is used to log and execute check about product stock availability",
          "type": "object",
          "properties": {
            "creationDate": {
              "description": "Date when the CheckProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "requestedCheckProductStockDate": {
              "description": "Date when the requester wished to have a response for this product stock check query.",
              "type": "string",
              "format": "date-time"
            },
            "completedCheckProductStockDate": {
              "description": "Date when the CheckProductStock was completed.",
              "type": "string",
              "format": "date-time"
            },
            "requestedAvailabilityDate": {
              "description": "Date when the stock availability should be check.",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "Unique identifier of the CheckProductStock",
              "type": "string"
            },
            "href": {
              "description": "Reference of the CheckProductStock",
              "type": "string"
            },
            "instantSyncCheck": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the CheckProductStock (acknowledged, inProgress, terminatedWithError, done)"
            },
            "provideAlternative": {
              "type": "boolean",
              "default": false,
              "description": "When the value is TRUE means that alternative proposal should be provided (from other product stock, different date or quantity)"
            },
            "checkProductStockItem": {
              "type": "array",
              "description": "A list of check product stock  item",
              "items": {
                "$ref": "../Resource/CheckProductStockItem.schema.json#/definitions/CheckProductStockItem"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this CheckProductStock",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "place": {
              "description": "Used to define a geographical place where requester wants to check stock availability ",
              "$ref": "../Common/PlaceRefOrValue.schema.json#PlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "CheckProductStockItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckProductStockItem.schema.json",
      "title": "CheckProductStockItem",
      "definitions": {
        "CheckProductStockItem": {
          "$id": "#CheckProductStockItem",
          "description": "CheckProductStockItem is used to log and execute query about one product (or configured product) stock availability",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the Check Product Stock item",
              "type": "string"
            },
            "availabilityResult": {
              "description": "Result of the availability like available, notAvailable, alternate",
              "type": "string"
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the CheckProductStockItem (acknowledged, inProgress, terminatedWithError, done)"
            },
            "requestedQuantity": {
              "$ref": "Quantity.schema.json#/definitions/Quantity",
              "description": "Requested quantity to be checked for this product"
            },
            "checkedProductStock": {
              "$ref": "..Resource/ProductStock.schema.json#/definitions/ProductStock",
              "description": "the product stock too be checked"
            },
            "provideAlternative": {
              "type": "boolean",
              "default": false,
              "description": "When the value is TRUE means that alternative proposal should be provided (from other product stock, different date or quantity)"
            },
            "alternate": {
              "type": "array",
              "description": "A list of alternate availability - from other product stock , different date or quantity",
              "items": {
                "$ref": "..Resource/AlternateProductStock.schema.json#/definitions/AlternateProductStock"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Extensible.schema.json#/Extensible"
            }
          ]
        }
      }
    }
  ],
  "CheckServiceQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckServiceQualification.schema.json",
      "title": "CheckServiceQualification",
      "definitions": {
        "CheckServiceQualification": {
          "$id": "#CheckServiceQualification",
          "type": "object",
          "description": "CheckServiceQualification is used to perform a technical eligibility on service configuration(s). It allows to retrieve services that are technically available in the context of the interaction (place, party, service characteristics, ...).",
          "properties": {
            "serviceQualificationItem": {
              "type": "array",
              "description": "A list of service qualification items.",
              "items": {
                "$ref": "CheckServiceQualificationItem.schema.json#CheckServiceQualificationItem"
              }
            },
            "provideAlternative": {
              "type": "boolean",
              "default": false,
              "description": "When the value is TRUE means that alternative solutions should be provided"
            },
            "provideUnavailabilityReason": {
              "type": "boolean",
              "default": false,
              "description": "When the value is TRUE means that unavailability reason are expected for non available service."
            },
            "qualificationResult": {
              "description": "Qualification result for this serviceQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)",
              "type": "string"
            },
            "checkServiceQualificationDate": {
              "type": "string",
              "description": "Date when the serviceQualification was submitted",
              "format": "date-time"
            }
          },
          "allOf": [
            {
              "$ref": "../Service/ServiceQualification.schema.json#ServiceQualification"
            }
          ]
        }
      }
    }
  ],
  "CheckServiceQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckServiceQualificationItem.schema.json",
      "title": "CheckServiceQualificationItem",
      "definitions": {
        "CheckServiceQualificationItem": {
          "$id": "#CheckServiceQualificationItem",
          "description": "A ServiceQualificationItem relates to a specific service being checked in a qualification operation.",
          "type": "object",
          "properties": {
            "qualificationResult": {
              "type": "string",
              "description": "Qualification result for serviceQualification item. It could be: - qualified (request service are available), - unqualified (requested not available and not alternate available), - alternate (requested not available but proposal available)"
            },
            "state": {
              "type": "string",
              "description": "State of the serviceQualification item (acknowledged, inProgress, terminatedWithError, done)"
            },
            "qualificationRelationship": {
              "type": "array",
              "description": "Structure used to describe relationship between serviceQualification item from the same serviceQualification.",
              "items": {
                "$ref": "ServiceQualificationRelationship.schema.json#ServiceQualificationRelationship"
              }
            },
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "description": "A list of eligibility unavailability reasons (EligibilityUnavailabilityReason [*]). Reason for eligibility result if the serviceQualification result is no (meaning the service is not available).",
              "items": {
                "$ref": "ServiceEligibilityUnavailabilityReason.schema.json#ServiceEligibilityUnavailabilityReason"
              }
            },
            "qualificationItemRelationship": {
              "type": "array",
              "description": "A list of qualification item relationships used to describe relationship between serviceQualification item from the same serviceQualification.",
              "items": {
                "$ref": "ServiceQualificationItemRelationship.schema.json#ServiceQualificationItemRelationship"
              }
            },
            "terminationError": {
              "type": "array",
              "description": "If qualificationItem has not been done properly this lists the error(s) that caused termination of the qualification.",
              "items": {
                "$ref": "TerminationError.schema.json#TerminationError"
              }
            },
            "alternateServiceProposal": {
              "type": "array",
              "description": "Alternate service proposal is used when the requested service is not available with characteristic and date asked for. An alternate proposal could be a distinct service Spec close to requested one or same as requested but with a different availability date.",
              "items": {
                "$ref": "AlternateServiceProposal.schema.json#AlternateServiceProposal"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Service/ServiceQualificationItem.schema.json#ServiceQualificationItem"
            }
          ]
        }
      }
    }
  ],
  "CheckShipmentQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckShipmentQualification.schema.json",
      "title": "CheckShipmentQualification",
      "definitions": {
        "CheckShipmentQualification": {
          "$id": "#CheckShipmentQualification",
          "type": "object",
          "description": "CheckShipmentQualification is used to validate the eligibility of specific \r\nshipments.",
          "required": [
            "shipmentQualificationItem"
          ],
          "properties": {
            "provideAlternative": {
              "type": "boolean",
              "description": "When the value is TRUE means that alternative solutions should be provided",
              "default": false
            },
            "provideUnavailabilityReason": {
              "type": "boolean",
              "description": "When the value is TRUE means that unavailability reason are expected for non available shipments.",
              "default": false
            },
            "qualificationResult": {
              "type": "string",
              "description": "Qualification result for this shipmentQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)"
            },
            "checkShipmentQualificationDate": {
              "type": "string",
              "description": "Date when the shipmentQualification was submitted",
              "format": "date-time"
            },
            "shipmentQualificationItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/CheckShipmentQualificationItem.schema.json#/definitions/CheckShipmentQualificationItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/ShipmentQualification.schema.json#/definitions/ShipmentQualification"
            }
          ]
        }
      }
    }
  ],
  "CheckShipmentQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckShipmentQualificationItem.schema.json",
      "title": "CheckShipmentQualificationItem",
      "definitions": {
        "CheckShipmentQualificationItem": {
          "$id": "#CheckShipmentQualificationItem",
          "type": "object",
          "description": "A ShipmentQualificationItem relates to a specific shipment being checked in a qualification operation.",
          "properties": {
            "qualificationResult": {
              "type": "string",
              "description": "Qualification result for shipmentQualification item. It could be: - qualified (requested shipment is valid), - unqualified (requested shipment not valid and not alternative available), - alternate (requested shipment not valid but alternate proposal available)"
            },
            "state": {
              "type": "string",
              "description": "State of the qualification item (acknowledged, inProgress, terminatedWithError, done)"
            },
            "terminationError": {
              "type": "array",
              "description": "If qualificationItem has not been done properly this lists the error(s) that caused termination of the qualification.",
              "items": {
                "$ref": "../Service/TerminationError.schema.json#/definitions/TerminationError"
              }
            },
            "qualificationRelationship": {
              "type": "array",
              "description": "Structure used to describe relationship between shipementQualification item from the same shipementQualification .",
              "items": {
                "$ref": "../EngagedParty/ShipmentQualificationRelationship.schema.json#/definitions/ShipmentQualificationRelationship"
              }
            },
            "qualificationItemRelationship": {
              "type": "array",
              "description": "A list of qualification item relationships used to describe relationship between shipmentQualification item from the same shipmentQualification.",
              "items": {
                "$ref": "../EngagedParty/ShipmentQualificationItemRelationship.schema.json#/definitions/ShipmentQualificationItemRelationship"
              }
            },
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "description": "A list of eligibility unavailability reasons. Reason for eligibility result if the shipmentQualification result is no (meaning the shipment is not valid).",
              "items": {
                "$ref": "../EngagedParty/ShipmentEligibilityUnavailabilityReason.schema.json#/definitions/ShipmentEligibilityUnavailabilityReason"
              }
            },
            "alternateShipmentProposal": {
              "type": "array",
              "description": "Alternate shipment proposal is used when the requested shipment is not valid as specified in the request. An alternate proposal could be a distinct shipmentSpecification close to the requested one or the same specification as requested but with a different carrier or shipping options",
              "items": {
                "$ref": "../EngagedParty/AlternateShipmentProposal.schema.json#/definitions/AlternateShipmentProposal"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/ShipmentQualificationItem.schema.json#/definitions/ShipmentQualificationItem"
            }
          ]
        }
      }
    }
  ],
  "CheckWorkQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckWorkQualification.schema.json",
      "title": "CheckWorkQualification",
      "definitions": {
        "CheckWorkQualification": {
          "$id": "#CheckWorkQualification",
          "type": "object",
          "description": "CheckWorkQualification is used to validate specific units of work",
          "required": [
            "workQualificationItem"
          ],
          "properties": {
            "checkWorkQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the workQualification was submitted"
            },
            "provideAlternative": {
              "type": "boolean",
              "description": "When the value is TRUE means that alternative solutions should be provided",
              "default": false
            },
            "provideUnavailabilityReason": {
              "type": "boolean",
              "description": "When the value is TRUE means that unavailability reason are expected for non available units of work.",
              "default": false
            },
            "qualificationResult": {
              "type": "string",
              "description": "Qualification result for this workQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)"
            },
            "workQualificationItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/CheckWorkQualificationItem.schema.json#/definitions/CheckWorkQualificationItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/WorkQualification.schema.json#/definitions/WorkQualification"
            }
          ]
        }
      }
    }
  ],
  "CheckWorkQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CheckWorkQualificationItem.schema.json",
      "title": "CheckWorkQualificationItem",
      "definitions": {
        "CheckWorkQualificationItem": {
          "$id": "#CheckWorkQualificationItem",
          "type": "object",
          "description": "A WorkQualificationItem relates to a specific unit of work being checked in a qualification operation.",
          "properties": {
            "alternateWorkProposal": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AlternateWorkProposal.schema.json#/definitions/AlternateWorkProposal"
              }
            },
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkEligibilityUnavailabilityReason.schema.json#/definitions/WorkEligibilityUnavailabilityReason"
              }
            },
            "qualificationItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkQualificationItemRelationship.schema.json#/definitions/WorkQualificationItemRelationship"
              }
            },
            "qualificationRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkQualificationRelationship.schema.json#/definitions/WorkQualificationRelationship"
              }
            },
            "qualificationResult": {
              "type": "string",
              "description": "Qualification result for workQualification item. It could be: - qualified (requested unit of work is valid), - unqualified (requested unit of work not valid and not alternative available), - alternate (requested unit of work not valid but alternate proposal available)"
            },
            "state": {
              "type": "string",
              "description": "State of the qualification item (acknowledged, inProgress, terminatedWithError, done)"
            },
            "terminationError": {
              "type": "array",
              "description": "If qualificationItem has not been done properly this lists the error(s) that caused termination of the qualification.",
              "items": {
                "$ref": "../Service/TerminationError.schema.json#/definitions/TerminationError"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/WorkQualificationItem.schema.json#/definitions/WorkQualificationItem"
            }
          ]
        }
      }
    }
  ],
  "ClearAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ClearAlarms.schema.json",
      "title": "ClearAlarms",
      "definitions": {
        "ClearAlarms": {
          "$id": "#ClearAlarms",
          "description": "Task resource for clear alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "clearSystemId": {
              "description": "Name of the clearing system",
              "type": "string"
            },
            "clearUserId": {
              "description": "Name of the clearing user",
              "type": "string"
            },
            "alarmClearedTime": {
              "description": "Time of the alarm clearing",
              "type": "string",
              "format": "date-time"
            },
            "alarmPattern": {
              "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm.",
              "type": "array",
              "items": {
                "$ref": "../Resource/Alarm.schema.json#Alarm"
              }
            },
            "clearedAlarm": {
              "description": "The successfully cleared alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "CollectionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CollectionType.schema.json",
      "title": "CollectionType",
      "definitions": {
        "CollectionType": {
          "$id": "#CollectionType",
          "description": "This is enumeration for CollectionType state",
          "type": "string",
          "enum": [
            "cumulative",
            "delta",
            "discrete_event",
            "gauge",
            "status_inspection"
          ]
        }
      }
    }
  ],
  "Comment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Comment.schema.json",
      "title": "Comment",
      "definitions": {
        "Comment": {
          "$id": "#Comment",
          "type": "object",
          "description": "Indicates the comments entered on the alarm.",
          "properties": {
            "userId": {
              "type": "string",
              "description": "Indicates the user commenting the alarm."
            },
            "systemId": {
              "type": "string",
              "description": "Indicates the system identifier on which the client set the comment."
            },
            "time": {
              "type": "string",
              "format": "date-time",
              "description": "Indicates the time commenting the alarm"
            },
            "comment": {
              "type": "string",
              "description": "Indicates the text of the comment."
            }
          }
        }
      }
    }
  ],
  "CommentAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CommentAlarms.schema.json",
      "title": "CommentAlarms",
      "definitions": {
        "CommentAlarms": {
          "$id": "#CommentAlarms",
          "description": "Task resource for comment alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "comment": {
              "$ref": "../Common/Comment.schema.json#Comment"
            },
            "alarmPattern": {
              "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm.",
              "type": "array",
              "items": {
                "$ref": "../Resource/Alarm.schema.json#Alarm"
              }
            },
            "commentedAlarm": {
              "description": "The successfully commented alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "CommonComponents": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CommonComponents.json",
      "title": "CommonComponents",
      "description": "Highly reusable schema fragments for use in TMForum Open-APIs",
      "definitions": {
        "polymorphicPattern": {
          "$id": "#polymorphicPattern",
          "type": "object",
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "format": "uri",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "examples": [
                "http://host/schemas/Subclass.schema.json"
              ]
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class",
              "examples": [
                "Place",
                "ServiceSpecification"
              ]
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name",
              "examples": [
                "VendorProductOffering",
                "DroneServiceSpecification"
              ]
            }
          },
          "dependencies": {
            "@schemaLocation": [
              "@baseType",
              "@type"
            ]
          }
        }
      }
    }
  ],
  "CommunicationMessage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CommunicationMessage.schema.json",
      "title": "CommunicationMessage",
      "definitions": {
        "CommunicationMessage": {
          "$id": "#CommunicationMessage",
          "description": "Communication message means a notification approach in the format of a message which can be dispatched (sent) to the certain user by the system with the content which can be felt and understood by the recipient. The user can be either a final customer or a customer service agent. The message can reach the customer in different interaction channels, including: email, short message, mobile app notification (push).",
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "The content of the communication message"
            },
            "description": {
              "type": "string",
              "description": "Description for the whole object"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the Communication Message"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of Communication Message"
            },
            "logFlag": {
              "type": "boolean"
            },
            "priority": {
              "type": "string",
              "description": "The priority of the communication message.\nSmall number means higher priority."
            },
            "scheduledSendTime": {
              "type": "string",
              "format": "date-time",
              "description": "The scheduled time for sending the communication message"
            },
            "sendTime": {
              "type": "string",
              "format": "date-time",
              "description": "The time of sending communication message"
            },
            "sendTimeComplete": {
              "type": "string",
              "format": "date-time",
              "description": "The time of completion of sending communication message"
            },
            "state": {
              "$ref": "../Common/CommunicationMessageStateType.schema.json#CommunicationMessageStateType",
              "description": "Status of communication message"
            },
            "subject": {
              "type": "string",
              "description": "The title of the message, necessary for the email and mobile app push"
            },
            "tryTimes": {
              "type": "integer",
              "description": "How many times do you want to retry the delivery of this message?"
            },
            "messageType": {
              "type": "string",
              "description": "The type of message, such as: SMS, Email, Mobile app push notification"
            },
            "attachment": {
              "type": "array",
              "description": "Any attachment associated with this message",
              "items": {
                "$ref": "../Common/Attachment.schema.json#Attachment"
              }
            },
            "receiver": {
              "type": "array",
              "description": "The receiver(s) of this message",
              "items": {
                "$ref": "../Common/Receiver.schema.json#Receiver"
              }
            },
            "sender": {
              "$ref": "../Common/Sender.schema.json#Sender",
              "description": "The sender of this message"
            },
            "characteristic": {
              "type": "array",
              "description": "Any additional characteristic(s) of this message",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CommunicationMessageStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CommunicationMessageStateType.schema.json",
      "title": "CommunicationMessageStateType",
      "definitions": {
        "CommunicationMessageStateType": {
          "$id": "#CommunicationMessageStateType",
          "description": "Communication message state type",
          "type": "string",
          "enum": [
            "initial",
            "inProgress",
            "completed",
            "cancelled",
            "failed"
          ]
        }
      }
    }
  ],
  "CommunicationRequestCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CommunicationRequestCharacteristic.schema.json",
      "title": "CommunicationRequestCharacteristic",
      "definitions": {
        "CommunicationRequestCharacteristic": {
          "$id": "#CommunicationRequestCharacteristic",
          "description": "The values of parameters which are used in the content if the content contains them.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Content parameter identifier"
            },
            "value": {
              "type": "string",
              "description": "Content parameter value"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CompressionEnumType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CompressionEnumType.schema.json",
      "title": "CompressionEnumType",
      "definitions": {
        "CompressionEnumType": {
          "$id": "CompressionEnumType",
          "description": "Enumeration of supported compressions. All extensions allowed.",
          "type": "string",
          "enum": [
            "no_compression",
            "gzip",
            "vendor_ext",
            "minor_ext"
          ]
        }
      }
    }
  ],
  "CompressionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CompressionType.schema.json",
      "title": "CompressionType",
      "definitions": {
        "CompressionType": {
          "$id": "CompressionType",
          "description": "File compression type.",
          "type": "object",
          "properties": {
            "compressionEnumType": {
              "$ref": "CompressionEnumType.schema.json#/definitions/CompressionEnumType"
            }
          }
        }
      }
    }
  ],
  "ConcreteEnvironmentMetaModel": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConcreteEnvironmentMetaModel.schema.json",
      "title": "ConcreteEnvironmentMetaModel",
      "definitions": {
        "ConcreteEnvironmentMetaModel": {
          "$id": "#ConcreteEnvironmentMetaModel",
          "type": "object",
          "description": "A managed concrete environment resource metamodel resource",
          "required": [
            "concreteEnvironmentMetaModelDefinition"
          ],
          "properties": {
            "concreteEnvironmentMetaModelDefinition": {
              "$ref": "../Common/ConcreteEnvironmentMetaModelDefinition.schema.json#ConcreteEnvironmentMetaModelDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "ConcreteEnvironmentMetaModelDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConcreteEnvironmentMetaModelDefinition.schema.json",
      "title": "ConcreteEnvironmentMetaModelDefinition",
      "definitions": {
        "ConcreteEnvironmentMetaModelDefinition": {
          "$id": "#ConcreteEnvironmentMetaModelDefinition",
          "type": "object",
          "description": "Test environment metamodel definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "ConcreteEnvironmentMetaModelRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConcreteEnvironmentMetaModelRef.schema.json",
      "title": "ConcreteEnvironmentMetaModelRef",
      "definitions": {
        "ConcreteEnvironmentMetaModelRef": {
          "$id": "#ConcreteEnvironmentMetaModelRef",
          "type": "object",
          "description": "A reference to a managed concrete environtment resource metamodel resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ConcreteResource": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConcreteResource.schema.json",
      "title": "ConcreteResource",
      "definitions": {
        "ConcreteResource": {
          "$id": "#ConcreteResource",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Concrete resource name",
              "example": "iPhone_1289"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ConcreteResourceMapping": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConcreteResourceMapping.schema.json",
      "title": "ConcreteResourceMapping",
      "definitions": {
        "ConcreteResourceMapping": {
          "$id": "#ConcreteResourceMapping",
          "type": "object",
          "description": "Individual mapping from an abstract resource to a list of concrete resources",
          "properties": {
            "abstractResource": {
              "type": "string",
              "example": "phone"
            },
            "concreteResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ConcreteResource.schema.json#ConcreteResource"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Configuration": [
    {
      "$schema": "http://json-schema.org/schema#",
      "$id": "Configuration.schema.json",
      "title": "Configuration",
      "description": "An apparatus (hardware + software + firmware) intended to accomplish a particular task (sensing the environment, actuating, etc.).",
      "definitions": {
        "Configuration": {
          "$id": "#Configuration",
          "description": "#TODO",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Connection": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Connection.schema.json",
      "title": "Connection",
      "definitions": {
        "Connection": {
          "$id": "#Connection",
          "description": "An edge in a resource graph.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier for graph edge.",
              "type": "string"
            },
            "name": {
              "description": "Descriptive name for graph edge.",
              "type": "string"
            },
            "associationType": {
              "description": "Association type.",
              "type": "string",
              "enum": [
                "pointtoPoint",
                "pointtoMultipoint"
              ]
            },
            "endpoint": {
              "description": "Resource graph vertices connected by this edge.",
              "type": "array",
              "items": {
                "$ref": "EndpointRef.schema.json#/definitions/EndpointRef"
              },
              "minItems": 2
            }
          },
          "required": [
            "associationType",
            "endpoint"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ConnectionPointRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConnectionPointRef.schema.json",
      "title": "ConnectionPointRef",
      "definitions": {
        "ConnectionPointRef": {
          "$id": "#ConnectionPointRef",
          "description": "Connection point reference. A connection point provides a service access point (SAP) for input and/or output of the resource function.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Connection point version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ConnectionPointSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConnectionPointSpecificationRef.schema.json",
      "title": "ConnectionPointSpecificationRef",
      "definitions": {
        "ConnectionPointSpecificationRef": {
          "$id": "#ConnectionPointSpecificationRef",
          "description": "Connection point specification reference. A connection point provides a service access point (SAP) for input and/or output of the resource function.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Connection point specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ConnectionSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConnectionSpecification.schema.json",
      "title": "ConnectionSpecification",
      "definitions": {
        "ConnectionSpecification": {
          "$id": "#ConnectionSpecification",
          "description": "A specification for an edge in a resource graph.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier for graph edge specification.",
              "type": "string"
            },
            "name": {
              "description": "Descriptive name for graph edge specification.",
              "type": "string"
            },
            "associationType": {
              "description": "Association type.",
              "type": "string",
              "enum": [
                "pointtoPoint",
                "pointtoMultipoint"
              ]
            },
            "endpointSpecification": {
              "description": "Specifications for resource graph vertices connected by this edge.",
              "type": "array",
              "items": {
                "$ref": "EndpointSpecificationRef.schema.json#/definitions/EndpointSpecificationRef"
              }
            }
          },
          "required": [
            "associationType",
            "endpointSpecification"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Consequence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Consequence.schema.json",
      "title": "Consequence",
      "definitions": {
        "Consequence": {
          "type": "object",
          "description": "A threshold crossing or a threshold ceased to be crossing results in a Performance consequence.",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of a Consequence"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which a Consequence is known and distinguished from other measurements"
            },
            "prescribedAction": {
              "type": "string",
              "description": "The suggested action"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ConstraintRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConstraintRef.schema.json",
      "title": "ConstraintRef",
      "definitions": {
        "ConstraintRef": {
          "$id": "#ConstraintRef",
          "type": "object",
          "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
          "properties": {
            "version": {
              "type": "string",
              "description": "constraint version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ConsumptionSummary": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ConsumptionSummary.schema.json",
      "title": "ConsumptionSummary",
      "definitions": {
        "ConsumptionSummary": {
          "$id": "#ConsumptionSummary",
          "type": "object",
          "description": "The consumption counters (called ConsumptionSummary in the SID model) detail for example the different kind of consumption done on the bucket.",
          "properties": {
            "consumptionPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Consumption counter period between a start date time and an end date time. For prepaid bucket, the period of counters is between the start date of the bucket and the effective date of the usage consumption report generation. For postpaid bucket, the period of counters is between the last bill date and the effective date of the usage consumption report generation."
            },
            "counterType": {
              "type": "string",
              "description": "Type of the consumption counter. We can give for example a counter of the used value for a bucket (counterType=used for example) or the value of the consumption done out of the bucket(s) (counterType=outOfBucket for example)"
            },
            "level": {
              "type": "string",
              "description": "Counter level. The counter can be given globally for the bucket or detailed by user or by network product for example in case of shared bucket"
            },
            "user": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "Reference of the user for which the consumption counter is detailed. If the level of the counter is global (i.e. concerning all the users), the list of them is not specified. It can be found through the users listed in the network products of the bucket sub-resource"
            },
            "value": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Numeric value of the bucket counter in a given unit"
            },
            "valueName": {
              "type": "string",
              "description": "Value of the counter in a formatted string used for display needs for example"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Contact": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Contact.schema.json",
      "title": "Contact",
      "definitions": {
        "Contact": {
          "$id": "#Contact",
          "description": "An individual or an organization used as a contact point for a given account and accessed via some contact medium.",
          "type": "object",
          "required": [
            "contactType"
          ],
          "properties": {
            "contactName": {
              "type": "string",
              "description": "A displayable name for that contact"
            },
            "contactType": {
              "type": "string",
              "description": "Type of contact (primary, secondary...)"
            },
            "partyRoleType": {
              "type": "string",
              "description": "Identifies what kind of party role type is linked to the contact (a account manager...)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity period of that contact"
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ContactMedium": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ContactMedium.schema.json",
      "title": "ContactMedium",
      "definitions": {
        "ContactMedium": {
          "$id": "#ContactMedium",
          "description": "Indicates the contact medium that could be used to contact the party.",
          "type": "object",
          "properties": {
            "preferred": {
              "type": "boolean",
              "description": "If true, indicates that is the preferred contact medium"
            },
            "mediumType": {
              "type": "string",
              "description": "Type of the contact medium, such as: email address, telephone number, postal address"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the contact medium is valid for"
            },
            "characteristic": {
              "$ref": "../Common/MediumCharacteristic.schema.json#MediumCharacteristic",
              "description": "Any additional characteristic(s) of this contact medium"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ContainedItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ContainedItemRef.schema.json",
      "title": "ContainedItemRef",
      "definitions": {
        "ContainedItemRef": {
          "$id": "#ContainedItemRef",
          "description": "Describes a specific item contained in a parent element",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "entityHref": {
              "type": "string",
              "description": "Hypertext Reference of the parent element."
            },
            "entityId": {
              "type": "string",
              "description": "Unique identifier of the parent element."
            },
            "ItemId": {
              "type": "string",
              "description": "Unique identifier of the considered item."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ContentType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ContentType.schema.json",
      "title": "ContentType",
      "definitions": {
        "ContentType": {
          "$id": "#ContentType",
          "type": "object",
          "description": "Base64 content structure.",
          "properties": {
            "type": {
              "type": "string",
              "description": "Content type."
            },
            "contentEncoding": {
              "type": "string",
              "format": "byte",
              "description": "Base64 encoded content."
            },
            "description": {
              "type": "string",
              "description": "Content description."
            }
          },
          "required": [
            "contentEncoding"
          ]
        }
      }
    }
  ],
  "CorrelatedAlarm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CorrelatedAlarm.schema.json",
      "title": "CorrelatedAlarm",
      "definitions": {
        "CorrelatedAlarm": {
          "$id": "#CorrelatedAlarm",
          "description": "Indicates the alarms attached to this alarm as correlated alarms from a correlation point of view. An alarm can be correlated to one or more underlying alarms. There might be multiple levels of alarm correlation and an underlying alarm in one relation can be itself a parent alarm for other underlying alarms.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "href": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "CounterType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CounterType.schema.json",
      "title": "CounterType",
      "definitions": {
        "CounterType": {
          "$id": "#CounterType",
          "type": "string",
          "description": "Valid values for this type",
          "enum": [
            "balanceTransfer",
            "balanceAdjust",
            "outOfBucket",
            "balanceUsage"
          ]
        }
      }
    }
  ],
  "Credential": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Credential.schema.json",
      "title": "Credential",
      "definitions": {
        "Credential": {
          "$id": "#Credential",
          "description": "Credential is a class that allow to describe an authentification method.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "an identifier for a credential/authentification method for this digital identity"
            },
            "state": {
              "type": "string",
              "description": "Used to indicate the current lifecycle state of this credential (like active, inactive, expired)."
            },
            "trustLevel": {
              "type": "string",
              "description": "A level of assurance associated with this credential - this could be used to limit/allow specific permission based on this trust level."
            },
            "contactMedium": {
              "type": "array",
              "description": "List of contact medium associated with this credential/authentification method.",
              "items": {
                "$ref": "../Common/DigitalIdentityContactMedium.schema.json#/definitions/DigitalIdentityContactMedium"
              }
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this digial identity is valid."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CreditProfile": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CreditProfile.schema.json",
      "title": "CreditProfile",
      "definitions": {
        "CreditProfile": {
          "$id": "#CreditProfile",
          "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
          "type": "object",
          "properties": {
            "creditProfileDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date the profile was established"
            },
            "creditRiskRating": {
              "type": "integer",
              "description": "This is an integer whose value is used to rate the risk"
            },
            "creditScore": {
              "type": "integer",
              "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the profile is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CrossedThresholdInformation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CrossedThresholdInformation.schema.json",
      "title": "CrossedThresholdInformation",
      "definitions": {
        "CrossedThresholdInformation": {
          "$id": "#CrossedThresholdInformation",
          "type": "object",
          "description": "Identifies the details of the threshold that has been crossed.",
          "properties": {
            "threshold": {
              "$ref": "../Resource/ThresholdRef.schema.json#ThresholdRef"
            },
            "direction": {
              "type": "string",
              "description": "Indicates the threshold crossing direction: up or down."
            },
            "granularity": {
              "type": "string",
              "description": "Indicates the granularity at which the indicator is evaluated for threshold crossing"
            },
            "indicatorName": {
              "type": "string",
              "description": "Indicates the name of indicator which crossed the threshold."
            },
            "indicatorUnit": {
              "type": "string",
              "description": "Indicates the unit of the measurement of the indicator corresponding to the threshold that has been crossed."
            },
            "observedValue": {
              "type": "string",
              "description": "Indicates the value of the indicator which crossed the threshold."
            },
            "thresholdCrossingDescription": {
              "type": "string",
              "description": "Indicates further information on the threshold crossing alarm."
            }
          }
        }
      }
    }
  ],
  "CrowdFlowObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Transportation/CrowdFlowObserved/schema.json",
      "title": "FIWARE - SynchroniCity - Transportation / CrowdFlowObserved",
      "description": "CrowdFlowObserved",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "CrowdFlowObserved"
              ],
              "description": "NGSI Entity type"
            },
            "refRoadSegment": {
              "type": "string",
              "format": "uri"
            },
            "dateObserved": {
              "type": "string"
            },
            "dateObservedFrom": {
              "type": "string",
              "format": "date-time"
            },
            "dateObservedTo": {
              "type": "string",
              "format": "date-time"
            },
            "peopleCount": {
              "type": "integer",
              "minimum": 0
            },
            "occupancy": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "averageCrowdSpeed": {
              "type": "number",
              "minimum": 0
            },
            "congested": {
              "type": "boolean"
            },
            "averageHeadwayTime": {
              "type": "number",
              "minimum": 0
            },
            "direction": {
              "type": "string",
              "enum": [
                "inbound",
                "outbound"
              ]
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved"
      ],
      "anyOf": [
        {
          "required": [
            "refRoadSegment"
          ]
        },
        {
          "required": [
            "location"
          ]
        },
        {
          "required": [
            "address"
          ]
        }
      ]
    }
  ],
  "Customer": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer.schema.json",
      "title": "Customer",
      "definitions": {
        "Customer": {
          "$id": "#Customer",
          "type": "object",
          "required": [
            "engagedParty"
          ],
          "properties": {
            "href": {
              "type": "string",
              "description": "Url used to reference the customer."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for Customers"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
            },
            "status": {
              "type": "string",
              "description": "Used to track the lifecycle status of the customer."
            },
            "statusReason": {
              "type": "string",
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the Customer is valid for."
            },
            "engagedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party - an organization or an individual - that is engaged as a customer."
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Describes the characteristic of a customer."
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CreditProfile.schema.json#CreditProfile"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360.schema.json",
      "title": "Customer360",
      "definitions": {
        "Customer360": {
          "$id": "#Customer",
          "type": "object",
          "properties": {
            "href": {
              "description": "Url used to reference the customer.",
              "type": "string"
            },
            "customer": {
              "type": "object",
              "$ref": "../Customer360/Customer360CustomerVO.schema.json#Customer360CustomerVO"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360AccountVO.schema.json#Customer360AccountVO"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360AgreementVO.schema.json#Customer360AgreementVO"
              }
            },
            "appointment": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360AppointmentVO.schema.json#Customer360AppointmentVO"
              }
            },
            "customerBill": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360CustomerBillVO.schema.json#Customer360CustomerBillVO"
              }
            },
            "loyaltyBalance": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360LoyaltyBalanceVO.schema.json#Customer360LoyaltyBalanceVO"
              }
            },
            "interactionItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360InteractionItemVO.schema.json#Customer360InteractionItemVO"
              }
            },
            "productValue": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360ProductValueVO.schema.json#Customer360ProductValueVO"
              }
            },
            "promotion": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360PromotionVO.schema.json#Customer360PromotionVO"
              }
            },
            "productOrder": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360ProductOrderVO.schema.json#Customer360ProductOrderVO"
              }
            },
            "quote": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360QuoteVO.schema.json#Customer360QuoteVO"
              }
            },
            "serviceProblem": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360ServiceProblemVO.schema.json#Customer360ServiceProblemVO"
              }
            },
            "troubleTicket": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360TroubleTicketVO.schema.json#Customer360TroubleTicketVO"
              }
            },
            "usageSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Customer360/Customer360UsageSpecificationVO.schema.json#Customer360UsageSpecificationVO"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/Customer.schema.json#Customer"
            }
          ]
        }
      }
    }
  ],
  "Customer360AccountVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360AccountVO.schema.json",
      "title": "Customer360AccountVO",
      "definitions": {
        "Customer360AccountVO": {
          "$id": "#Customer360AccountVO",
          "description": "Generic Account structure used to define commonalities between sub concepts of PartyAccount and Financial Account.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "creditLimit": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "The maximum amount of money that may be charged on an account"
            },
            "description": {
              "type": "string",
              "description": "Detailed description of the party account"
            },
            "href": {
              "type": "string",
              "description": "Unique reference of the account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the account"
            },
            "lastModified": {
              "type": "string",
              "format": "date-time",
              "description": "Date of last modification of the account"
            },
            "name": {
              "type": "string",
              "description": "Name of the account"
            },
            "state": {
              "type": "string",
              "description": "Contains the lifecycle state such as: Active, Closed, Suspended and so on."
            },
            "accountType": {
              "type": "string",
              "description": "A categorization of an account, such as individual, joint, and so forth, whose instances share some of the same characteristics. Note: for flexibility we use a String here but an implementation may use an enumeration with a limited list of valid values."
            },
            "accountRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRelationship.schema.json#AccountRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360AgreementVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360AgreementVO.schema.json",
      "title": "Customer360AgreementVO",
      "definitions": {
        "Customer360AgreementVO": {
          "$id": "#Customer360AgreementVO",
          "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
          "type": "object",
          "required": [
            "name",
            "agreementType",
            "engagedParty",
            "agreementItem"
          ],
          "properties": {
            "agreementPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period during which the Agreement is in effect."
            },
            "completionDate": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date at which the agreement is completed"
            },
            "description": {
              "type": "string",
              "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
            },
            "documentNumber": {
              "type": "integer",
              "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
            },
            "href": {
              "type": "string",
              "description": "Unique url identifying the agreement as a resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the agreement"
            },
            "initialDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the agreement was initialized"
            },
            "name": {
              "type": "string",
              "description": "A human-readable name for the agreement"
            },
            "statementOfIntent": {
              "type": "string",
              "description": "An overview and goals of the Agreement"
            },
            "status": {
              "type": "string",
              "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
            },
            "agreementType": {
              "type": "string",
              "description": "The type of the agreement. For example commercial"
            },
            "version": {
              "type": "string",
              "description": "A string identifying the version of the agreement"
            },
            "agreementSpecification": {
              "$ref": "../EngagedParty/AgreementSpecificationRef.schema.json#AgreementSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360AppointmentVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360AppointmentVO.schema.json",
      "title": "Customer360AppointmentVO",
      "definitions": {
        "Customer360AppointmentVO": {
          "$id": "#Customer360AppointmentVO",
          "description": "An Appointment is an arrangement to do something or meet someone at a particular time, at a place (for face to face appointment) or in a contact medium (for phone appointment).",
          "type": "object",
          "properties": {
            "calendarEvent": {
              "$ref": "../Common/CalendarEventRef.schema.json#CalendarEventRef",
              "description": "A calendar event reference (CalendarEventRef). The appointment is associated with a calendar event (an happening at a point of time) associated to a calendar entry."
            },
            "category": {
              "description": "Business category : intervention for example or to be more precise after SalesIntervention, orderDeliveryIntervention,...",
              "type": "string"
            },
            "creationDate": {
              "description": "Appointment creation date",
              "type": "string",
              "format": "date-time"
            },
            "description": {
              "description": "Short free text describing the appointment",
              "type": "string"
            },
            "externalId": {
              "description": "External reference known by the customer",
              "type": "string"
            },
            "href": {
              "description": "Unique URI used to access to the appointment resource",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the appointment",
              "type": "string"
            },
            "lastUpdate": {
              "description": "Date of last appointment update",
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "$ref": "../Customer/AppointmentStateType.schema.json#AppointmentStateType"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A time period (TimePeriod). Appointment beginning date time and end date time."
            }
          },
          "required": [
            "validFor"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360CustomerBillVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360CustomerBillVO.schema.json",
      "title": "Customer360CustomerBillVO",
      "definitions": {
        "Customer360CustomerBillVO": {
          "$id": "#Customer360CustomerBillVO",
          "type": "object",
          "description": "The customer bill. Can be a regular recurring bill or an extra bill on demand by the customer or the csp.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Explanation: Unique identifier of he bill"
            },
            "href": {
              "type": "string",
              "description": "Bill unique reference"
            },
            "amountDue": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "billDate": {
              "type": "string",
              "format": "date-time",
              "description": "Bill date, external customer view (in consequence: different to the production date of the bill)"
            },
            "billNo": {
              "type": "string",
              "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id"
            },
            "billingPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "billCycle": {
              "$ref": "../Customer/BillCycleRef.schema.json#BillCycleRef"
            },
            "category": {
              "type": "string",
              "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note for example"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of bill last update"
            },
            "nextBillDate": {
              "type": "string",
              "format": "date-time",
              "description": "). Approximate date of  the next bill production given for information (only used/meaningful for on cycle / regular bills)"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the amount due should have been paid"
            },
            "paymentMethod": {
              "description": "paymentMethod here is recognized to be not really necessary in a STANDARD. It could be obtained by a GET request on the billing account. Conclusion: paymentMethod is marked to DEPRECIATED and will be removed in one of the next versions.",
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "remainingAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "runType": {
              "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)",
              "$ref": "../Customer/CustomerBillRunType.schema.json#CustomerBillRunType"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "state": {
              "description": "Status of the bill",
              "$ref": "../Customer/CustomerBillStateType.schema.json#CustomerBillStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360CustomerVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360CustomerVO.schema.json",
      "title": "Customer360CustomerVO",
      "definitions": {
        "Customer360CustomerVO": {
          "$id": "#Customer360CustomerVO",
          "type": "object",
          "required": [
            "engagedParty"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers."
            },
            "status": {
              "type": "string",
              "description": "Used to track the lifecycle status of the customer."
            },
            "statusReason": {
              "type": "string",
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the Customer is valid for."
            },
            "engagedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party - an organization or an individual - that is engaged as a customer."
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Describes the characteristic of a customer."
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CreditProfile.schema.json#CreditProfile"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360InteractionItemVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360InteractionItemVO.schema.json",
      "title": "Customer360InteractionItemVO",
      "definitions": {
        "Customer360InteractionItemVO": {
          "$id": "#Customer360InteractionItemVO",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the interaction item"
            },
            "itemDate": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Moment this item is referred"
            },
            "reason": {
              "type": "string",
              "description": "Reason why this item is referred"
            },
            "resolution": {
              "type": "string",
              "description": "Resolution of the interaction item"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the interaction item is created in the system"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360LoyaltyBalanceVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360LoyaltyBalanceVO.schema.json",
      "title": "Customer360LoyaltyBalanceVO",
      "definitions": {
        "Customer360LoyaltyBalanceVO": {
          "$id": "#Customer360LoyaltyBalanceVO",
          "description": "A loyalty balance, containing a balance unit and value.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty balance."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty member’s loyalty balance."
            },
            "quantity": {
              "type": "object",
              "description": "Unit and value of the balance.",
              "$ref": "../Common/Money.schema.json#Money"
            },
            "loyaltyProgramMember": {
              "type": "object",
              "description": "Reference to the loyaltyProgramMember to whom the loyaltyAccount belongs.",
              "$ref": "../Product/LoyaltyProgramMemberRef.schema.json#LoyaltyProgramMemberRef"
            },
            "validFor": {
              "type": "object",
              "description": "The validity period in which loyalty can be burned using the account.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          }
        }
      }
    }
  ],
  "Customer360ProductOrderVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360ProductOrderVO.schema.json",
      "title": "Customer360ProductOrderVO",
      "definitions": {
        "Customer360ProductOrderVO": {
          "type": "object",
          "$id": "#Customer360ProductOrderVO",
          "description": "A Product Order is a type of order which  can  be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa,",
          "properties": {
            "cancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled. This is used when order is cancelled. "
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled. This is used when order is cancelled. "
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. \"enterprise\", \"residential\", ...)"
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was completed"
            },
            "description": {
              "type": "string",
              "description": "Description of the product order"
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expected delivery date amended by the provider"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the order"
            },
            "id": {
              "type": "string",
              "description": "ID created on repository side (OM system)"
            },
            "notificationContact": {
              "type": "string",
              "description": "Contact attached to the order to send back information regarding this order"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was created"
            },
            "priority": {
              "type": "string",
              "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
            },
            "requestedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Requested delivery date from the requestor perspective"
            },
            "requestedStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date. "
            },
            "state": {
              "$ref": "../Customer/ProductOrderStateType.schema.json#ProductOrderStateType",
              "description": "Tracks the lifecycle status of the product order, such as Acknowledged, Rejected, InProgress, Pending and so on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360ProductValueVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360ProductValueVO.schema.json",
      "title": "Customer360ProductValueVO",
      "definitions": {
        "Customer360ProductValueVO": {
          "$id": "#Customer360ProductValueVO",
          "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
          "type": "object",
          "properties": {
            "randomAtt": {
              "type": "string"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "description": {
              "description": "Is the description of the product. It could be copied from the description of the Product Offering.",
              "type": "string"
            },
            "href": {
              "description": "Reference of the product",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the product",
              "type": "string"
            },
            "isBundle": {
              "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering.",
              "type": "boolean"
            },
            "isCustomerVisible": {
              "description": "If true, the product is visible by the customer.",
              "type": "boolean"
            },
            "name": {
              "description": "Name of the product. It could be the same as the name of the product offering",
              "type": "string"
            },
            "orderDate": {
              "description": "Is the date when the product was ordered",
              "type": "string",
              "format": "date-time"
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "product": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
              }
            },
            "productSerialNumber": {
              "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.",
              "type": "string"
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "startDate": {
              "description": "Is the date from which the product starts",
              "type": "string",
              "format": "date-time"
            },
            "status": {
              "$ref": "../Product/ProductStatusType.schema.json#ProductStatusType",
              "description": "Is the lifecycle status of the product."
            },
            "terminationDate": {
              "description": "Is the date when the product was terminated",
              "type": "string",
              "format": "date-time"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360PromotionVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360PromotionVO.schema.json",
      "title": "Customer360PromotionVO",
      "definitions": {
        "Customer360PromotionVO": {
          "$id": "#Customer360PromotionVO",
          "type": "object",
          "description": "Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.   Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "description": {
              "type": "string",
              "description": "Description of Promotion"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the promotion."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of Promotion."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Latest update date of Promotion"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Status of Promotion, including draft/Test/WaitForApproval/Release/Suspend/Retirement."
            },
            "name": {
              "type": "string",
              "description": "Name of Promotion."
            },
            "type": {
              "type": "string",
              "description": "Type of promotion.The basic type is Award/Discount/Reduction. More types can be extended in future."
            },
            "validFor": {
              "description": "The period for which the promotion is valid.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "required": [
            "name"
          ]
        }
      }
    }
  ],
  "Customer360QuoteVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360QuoteVO.schema.json",
      "title": "Customer360QuoteVO",
      "definitions": {
        "Customer360QuoteVO": {
          "$id": "#Customer360QuoteVO",
          "type": "object",
          "required": [
            "quoteItem"
          ],
          "description": "Quote can be used to negotiate service and product acquisition or modification between a customer and a service provider. Quote contain list of quote items, a reference to customer (partyRole), a list of productOffering and attached prices and conditions.",
          "properties": {
            "category": {
              "type": "string",
              "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. \"enterprise\", \"residential\", ...)"
            },
            "description": {
              "type": "string",
              "description": "Description of the quote"
            },
            "effectiveQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the quote has been completed"
            },
            "expectedFulfillmentStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "this is the date wished by the requester to have the requested quote item delivered"
            },
            "expectedQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "This is expected date - from quote supplier - to be able to send back  a response for this quote"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the quote"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier - attributed by quoting system"
            },
            "instantSyncQuote": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get quoting result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201. "
            },
            "quoteDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the quote was created"
            },
            "requestedQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "This is requested date - from quote requester - to get a complete response for this quote"
            },
            "state": {
              "$ref": "../Product/QuoteStateType.schema.json#QuoteStateType",
              "description": "State of the quote : described in the state-machine diagram"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Quote validity period"
            },
            "version": {
              "type": "string",
              "description": "Quote version - if the customer rejected the quote but  negotiations still open a new version of the quote is managed"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360ServiceProblemVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360ServiceProblemVO.schema.json",
      "title": "Customer360ServiceProblemVO",
      "definitions": {
        "Customer360ServiceProblemVO": {
          "$id": "#Customer360ServiceProblemVO",
          "type": "object",
          "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B",
          "properties": {
            "affectedLocation": {
              "type": "array",
              "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.",
              "items": {
                "$ref": "../Common/Place.schema.json#Place"
              }
            },
            "affectedNumberOfServices": {
              "type": "integer",
              "description": "Number of affected services"
            },
            "affectedService": {
              "type": "array",
              "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present.",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "category": {
              "type": "string",
              "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
            },
            "correlationId": {
              "type": "string",
              "description": "Additional identifier coming from an external system"
            },
            "description": {
              "type": "string",
              "description": "Free form text describing the Service Problem"
            },
            "extensionInfo": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
            },
            "href": {
              "type": "string",
              "description": "Reference to the Service Problem"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the service problem"
            },
            "impactImportanceFactor": {
              "type": "string",
              "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
            },
            "originatingSystem": {
              "type": "string",
              "description": "Indicates where the problem was generated"
            },
            "priority": {
              "type": "integer",
              "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
            },
            "problemEscalation": {
              "type": "string",
              "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
            },
            "reason": {
              "type": "string",
              "description": "Free text or optionally structured text. It can be Unknown."
            },
            "relatedObject": {
              "type": "array",
              "description": "List of objects associated to this problem",
              "items": {
                "$ref": "../Common/RelatedEntityRef.schema.json#RelatedEntityRef"
              }
            },
            "responsibleParty": {
              "description": "Individual or organization responsible for handling this problem",
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "relatedParty": {
              "type": "array",
              "description": "List of parties or party roles playing a role within the service problem",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "rootCauseResource": {
              "type": "array",
              "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable).",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#ResourceRef"
              }
            },
            "resolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was resolved"
            },
            "status": {
              "type": "string",
              "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was last status changed"
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason of state change"
            },
            "timeChanged": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was last changed"
            },
            "timeRaised": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was raised"
            },
            "underlyingProblem": {
              "type": "array",
              "description": "A list of underlying problems. Relevant only if this problem is derived from other problems.",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360TroubleTicketVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360TroubleTicketVO.schema.json",
      "title": "Customer360TroubleTicketVO",
      "definitions": {
        "Customer360TroubleTicketVO": {
          "$id": "#Customer360TroubleTicketVO",
          "type": "object",
          "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system",
          "properties": {
            "channel": {
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef",
              "description": "The channel that origin the trouble ticket"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the trouble ticket was created"
            },
            "description": {
              "type": "string",
              "description": "Description of the trouble or issue"
            },
            "expectedResolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The expected resolution date determined by the trouble ticket system"
            },
            "externalId": {
              "type": "string",
              "description": "Additional identifier coming from an external system"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink, a reference to the trouble ticket entity"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the trouble ticket"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time that the trouble ticked was last updated"
            },
            "name": {
              "type": "string",
              "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
            },
            "priority": {
              "type": "string",
              "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
            },
            "requestedResolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The resolution date requested by the user"
            },
            "resolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the trouble ticket was resolved"
            },
            "severity": {
              "type": "string",
              "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
            },
            "status": {
              "$ref": "../Common/TroubleTicketStatusType.schema.json#TroubleTicketStatusType",
              "description": "The current status of the trouble ticket"
            },
            "statusChange": {
              "type": "array",
              "items": {
                "$ref": "../Common/StatusChange.schema.json#StatusChange"
              },
              "description": "The status change history that are associated to the ticket.Populated by the server"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the status changed."
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason for changing the status"
            },
            "ticketType": {
              "type": "string",
              "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Customer360UsageSpecificationVO": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Customer360UsageSpecificationVO.schema.json",
      "title": "Customer360UsageSpecificationVO",
      "definitions": {
        "Customer360UsageSpecificationVO": {
          "$id": "#Customer360UsageSpecificationVO",
          "description": "A detailed description of a usage event that are of interest to the business and can have charges applied to it. It is comprised of characteristics, which define all attributes known for a particular type of usage.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the usage specification is"
            },
            "href": {
              "type": "string",
              "description": "Reference of usage specification"
            },
            "id": {
              "type": "string",
              "description": "Usage specification unique identifier"
            },
            "name": {
              "type": "string",
              "description": "The name of the usage specification."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the usage specification is valid"
            },
            "usageSpecCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Product/UsageSpecCharacteristic.schema.json#UsageSpecCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CustomerAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerAnalytics.schema.json",
      "title": "CustomerAnalytics",
      "definitions": {
        "CustomerAnalytics": {
          "$id": "#CustomerAnalytics",
          "type": "object",
          "properties": {
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CustomerBill": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBill.schema.json",
      "title": "CustomerBill",
      "definitions": {
        "CustomerBill": {
          "$id": "#CustomerBill",
          "type": "object",
          "description": "The customer bill. Can be a regular recurring bill or an extra bill on demand by the customer or the csp.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Explanation: Unique identifier of he bill"
            },
            "href": {
              "type": "string",
              "description": "Bill unique reference"
            },
            "amountDue": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "appliedPayment": {
              "description": "Applied payment is a payment associated with the bill. There may be a partial payment, then there should be several applied payments available. On the other hand, more than one bill could be payed by one payment. In general there is an n:m relation between payment and bill.",
              "type": "array",
              "items": {
                "$ref": "../Customer/AppliedPayment.schema.json#AppliedPayment"
              }
            },
            "billDate": {
              "type": "string",
              "format": "date-time",
              "description": "Bill date, external customer view (in consequence: different to the production date of the bill)"
            },
            "billDocument": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "billNo": {
              "type": "string",
              "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "billingPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "billCycle": {
              "$ref": "../Customer/BillCycleRef.schema.json#BillCycleRef"
            },
            "category": {
              "type": "string",
              "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note for example"
            },
            "financialAccount": {
              "$ref": "../EngagedParty/FinancialAccountRef.schema.json#FinancialAccountRef"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of bill last update"
            },
            "nextBillDate": {
              "type": "string",
              "format": "date-time",
              "description": "). Approximate date of  the next bill production given for information (only used/meaningful for on cycle / regular bills)"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the amount due should have been paid"
            },
            "paymentMethod": {
              "description": "paymentMethod here is recognized to be not really necessary in a STANDARD. It could be obtained by a GET request on the billing account. Conclusion: paymentMethod is marked to DEPRECIATED and will be removed in one of the next versions.",
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "remainingAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "runType": {
              "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)",
              "$ref": "../Customer/CustomerBillRunType.schema.json#CustomerBillRunType"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              }
            },
            "state": {
              "description": "Status of the bill",
              "$ref": "../Customer/CustomerBillStateType.schema.json#CustomerBillStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "CustomerBillOnDemand": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBillOnDemand.schema.json",
      "title": "CustomerBillOnDemand",
      "definitions": {
        "CustomerBillOnDemand": {
          "$id": "#CustomerBillOnDemand",
          "type": "object",
          "description": "This resource is used to manage the creation request of a customer bill in real-time (on demand).",
          "properties": {
            "id": {
              "type": "string",
              "description": "Explanation: Unique identifier of the customer bill on demand request given by the server"
            },
            "href": {
              "type": "string",
              "description": "Reference of the customer bill on demand request"
            },
            "name": {
              "type": "string",
              "description": "Friendly name to identify the customer bill on demand request"
            },
            "state": {
              "description": "State of the request to produce an off cycle bill: Possible values are: inProgress, rejected, done, terminatedWithError.",
              "$ref": "../Customer/CustomerBillOnDemandStateType.schema.json#CustomerBillOnDemandStateType"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "customerBill": {
              "$ref": "../Customer/CustomerBillRef.schema.json#CustomerBillRef"
            },
            "description": {
              "type": "string",
              "description": "Additional data describing the customer bill on demand request"
            },
            "lastUpdate": {
              "type": "string",
              "description": "The last date time when the customer bill on demand has been updated"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          }
        },
        "allOf": {
          "0": {
            "$ref": "../Common/Entity.schema.json#Entity"
          },
          "$id": "#allOf",
          "type": "object"
        }
      }
    }
  ],
  "CustomerBillOnDemandStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBillOnDemandStateType.schema.json",
      "title": "CustomerBillOnDemandStateType",
      "definitions": {
        "CustomerBillOnDemandStateType": {
          "$id": "#CustomerBillOnDemandStateType",
          "type": "string",
          "description": "Recommended Enumeration Type (not formal forced in standard): Valid values for 'CustomerBillOnDemand': 'inProgress', 'rejected', 'done', 'terminatedWithError'",
          "enum": [
            "inProgress",
            "rejected",
            "done",
            "terminatedWithError"
          ]
        }
      }
    }
  ],
  "CustomerBillRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBillRef.schema.json",
      "title": "CustomerBillRef",
      "definitions": {
        "CustomerBillRef": {
          "$id": "#CustomerBillRef",
          "type": "object",
          "description": "Bill reference.",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            },
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "CustomerBillRunType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBillRunType.schema.json",
      "title": "CustomerBillRunType",
      "definitions": {
        "CustomerBillRunType": {
          "$id": "#CustomerBillRunType",
          "type": "string",
          "description": "Recommended Enumeration Type (not formal forced in standard): Valid values for the runType of a bill. The bill could be produced in a regular bill cycle 'onCycle'. Otherwise the bill is produced on a request (e.g. customer request). This could be indicated by 'offCycle'",
          "enum": [
            "onCycle",
            "offCycle"
          ]
        }
      }
    }
  ],
  "CustomerBillStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerBillStateType.schema.json",
      "title": "CustomerBillStateType",
      "definitions": {
        "CustomerBillStateType": {
          "$id": "#CustomerBillStateType",
          "type": "string",
          "description": "Recommended Enumeration Type (not formal forced in standard): Valid values for the lifecycle state of the bill: new = 'bill is ready to validate or to sent', validated = 'bill is checked (manual / automatic)', sent = 'bill is sent with the channel defined in the billingaccount', settled = 'bill is payed', partiallySettled = 'bill is partially payed', onHold = 'bill will not be in further processing until open issues connected to the bill are solved'",
          "enum": [
            "new",
            "onHold",
            "validated",
            "sent",
            "settled",
            "partiallyPaid"
          ]
        }
      }
    }
  ],
  "CustomerHealthStatsAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerHealthStatsAnalytics.schema.json",
      "title": "CustomerHealthStatsAnalytics",
      "definitions": {
        "CustomerHealthStatsAnalytics": {
          "$id": "#CustomerHealthStatsAnalytics",
          "type": "object",
          "properties": {
            "dateOfBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "bodyWeightKg": {
              "type": "number",
              "format": "integer",
              "description": "the weight of people in kg"
            },
            "bodyHeightCm": {
              "type": "number",
              "format": "integer",
              "description": "the height of people in cm"
            },
            "weightHeightReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "bpReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "restingHeartRateBpm": {
              "type": "number",
              "format": "integer",
              "description": "Resting heart rate in beats per minute (BPM)"
            },
            "heartRateReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "bodyTemperatureCelsius": {
              "type": "number",
              "format": "integer",
              "description": "Body temperature in Celsius"
            },
            "bodyTempReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "bloodSugarReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "cholesterolReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "restingRespirationRateBpm": {
              "type": "number",
              "format": "integer",
              "description": "Number of breaths while resting in breaths per minute (BPM)"
            },
            "respirationReadingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when test or reading was taken"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "CustomerInteractionAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "CustomerInteractionAnalytics.schema.json",
      "title": "CustomerInteractionAnalytics",
      "definitions": {
        "CustomerInteractionAnalytics": {
          "$id": "#CustomerInteractionAnalytics",
          "type": "object",
          "properties": {
            "interactionStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Start time of interaction"
            },
            "interactionEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "End time of interaction"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "DLImplementation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DLImplementation.schema.json",
      "title": "DLImplementation",
      "definitions": {
        "DLImplementation": {
          "$id": "#DLImplementation",
          "description": "Provides the definition of a Distributed Ledger technology implemementation",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "href": {
              "type": "string",
              "description": "Unique reference of the Distributed Ledger implementation"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Distributed Ledger implementation"
            },
            "name": {
              "type": "string",
              "description": "Name of the Distributed Ledger implementation"
            },
            "description": {
              "type": "string",
              "description": "Description of the Distributed Ledger implementation"
            },
            "url": {
              "type": "string",
              "description": "URL where information pertaining to the implementation can be found"
            },
            "dlImplementationCharcteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Characteristic of the Distributed Ledger implementation"
            },
            "@type": {
              "type": "string",
              "enum": [
                "financialLedger",
                "smartContractLedger",
                "financialAndSmartContracLedger",
                "offNetLedger"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Ledger/DLImplementation.schema.json#DLImplementation"
            }
          ]
        }
      }
    }
  ],
  "DataAccessEndpoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DataAccessEndpoint.schema.json",
      "title": "DataAccessEndpoint",
      "definitions": {
        "DataAccessEndpoint": {
          "$id": "#DataAccessEndpoint",
          "description": "This is the endpoint exposed by the IoT Device to authorized users.",
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "format": "uri",
              "description": "URI for using the data access API"
            },
            "apiType": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/LogicalResource.schema.json#LogicalResource"
            }
          ]
        }
      }
    }
  ],
  "DayOfMonthRecurrence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DayOfMonthRecurrence.schema.json",
      "title": "DayOfMonthRecurrence",
      "definitions": {
        "DayOfMonthRecurrence": {
          "$id": "#DayOfMonthRecurrence",
          "description": "",
          "type": "object",
          "properties": {
            "dates": {
              "type": "string",
              "format": "date-time"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "DayOfWeekRecurrence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DayOfWeekRecurrence.schema.json",
      "title": "DayOfWeekRecurrence",
      "definitions": {
        "DayOfWeekRecurrence": {
          "$id": "#DayOfWeekRecurrence",
          "description": "",
          "type": "object",
          "properties": {
            "dates": {
              "type": "string",
              "format": "date-time"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Device": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Device.schema.json",
      "title": "Device",
      "definitions": {
        "Device": {
          "$id": "#Device",
          "type": "object",
          "properties": {
            "rule": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/Rule.schema.json#Rule"
              }
            },
            "deviceType": {
              "type": "string",
              "enum": [
                "Device"
              ],
              "description": "NGSI Entity type"
            },
            "controlledAsset": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri"
                  },
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              }
            },
            "mnc": {
              "type": "string"
            },
            "macAddress": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/specs/Device/device-schema.json#/definitions/MacAddressType"
              }
            },
            "ipAddress": {
              "type": "array",
              "items": {
                "type": "string",
                "oneOf": [
                  {
                    "format": "ipv4"
                  },
                  {
                    "format": "ipv6"
                  }
                ]
              }
            },
            "configuration": {
              "$ref": "../Common/Configuration.schema.json#Configuration"
            },
            "dateInstalled": {
              "type": "string",
              "format": "date-time"
            },
            "dateFirstUsed": {
              "type": "string",
              "format": "date-time"
            },
            "dateManufactured": {
              "type": "string",
              "format": "date-time"
            },
            "hardwareVersion": {
              "type": "string"
            },
            "softwareVersion": {
              "type": "string"
            },
            "firmwareVersion": {
              "type": "string"
            },
            "osVersion": {
              "type": "string"
            },
            "dateLastCalibration": {
              "type": "string",
              "format": "date-time"
            },
            "serialNumber": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "refDeviceModel": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uri"
                },
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                }
              ]
            },
            "batteryLevel": {
              "type": "number",
              "format": "float",
              "minimum": 0,
              "maximum": 1
            },
            "rssi": {
              "oneOf": [
                {
                  "type": "number",
                  "const": -1
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                }
              ]
            },
            "deviceState": {
              "type": "string"
            },
            "dateLastValueReported": {
              "type": "string",
              "format": "date-time"
            },
            "value": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GSMACommons.schema.json#GSMACommons"
            },
            {
              "$ref": "../Common/LocationCommons.schema.json#LocationCommons"
            },
            {
              "$ref": "../Resource/PhysicalResource.schema.json#PhysicalResource"
            }
          ],
          "required": [
            "id",
            "type",
            "category",
            "controlledProperty"
          ]
        }
      }
    }
  ],
  "DeviceAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DeviceAnalytics.schema.json",
      "title": "DeviceAnalytics",
      "definitions": {
        "DeviceAnalytics": {
          "$id": "#DeviceAnalytics",
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "manufacturedDated": {
              "type": "string",
              "format": "date-time",
              "description": "manufactoring date"
            },
            "purchaseDate": {
              "type": "string",
              "format": "date-time",
              "description": "customer purchase date"
            },
            "activationDate": {
              "type": "string",
              "format": "date-time",
              "description": "date the device was activated"
            },
            "firstUseDate": {
              "type": "string",
              "format": "date-time",
              "description": "date the device was first used on the network"
            },
            "guranteeExpirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "the date the device guarantee expires"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "DeviceCommons": [
    {
      "$schema": "http://json-schema.org/schema#",
      "$id": "https://fiware.github.io/data-models/specs/Device/device-schema.json",
      "title": "DeviceCommons",
      "description": "Common defintions to describe Device and Device Model scemas.",
      "definitions": {
        "MacAddressType": {
          "$id": "#MacAddressType",
          "type": "string",
          "pattern": "^([[:xdigit:]]{2}[:.-]?){5}[[:xdigit:]]{2}$"
        },
        "CategoryType": {
          "$id": "#CategoryType",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "sensor",
              "actuator",
              "meter",
              "HVAC",
              "network",
              "multimedia",
              "implement",
              "irrSystem",
              "irrSection",
              "endgun"
            ]
          }
        },
        "ControlledPropertyType": {
          "$id": "#ControlledPropertyType",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "temperature",
              "humidity",
              "light",
              "motion",
              "fillingLevel",
              "occupancy",
              "power",
              "pressure",
              "smoke",
              "energy",
              "airPollution",
              "noiseLevel",
              "weatherConditions",
              "precipitation",
              "windSpeed",
              "windDirection",
              "atmosphericPressure",
              "solarRadiation",
              "depth",
              "pH",
              "conductivity",
              "conductance",
              "tss",
              "tds",
              "turbidity",
              "salinity",
              "orp",
              "cdom",
              "waterPollution",
              "location",
              "speed",
              "heading",
              "weight",
              "waterConsumption",
              "gasComsumption",
              "electricityConsumption",
              "eatingActivity",
              "milking",
              "movementActivity",
              "soilMoisture"
            ]
          },
          "SupportedProtocolType": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ul20",
                "mqtt",
                "lwm2m",
                "http",
                "websocket",
                "onem2m",
                "sigfox",
                "lora",
                "nb-iot",
                "ec-gsm-iot",
                "lte-m",
                "cat-m",
                "3g",
                "gprs",
                "coap"
              ]
            }
          }
        },
        "DeviceCommons": {
          "$id": "#DeviceCommons",
          "type": "object",
          "category": {
            "$ref": "/definitions/CategoryType"
          },
          "controlledProperty": {
            "$ref": "/definitions/ControlledPropertyType"
          },
          "supportedProtocol": {
            "$ref": "/definitions/SupportedProtocolType"
          }
        }
      }
    }
  ],
  "DeviceModel": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Device/DeviceModel/schema.json",
      "title": "GSMA / FIWARE - Device Model schema",
      "description": "This entity captures the static properties of a Device. ",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/Device/device-schema.json#/definitions/Device-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "DeviceModel"
              ],
              "description": "NGSI Entity type"
            },
            "deviceClass": {
              "type": "string",
              "enum": [
                "C0",
                "C1",
                "C2"
              ]
            },
            "controlledProperty": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "temperature",
                  "humidity",
                  "light",
                  "motion",
                  "fillingLevel",
                  "occupancy",
                  "power",
                  "pressure",
                  "smoke",
                  "energy",
                  "airPollution",
                  "noiseLevel",
                  "weatherConditions",
                  "precipitation",
                  "windSpeed",
                  "windDirection",
                  "atmosphericPressure",
                  "solarRadiation",
                  "depth",
                  "pH",
                  "conductivity",
                  "conductance",
                  "tss",
                  "tds",
                  "turbidity",
                  "salinity",
                  "orp",
                  "cdom",
                  "waterPollution",
                  "location",
                  "speed",
                  "heading",
                  "weight",
                  "waterConsumption",
                  "gasComsumption",
                  "electricityConsumption",
                  "soilMoisture",
                  "trafficFlow"
                ]
              }
            },
            "function": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "levelControl",
                  "sensing",
                  "onOff",
                  "openClose",
                  "metering",
                  "eventNotification"
                ]
              }
            },
            "supportedUnits": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "energyLimitationClass": {
              "type": "string",
              "enum": [
                "E0",
                "E1",
                "E2",
                "E9"
              ]
            },
            "documentation": {
              "type": "string",
              "format": "uri"
            },
            "brandName": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            },
            "manufacturerName": {
              "type": "string"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "category",
        "controlledProperty",
        "manufacturerName",
        "brandName",
        "modelName"
      ]
    }
  ],
  "DigitalIdentity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DigitalIdentity.schema.json",
      "title": "DigitalIdentity",
      "definitions": {
        "DigitalIdentity": {
          "$id": "#DigitalIdentity",
          "description": "DigitalIdentity is a class that allow to describe a digital identity for an individual or a resource or a specific party role. One of these three MUST be provided. If an individual is provided, this identity will be for all her/his partyRole. To avoid confusion it is recommended in this case to not provide partyRoleIdentified.",
          "type": "object",
          "properties": {
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the Digital Identity creation (timestamp)"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the Digital Identity last update (timestamp)"
            },
            "status": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of this digital identity (unknown, active, suspended, archived)."
            },
            "nickname": {
              "type": "string",
              "description": "Nickname associated to this digital identity (like Juanito17 or the QuebecMoose etc...)."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this digial identity is valid."
            },
            "credential": {
              "type": "array",
              "description": "A list of credential/authentification method that are used for this digital identity.",
              "items": {
                "$ref": "../Common/Credential.schema.json#/definitions/Credential"
              }
            },
            "contactMedium": {
              "type": "array",
              "description": "List of contact medium associated with the digital identity.",
              "items": {
                "$ref": "../Common/DigitalIdentityContactMedium.schema.json#/definitions/DigitalIdentityContactMedium"
              }
            },
            "attachment": {
              "type": "array",
              "description": "List of attachment associated with this digital identity. Could be use to link a cute cat or moose picture to a digital identity for example.",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "Parties who have an interest in this digital identity (like the organization in charge of providing identity). This is NOT the party identified by this digital identity.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "partyRoleIdentified": {
              "type": "array",
              "description": "Related Parties who are identified by this digital identity.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "individualIdentified": {
              "$ref": "../EngagedParty/PartyRef.schema.json#PartyRef",
              "description": "Individual identified by this digital identity. In this case the digitial identity is for all her/his role. It is recommended to not provide partyRoleIdentified if individualIdentified provided "
            },
            "resourceIdentified": {
              "$ref": "../Resource/ResourceRef.schema.json#ResourceRef",
              "description": "Resource identified by this digital identity. It is recommended to no provided individualIdentified or partyRoleIdentified if resourceIdentified provided."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            },
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            }
          ]
        }
      }
    }
  ],
  "DigitalIdentityContactMedium": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DigitalIdentityContactMedium.schema.json",
      "title": "DigitalIdentityContactMedium",
      "definitions": {
        "DigitalIdentityContactMedium": {
          "$id": "#DigitalIdentityContactMedium",
          "description": "Indicates the contact medium that could be used to contact the party.",
          "required": [
            "@type"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier for this contact medium."
            },
            "preferred": {
              "type": "boolean",
              "description": "If true, indicates that is the preferred contact medium"
            },
            "contactType": {
              "type": "string",
              "description": "Type of the contact medium to qualifiy it like pro email / personal email. This is not used to define the contact medium used."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the contact medium is valid for"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "DigitalWallet": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DigitalWallet.schema.json",
      "title": "DigitalWallet",
      "definitions": {
        "DigitalWallet": {
          "$id": "#DigitalWallet",
          "description": "A digital wallet method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "service": {
              "type": "string",
              "description": "Organization, platform or currency backing the wallet (e.g.: PayPal, Yandex, BitCoin…).",
              "examples": [
                "PayPal",
                "Apple Pay",
                "Google Pay",
                "Samsung Pay",
                "BitCoin"
              ]
            },
            "walletId": {
              "type": "string",
              "description": "Account identifier in that service.",
              "examples": [
                "#124#XTYC#7N4LK-12"
              ]
            },
            "walletUrl": {
              "type": "string",
              "description": "URI pointing at the digital wallet (e.g.: //paypal.me/johndoe).",
              "examples": [
                "//paypal.me/johndoe"
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "digitalWallet"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "DigitalWalletDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DigitalWalletDetails.schema.json",
      "title": "DigitalWalletDetails",
      "definitions": {
        "DigitalWalletDetails": {
          "$id": "#DigitalWalletDetails",
          "description": "Detailed information of a check",
          "type": "object",
          "properties": {
            "service": {
              "type": "string",
              "description": "Organization, platform or currency backing the wallet (e.g.: PayPal, Yandex, BitCoin...)"
            },
            "walletId": {
              "type": "string",
              "description": "account identifier in that service"
            },
            "walletUrl": {
              "type": "string",
              "format": "uri",
              "description": "URI pointing at the digital wallet (e.g.: https://paypal.me/johndoe)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DigitalWalletMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DigitalWalletMethod.schema.json",
      "title": "DigitalWalletMethod",
      "definitions": {
        "DigitalWalletMethod": {
          "$id": "#DigitalWalletMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/DigitalWalletDetails.schema.json#DigitalWalletDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DirectDebit": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DirectDebit.schema.json",
      "title": "DirectDebit",
      "definitions": {
        "DirectDebit": {
          "$id": "#DirectDebit",
          "description": "Direct Debit is a fully automated payment instrument which is generally used for recurrent payments. It allows a creditor to initiate the payment order. In doing so, it exempts the debtor from having to send a separate payment order at each due date",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "mandateId": {
              "type": "string",
              "description": "Unique mandate reference. Further information can be found on EPC002-09",
              "examples": [
                "M-123456789-A79ZH34KJZ"
              ]
            },
            "mandateStatus": {
              "type": "string",
              "description": "The status of the mandate(Active/Inactive/Pending)",
              "examples": [
                "Active",
                "Inactive",
                "Pending"
              ]
            },
            "mandateType": {
              "type": "string",
              "description": "The type of mandate",
              "examples": [
                "single",
                "recurring"
              ]
            },
            "mandateCategory": {
              "type": "string",
              "description": "The identification code of the Scheme",
              "examples": [
                "core",
                "b2b"
              ]
            },
            "signature": {
              "type": "string",
              "description": "The (e)Mandate electronic signature data"
            },
            "signatureDate": {
              "type": "string",
              "description": "The date of signing of the (e)Mandate",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:19:46+0000"
              ]
            },
            "mandateStatusDate": {
              "type": "string",
              "description": "The date of the mandate status change",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:19:46+0000"
              ]
            },
            "firstDebitDate": {
              "type": "string",
              "description": "The first debit date. The debit date of the collection is the day when the payment of the Debtor is due to the Creditor",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:20:00+0000"
              ]
            },
            "lastDebitDate": {
              "type": "string",
              "description": "The last debit date. The debit date of the collection is the day when the payment of the Debtor is due to the Creditor",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:20:00+0000"
              ]
            },
            "cancellationDate": {
              "type": "string",
              "description": "The date on which the (e)Mandate has been cancelled by the Debtor or the Creditor.",
              "format": "date-time",
              "examples": [
                "2021-11-20T10:20:00+0000"
              ]
            },
            "accountNumber": {
              "type": "string",
              "description": "The bank account number, this could refer to the iban or swift number.",
              "examples": [
                "GB74HSBCUK122232323238313"
              ]
            },
            "accountNumberType": {
              "type": "string",
              "description": "The type of account number (e.g.: IBAN, SWIFT, ...)",
              "examples": [
                "IBAN"
              ]
            },
            "reference": {
              "type": "string",
              "description": "A reference that the party can later use to identify the direct debit.",
              "examples": [
                "Telco Bill Direct Debit"
              ]
            },
            "BIC": {
              "type": "string",
              "description": "The Business Identifier Code/Swift code of the financial institution where the account is located.",
              "examples": [
                "HBUKGB4BXXX"
              ]
            },
            "owner": {
              "type": "string",
              "description": "The owner of the bank account. This is also the account name.",
              "examples": [
                "Dom Joe Plumbing Ltd"
              ]
            },
            "bank": {
              "type": "string",
              "description": "The display name of the bank.",
              "examples": [
                "LOCAL BANK"
              ]
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "@type": {
              "type": "string",
              "enum": [
                "directDebit"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "Disability": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Disability.schema.json",
      "title": "Disability",
      "definitions": {
        "Disability": {
          "$id": "#Disability",
          "type": "object",
          "description": "Lack or inadequate strength or ability.",
          "properties": {
            "disabilityCode": {
              "type": "string",
              "description": "Code of the disability"
            },
            "disabilityName": {
              "type": "string",
              "description": "Name of the disability"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DistributedLedger": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DistributedLedger.schema.json",
      "title": "DistributedLedger",
      "definitions": {
        "DistributedLedger": {
          "$id": "#DistributedLedger",
          "type": "object",
          "description": "Document is a tangible output from an activity",
          "properties": {
            "binaryAttachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the document was created. A date and time formatted in compliance with the ISO8601 standard must be used."
            },
            "description": {
              "type": "string",
              "description": "free-text description of the document"
            },
            "documentRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/DocumentRef.schema.json#DocumentRef"
              }
            },
            "documentSpecification": {
              "$ref": "../Common/DocumentSpecification.schema.json#DocumentSpecification"
            },
            "href": {
              "type": "string",
              "description": "The URI for the object itself."
            },
            "id": {
              "type": "string",
              "description": "Identifier of an instance of the document. Required to be unique within the document type.  Used in URIs as the identifier for specific instances of a type."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the document was last modified. A date and time formatted in compliance with the ISO8601 standard must be used."
            },
            "lifecycleState": {
              "type": "string",
              "description": "The life cycle state of the document."
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the document"
            },
            "relatedEntity": {
              "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "documentType": {
              "type": "string",
              "description": "Name of the document type"
            },
            "version": {
              "type": "string",
              "description": "A particular form or variety of an artefact that is different from others or from the original. The form represents differences in properties that characterize an artefact, that are not enough to warrant creating a new artefact"
            }
          }
        }
      }
    }
  ],
  "Document": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Document.schema.json",
      "title": "Document",
      "definitions": {
        "Document": {
          "$id": "#Document",
          "type": "object",
          "description": "Document is a tangible output from an activity",
          "properties": {
            "binaryAttachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the document was created. A date and time formatted in compliance with the ISO8601 standard must be used."
            },
            "description": {
              "type": "string",
              "description": "free-text description of the document"
            },
            "documentRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/DocumentRef.schema.json#DocumentRef"
              }
            },
            "documentSpecification": {
              "$ref": "../Common/DocumentSpecification.schema.json#DocumentSpecification"
            },
            "href": {
              "type": "string",
              "description": "The URI for the object itself."
            },
            "id": {
              "type": "string",
              "description": "Identifier of an instance of the document. Required to be unique within the document type.  Used in URIs as the identifier for specific instances of a type."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the document was last modified. A date and time formatted in compliance with the ISO8601 standard must be used."
            },
            "lifecycleState": {
              "type": "string",
              "description": "The life cycle state of the document."
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the document"
            },
            "relatedEntity": {
              "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "documentType": {
              "type": "string",
              "description": "Name of the document type"
            },
            "version": {
              "type": "string",
              "description": "A particular form or variety of an artefact that is different from others or from the original. The form represents differences in properties that characterize an artefact, that are not enough to warrant creating a new artefact"
            }
          }
        }
      }
    }
  ],
  "DocumentAttachment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DocumentAttachment.schema.json",
      "title": "DocumentAttachment",
      "definitions": {
        "DocumentAttachment": {
          "$id": "#DocumentAttachment",
          "description": "Attachment refers to extensions or additional parts that is or may be attached to something (agreements, contracts, appointments) to perform a particular function. They can be communication attachments, documents and other.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "The description of the binary attachment"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the binary attachment"
            },
            "mimeType": {
              "type": "string",
              "description": "mimeType of the Attachment, such as: application/pdf"
            },
            "name": {
              "type": "string",
              "description": "Name of the binary attachment"
            },
            "size": {
              "type": "integer",
              "description": "The size of the document or attachment. If this component contains the embedded data then the size is the size of the embedded data; if it is a reference without the data then it is the size of the referenced document"
            },
            "sizeUnit": {
              "type": "string",
              "description": "The unit of measure for the size"
            },
            "attachmentType": {
              "type": "string",
              "description": "Identifies the sub-type of the instance of binary attachment"
            },
            "URL": {
              "type": "string",
              "format": "uri",
              "description": "URL of the Attachment"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity period of the Attachment"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DocumentCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DocumentCharacteristic.schema.json",
      "title": "DocumentCharacteristic",
      "definitions": {
        "DocumentCharacteristic": {
          "$id": "#DocumentCharacteristic",
          "description": "is a list of name value pairs that define the document characteristics.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name of the characteristic"
            },
            "value": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DocumentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DocumentRef.schema.json",
      "title": "DocumentRef",
      "definitions": {
        "DocumentRef": {
          "$id": "#DocumentRef",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "The URI for the object itself."
            },
            "id": {
              "type": "string",
              "description": "Identifier of the document"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "DocumentRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DocumentRelationship.schema.json",
      "title": "DocumentRelationship",
      "definitions": {
        "DocumentRelationship": {
          "$id": "#DocumentRelationship",
          "description": "Another document that is related to the current document;",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "The type of relationship"
            },
            "documentRef": {
              "$ref": "../Common/DocumentRef.schema.json#DocumentRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "DocumentSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "DocumentSpecification.schema.json",
      "title": "DocumentSpecification",
      "definitions": {
        "DocumentSpecification": {
          "$id": "#DocumentSpecification",
          "type": "object",
          "description": "A document specification reference",
          "properties": {
            "URL": {
              "type": "string",
              "description": "URL of the Document Specification"
            },
            "href": {
              "type": "string",
              "description": "The URI for the object itself."
            },
            "id": {
              "type": "string",
              "description": "Indentifier of the DocumentSpecification"
            },
            "name": {
              "type": "string",
              "description": "a String. Name of the DocumentSpecification"
            },
            "version": {
              "type": "string",
              "description": "A string, a version of the DocumentSpecification."
            }
          }
        }
      }
    }
  ],
  "Duration": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Duration.schema.json",
      "title": "Duration",
      "definitions": {
        "Duration": {
          "$id": "#Duration",
          "type": "object",
          "description": "A time interval in a given unit of time",
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Time interval (number of seconds, minutes, hours, etc.)"
            },
            "units": {
              "type": "string",
              "description": "Unit of time (seconds, minutes, hours, etc.)"
            }
          }
        }
      }
    }
  ],
  "EVChargingStation": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Transportation/EVChargingStation/schema.json",
      "title": "FIWARE - Transportation / EV Charging Station",
      "description": "EV Charging Station",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "EVChargingStation"
              ],
              "description": "NGSI Entity type"
            },
            "image": {
              "type": "string",
              "format": "uri"
            },
            "capacity": {
              "type": "integer",
              "minimum": 1
            },
            "socketNumber": {
              "type": "integer",
              "minimum": 1
            },
            "availableCapacity": {
              "type": "integer",
              "minimum": 0
            },
            "allowedVehicleType": {
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "bicycle",
                  "bus",
                  "car",
                  "caravan",
                  "motorcycle",
                  "motorscooter",
                  "truck"
                ]
              }
            },
            "socketType": {
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "Type2",
                  "CHAdeMO",
                  "CCS/SAE",
                  "Type3",
                  "Tesla",
                  "J-1772",
                  "Wall_Euro",
                  "Caravan_Mains_Socket",
                  "Dual_J-1772",
                  "Dual_CHAdeMO",
                  "Mennekes",
                  "Dual_Mennekes",
                  "Other"
                ]
              }
            },
            "openingHours": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "working",
                "outOfService",
                "withIncidence",
                "full",
                "almostFull",
                "empty",
                "almostEmpty"
              ]
            },
            "owner": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uri"
                },
                {
                  "type": "string"
                }
              ]
            },
            "areaServed": {
              "type": "string"
            },
            "network": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uri"
                },
                {
                  "type": "string"
                }
              ]
            },
            "operator": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uri"
                },
                {
                  "type": "string"
                }
              ]
            },
            "contactPoint": {
              "type": "object"
            },
            "amperage": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "voltage": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "chargeType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "flat",
                  "annualPayment",
                  "monthlyPayment",
                  "free",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "acceptedPaymentMethod": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ByBankTransferInAdvance",
                  "ByInvoice",
                  "Cash",
                  "CheckInAdvance",
                  "COD",
                  "DirectDebit",
                  "GoogleCheckout",
                  "PayPal",
                  "PaySwarm"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name",
        "socketType",
        "capacity",
        "allowedVehicleType"
      ],
      "anyOf": [
        {
          "required": [
            "address"
          ]
        },
        {
          "required": [
            "location"
          ]
        }
      ]
    }
  ],
  "Edge": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Edge.schema.json",
      "title": "Edge",
      "definitions": {
        "Edge": {
          "type": "object",
          "description": "Edge is a directed edge connecting vertices in a directed Graph.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "edgeSpecification": {
              "$ref": "EdgeSpecificationRef.schema.json#EdgeSpecificationRef"
            },
            "graph": {
              "description": "Graph which this Edge is contained in.",
              "$ref": "GraphRef.schema.json#GraphRef"
            },
            "subGraph": {
              "description": "SubGraph which this Edge represents.",
              "$ref": "GraphRefOrValue.schema.json#GraphRefOrValue"
            },
            "bidirectional": {
              "type": "boolean",
              "description": "Indicates if this Edge is birectional (true) or unidirection originating from the first vertex (false)."
            },
            "entity": {
              "description": "Entity which this Edge represents.",
              "$ref": "EntityRef.schema.json#EntityRef"
            },
            "vertex": {
              "description": "Graph Vertices connected by this Edge.",
              "type": "array",
              "items": {
                "$ref": "VertexRef.schema.json#VertexRef"
              }
            },
            "edgeCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "Characteristic.schema.json#Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EdgeRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeRef.schema.json",
      "title": "EdgeRef",
      "definitions": {
        "EdgeRef": {
          "$id": "#EdgeRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EdgeRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeRefOrValue.schema.json",
      "title": "EdgeRefOrValue",
      "definitions": {
        "EdgeRefOrValue": {
          "$id": "#EdgeRefOrValue",
          "description": "Edge is a directed edge connecting vertices in a directed Graph.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "EdgeRef.schema.json#EdgeRef"
            },
            {
              "$ref": "Edge.schema.json#Edge"
            }
          ]
        }
      }
    }
  ],
  "EdgeSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeSpecification.schema.json",
      "title": "EdgeSpecification",
      "definitions": {
        "EdgeSpecification": {
          "type": "object",
          "description": "A directed Edge connects Vertices in a Graph.\nAn EdgeSpecification is a base class that represents a generic means for implementing a particular type of Edge. In essence, an EdgeSpecification defines the common attributes and relationships of a set of related Edges, while Edge defines a specific instance that is based on a particular EdgeSpecification.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "version": {
              "type": "string",
              "description": "Edge Specification version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of the edge specification"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A related party defines party or party role linked to a specific entity."
            },
            "edgeSpecCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "EdgeSpecificationCharacteristic.schema.json#EdgeSpecificationCharacteristic"
              },
              "description": "A characteristic quality or distinctive feature of an EdgeSpecification."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            },
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            }
          ]
        }
      }
    }
  ],
  "EdgeSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeSpecificationCharacteristic.schema.json",
      "title": "EdgeSpecificationCharacteristic",
      "definitions": {
        "EdgeSpecificationCharacteristic": {
          "$id": "#EdgeSpecificationCharacteristic",
          "description": "This class defines the characteristic features of an edge specification. Every EdgeSpecification has a variety of important attributes, methods, constraints, and relationships, which distinguish an edge specification from other edge specifications.",
          "type": "object",
          "properties": {
            "edgeSpecCharRelationship": {
              "type": "array",
              "items": {
                "$ref": "EdgeSpecificationCharacteristicRelationship.schema.json#EdgeSpecificationCharacteristicRelationship"
              },
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
            },
            "edgeSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a EdgeSpecificationCharacteristic object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding EdgeSpecificationCharacteristic object can take on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ]
        }
      }
    }
  ],
  "EdgeSpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeSpecificationCharacteristicRelationship.schema.json",
      "title": "EdgeSpecificationCharacteristicRelationship",
      "definitions": {
        "EdgeSpecificationCharacteristicRelationship": {
          "$id": "#EdgeSpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among EdgeSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "name": {
              "type": "string",
              "description": "Name of the target characteristic within the specification"
            },
            "characteristicSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the characteristic within the specification"
            },
            "edgeSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the edge specification containing the target characteristic"
            },
            "edgeSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the edge specification containing the target characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the object is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "EdgeSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EdgeSpecificationRef.schema.json",
      "title": "EdgeSpecificationRef",
      "definitions": {
        "EdgeSpecificationRef": {
          "$id": "#EdgeSpecificationRef",
          "description": "A directed Edge connects Vertices in a Graph.\nAn EdgeSpecification is a base class that represents a generic means for implementing a particular type of Edge. In essence, an EdgeSpecification defines the common attributes and relationships of a set of related Edges, while Edge defines a specific instance that is based on a particular EdgeSpecification.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Edge Specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EligibilityOfferAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EligibilityOfferAnalytics.schema.json",
      "title": "EligibilityOfferAnalytics",
      "definitions": {
        "EligibilityOfferAnalytics": {
          "$id": "#EligibilityOfferAnalytics",
          "type": "object",
          "properties": {
            "eligibilityCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when Eligibility Offer was created"
            },
            "eligibilityStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Eligibility Offer start or effective date"
            },
            "eligibilityEndDate": {
              "type": "string",
              "format": "date-time",
              "description": "Eligibility Offer end or termination date"
            },
            "eligibilityValueAmt": {
              "type": "number",
              "format": "integer",
              "description": "When required, captures the value, number, percentage, etc. of the Eligibility Offer."
            },
            "sizeOfHouseholdCount": {
              "type": "number",
              "format": "integer",
              "description": "Number of people in household"
            },
            "disposableIncomeAmt": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "EligibilityUnavailabilityReason": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EligibilityUnavailabilityReason.schema.json",
      "title": "EligibilityUnavailabilityReason",
      "definitions": {
        "EligibilityUnavailabilityReason": {
          "$id": "#EligibilityUnavailabilityReason",
          "description": "Reason for eligibility result if the productOfferingQualification result is no (meaning the productOffering or productSpec is not available).",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Unavailability reason code."
            },
            "label": {
              "type": "string",
              "description": "Unavailability reason label."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EmailMedium": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EmailMedium.schema.json",
      "title": "EmailMedium",
      "definitions": {
        "EmailMedium": {
          "$id": "#EmailMedium",
          "type": "object",
          "description": "Describes an email that could be used to contact a party (an individual or an organization)",
          "properties": {
            "emailAddress": {
              "type": "string",
              "description": "Full email address in standard format"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/DigitalIdentityContactMedium.schema.json#DigitalIdentityContactMedium"
            }
          ]
        }
      }
    }
  ],
  "EndpointRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EndpointRef.schema.json",
      "title": "EndpointRef",
      "definitions": {
        "EndpointRef": {
          "$id": "#EndpointRef",
          "description": "A vertex in a resource graph.",
          "type": "object",
          "properties": {
            "isRoot": {
              "description": "Directionality: true when endpoint is a source, false when a sink. If true for all endpoints connectivity is bidirectional. Default is true.",
              "type": "boolean",
              "default": true
            },
            "connectionPoint": {
              "description": "The connection point (SAP) of the associated resource function (optional).",
              "$ref": "ConnectionPointRef.schema.json#/definitions/ConnectionPointRef"
            }
          },
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EndpointSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EndpointSpecificationRef.schema.json",
      "title": "EndpointSpecificationRef",
      "definitions": {
        "EndpointSpecificationRef": {
          "$id": "#EndpointSpecificationRef",
          "description": "A specification for a vertex in a resource graph.",
          "type": "object",
          "properties": {
            "role": {
              "description": "Role of the Resource Function.",
              "type": "string"
            },
            "isRoot": {
              "description": "Directionality: true when endpoint is a source, false when a sink. If true for all endpoints connectivity is bidirectional. Default is true.",
              "type": "boolean",
              "default": true
            },
            "connectionPointSpecification": {
              "description": "A specification for the connection point (SAP) of the associated resource function (optional).",
              "$ref": "ConnectionPointSpecificationRef.schema.json#/definitions/ConnectionPointSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Entitlement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Entitlement.schema.json",
      "title": "Entitlement",
      "definitions": {
        "Entitlement": {
          "$id": "#Entitlement",
          "description": "An Entitlement defines access levels to operate over a given function that can be included in an asset.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the entitlement."
            },
            "function": {
              "type": "string",
              "description": "Specific function that can be managed over a given asset."
            },
            "action": {
              "type": "string",
              "description": "Level of access granted as part of the permission."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Entity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Entity.schema.json",
      "title": "Entity",
      "definitions": {
        "Entity": {
          "$id": "#Entity",
          "type": "object",
          "description": "Base entity schema for use in TMForum Open-APIs",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntityAttachment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityAttachment.schema.json",
      "title": "EntityAttachment",
      "definitions": {
        "EntityAttachment": {
          "$id": "#EntityAttachment",
          "description": "Complements the description of an entity through video, pictures...",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative text describing the content of the attachment"
            },
            "href": {
              "type": "string",
              "description": "Reference of the attachment"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the attachment"
            },
            "mimeType": {
              "type": "string",
              "description": "Attachment mime type such as extension file for video, picture and document"
            },
            "name": {
              "type": "string",
              "description": "name given to the attachment"
            },
            "uri": {
              "type": "string",
              "format": "uri",
              "description": "Uniform Resource Identifier (URI) of the attachment"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this attachment is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EntityCatalog": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityCatalog.schema.json",
      "title": "EntityCatalog",
      "definitions": {
        "EntityCatalog": {
          "$id": "#EntityCatalog",
          "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any TMF data model entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it does not replace them. It is primarily intended to address those entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of this catalog"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the catalog"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the catalog is valid"
            },
            "relatedParty": {
              "type": "array",
              "description": "The parties who are involved or have an interest in this catalog",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "category": {
              "type": "array",
              "description": "The categories used in this catalog",
              "items": {
                "$ref": "../Common/EntityCategoryRef.schema.json#/definitions/EntityCategoryRef"
              }
            },
            "version": {
              "type": "string",
              "description": "Catalog version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntityCatalogItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityCatalogItem.schema.json",
      "title": "EntityCatalogItem",
      "definitions": {
        "EntityCatalogItem": {
          "$id": "#EntityCatalogItem",
          "description": "An EntityCatalogItem is an entity that allows any ProductOffering, ServiceCandidate, ResourceCandidate, or even any object inheriting from RootEntity, to be available to a catalog. The CatalogSpecification and Policy of the catalog governs the content of the EntityCatalogItem. This API addresses only EntitySpecification items extended from RootEntity as EntityCatalogItem.\nThe EntityCatalogItem resource (JSON format) represents a set of characteristics that define the values given by the EntityCatalogItem.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of this catalog item"
            },
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Common/EntityCategoryRef.schema.json#/definitions/EntityCategoryRef",
                "description": "The category(ies) if any that refer to this catalog item"
              }
            },
            "specification": {
              "description": "The specification implied by this candidate",
              "$ref": "../Common/EntitySpecificationRef.schema.json#/definitions/EntitySpecificationRef"
            },
            "version": {
              "type": "string",
              "description": "EntityCatalogItem version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntityCatalogItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityCatalogItemRef.schema.json",
      "title": "EntityCatalogItemRef",
      "definitions": {
        "EntityCatalogItemRef": {
          "$id": "#EntityCatalogItemRef",
          "description": "reference to EntityCatalogItem object",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "EntityCatalogItem version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EntityCategory": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityCategory.schema.json",
      "title": "EntityCategory",
      "definitions": {
        "EntityCategory": {
          "$id": "#EntityCategory",
          "description": "The (entity) category resource is used to group entity catalog items in logical containers. Categories can contain other categories.\nResource IDs for categories are strings and are defined by the catalog application.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the category"
            },
            "isRoot": {
              "type": "boolean",
              "description": "If true, this Boolean indicates that the category is a root of categories"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the category"
            },
            "parentId": {
              "type": "string",
              "description": "Unique identifier of the parent category"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the category is valid"
            },
            "childCategory": {
              "type": "array",
              "description": "The child category(ies) if any, contained in this category",
              "items": {
                "$ref": "../Common/EntityCategoryRef.schema.json#/definitions/EntityCategoryRef"
              }
            },
            "entityCatalogItem": {
              "type": "array",
              "description": "The catalog items referred to by this category",
              "items": {
                "$ref": "../Common/EntityCatalogItemRef.schema.json#/definitions/EntityCatalogItemRef"
              }
            },
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntityCategoryRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityCategoryRef.schema.json",
      "title": "EntityCategoryRef",
      "definitions": {
        "EntityCategoryRef": {
          "$id": "#EntityCategoryRef",
          "description": "Reference to Entity Category object. The (entity) category resource is used to group entity catalog items in logical containers. Categories can contain other categories.\nResource IDs for categories are strings and are defined by the catalog application.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EntityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityRef.schema.json",
      "title": "EntityRef",
      "definitions": {
        "EntityRef": {
          "$id": "#EntityRef",
          "description": "Entity reference schema to be use for all entityRef class.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntityRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityRefOrValue.schema.json",
      "title": "EntityRefOrValue",
      "definitions": {
        "EntityRef": {
          "$id": "#EntityRefOrValue",
          "description": "Entity reference schema to be use for all entityRef class OrValue to provide information via POST",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            },
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EntityRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityRelationship.schema.json",
      "title": "EntityRelationship",
      "definitions": {
        "EntityRelationship": {
          "$id": "#EntityRelationship",
          "description": "A uni-directionmal relationship from this entity to a target entity instance",
          "type": "object",
          "required": [
            "relationshipType",
            "entity"
          ],
          "properties": {
            "entity": {
              "description": "The entity being referred to",
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            },
            "role": {
              "type": "string",
              "description": "The association role for this entity"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as containment, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the entityRelationship is valid"
            },
            "associationSpec": {
              "$ref": "../Common/AssociationSpecificationRef.schema.json#AssociationSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "EntitySchemaRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntitySchemaRef.schema.json",
      "title": "EntitySchemaRef",
      "definitions": {
        "EntitySchemaRef": {
          "$id": "#EntitySchemaRef",
          "description": "The reference object to the schema and type of target entity which is described by an entity specification",
          "type": "object",
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "description": "This field provides a link to the schema describing the target entity"
            },
            "@type": {
              "type": "string",
              "description": "Class type of the target entity"
            }
          }
        }
      }
    }
  ],
  "EntitySpecRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntitySpecRelationship.schema.json",
      "title": "EntitySpecRelationship",
      "definitions": {
        "EntitySpecRelationship": {
          "$id": "#EntitySpecRelationship",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the target EntitySpecification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of target EntitySpecification"
            },
            "name": {
              "type": "string",
              "description": "The name given to the target entity specification instance"
            },
            "role": {
              "type": "string",
              "description": "The association role for this entity specification"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the entitySpecRelationship is valid"
            },
            "associationSpec": {
              "$ref": "../Common/AssociationSpecRef.schema.json#AssociationSpecRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EntitySpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntitySpecification.schema.json",
      "title": "EntitySpecification",
      "definitions": {
        "EntitySpecification": {
          "$id": "#EntitySpecification",
          "description": "EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.\nFunctionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics.\nNote: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the specification"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of the specification"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of this catalog item"
            },
            "name": {
              "type": "string",
              "description": "Name given to the specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true)."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "version": {
              "type": "string",
              "description": "specification version"
            },
            "attachment": {
              "type": "array",
              "description": "Attachments that may be of relevance to this specification, such as picture, document, media",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              }
            },
            "targetEntitySchema": {
              "description": "Pointer to a schema that defines the target entity",
              "$ref": "../Common/TargetEntitySchema.schema.json#/definitions/TargetEntitySchema"
            },
            "specCharacteristic": {
              "type": "array",
              "description": "List of characteristics that the entity can take",
              "items": {
                "$ref": "../Common/CharacteristicSpecification.schema.json#/definitions/CharacteristicSpecification"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "Parties who manage or otherwise have an interest in this specification",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "constraint": {
              "description": "This is a list of constraint references applied to this specification",
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#/definitions/ConstraintRef"
              }
            },
            "entitySpecRelationship": {
              "type": "array",
              "description": "Relationship to another specification",
              "items": {
                "$ref": "../Common/EntitySpecificationRelationship.schema.json#/definitions/EntitySpecificationRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EntitySpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntitySpecificationRef.schema.json",
      "title": "EntitySpecificationRef",
      "definitions": {
        "EntitySpecificationRef": {
          "$id": "#EntitySpecificationRef",
          "description": "reference to an EntitySpecification object",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "EntitySpecification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EntitySpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntitySpecificationRelationship.schema.json",
      "title": "EntitySpecificationRelationship",
      "definitions": {
        "EntitySpecificationRelationship": {
          "$id": "#EntitySpecificationRelationship",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
          "type": "object",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "role": {
              "type": "string",
              "description": "The association role for this entity specification"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the entitySpecRelationship is valid"
            },
            "associationSpec": {
              "$ref": "../Common/AssociationSpecificationRef.schema.json#AssociationSpecificationRef",
              "description": "A specification for an association used by this relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "EntityValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EntityValue.schema.json",
      "title": "EntityValue",
      "definitions": {
        "EntityValue": {
          "$id": "#EntityValue",
          "type": "object",
          "description": "Base entity value  schema for use in TMForum Open-APIs",
          "discriminator": "@type",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Error": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Error.schema.json",
      "title": "Error",
      "definitions": {
        "Error": {
          "$id": "#Error",
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "type": "object",
          "required": [
            "code",
            "reason"
          ],
          "properties": {
            "code": {
              "type": "string",
              "description": "Application relevant detail, defined in the API or a common list",
              "examples": [
                "1",
                "2"
              ]
            },
            "reason": {
              "type": "string",
              "description": "Explanation of the reason for the error which can be shown to a client user",
              "examples": [
                "This customer does not exist",
                "The service is not available at this location"
              ]
            },
            "message": {
              "type": "string",
              "description": "More details and corrective actions related to the error which can be shown to a client user",
              "examples": [
                "Please use a valid password",
                "Please enter a smaller quantity"
              ]
            },
            "status": {
              "type": "string",
              "description": "HTTP Error code extension",
              "examples": [
                "400-2",
                "500-4"
              ]
            },
            "referenceError": {
              "type": "string",
              "format": "uri",
              "description": "URI of documentation describing the error",
              "examples": [
                "https://docs.microsoft.com/en-us/windows/desktop/wmdm/error-codes",
                "https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ErrorMessage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ErrorMessage.schema.json",
      "title": "ErrorMessage",
      "definitions": {
        "ErrorMessage": {
          "$id": "#ErrorMessage",
          "description": "represents an Error",
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "error code"
            },
            "reason": {
              "type": "string",
              "description": "Explanation of the reason for the error"
            },
            "message": {
              "type": "string",
              "description": "More details and corrective actions related to the error"
            },
            "referenceError": {
              "type": "string",
              "format": "uri",
              "description": "URI of documentation describing the error"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Event": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Event.schema.json",
      "title": "Event",
      "definitions": {
        "Event": {
          "$id": "#Event",
          "description": "event with common attributes.",
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the event occurrence."
            },
            "eventType": {
              "type": "string",
              "description": "The type of the notification."
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "title": {
              "type": "string",
              "description": "The title of the event."
            },
            "description": {
              "type": "string",
              "description": "An explnatory of the event."
            },
            "priority": {
              "type": "string",
              "description": "A priority."
            },
            "timeOccurred": {
              "type": "string",
              "format": "date-time",
              "description": "The time the event occurred."
            },
            "source": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef",
              "description": "Source Entity described by EntityRef"
            },
            "reportingSystem": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef",
              "description": "Reporting System described by EntityRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "analyticCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "event": {
              "description": "The event linked to the involved resource object",
              "$ref": "../Common/Any.schema.json#Any"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "EventRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "EventRef.schema.json",
      "title": "EventRef",
      "definitions": {
        "EventRef": {
          "$id": "#EventRef",
          "type": "object",
          "description": "Events linked with service problem",
          "properties": {
            "eventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Time the event occurred"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Execution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Execution.schema.json",
      "title": "Execution",
      "definitions": {
        "Execution": {
          "$id": "#Execution",
          "type": "object",
          "description": "The base for all Execution resources",
          "properties": {
            "dataCorrelationId": {
              "type": "string",
              "description": "Data correlation ID passed in by the API consumer",
              "example": "aac9969d-219d-4ff1-b256-1765dcf9b342"
            },
            "generalTestArtifact": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeneralTestArtifactRef.schema.json#GeneralTestArtifactRef"
              }
            },
            "state": {
              "$ref": "../Common/ExecutionStateType.schema.json#ExecutionStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "ExecutionStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ExecutionStateType.schema.json",
      "title": "ExecutionStateType",
      "definitions": {
        "ExecutionStateType": {
          "$id": "#ExecutionStateType",
          "type": "string",
          "description": "Possible values for the state of the execution",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "inProgress",
            "cancelled",
            "completed",
            "failed"
          ]
        }
      }
    }
  ],
  "ExportJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ExportJob.schema.json",
      "title": "ExportJob",
      "definitions": {
        "ExportJob": {
          "$id": "#ExportJob",
          "description": "Represents a task used to export resources to a file",
          "type": "object",
          "properties": {
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Data at which the job was completed"
            },
            "contentType": {
              "type": "string",
              "description": "The format of the exported data"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was created"
            },
            "errorLog": {
              "type": "string",
              "description": "Reason for failure"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Reference of the export job"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the export job"
            },
            "path": {
              "type": "string",
              "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
            },
            "query": {
              "type": "string",
              "description": "Used to scope the exported data"
            },
            "status": {
              "description": "Status of the export job (not started, running, succeeded, failed)",
              "$ref": "../Common/JobStateType.schema.json#JobStateType"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "URL of the file containing the data to be exported"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Extensible": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Extensible.schema.json",
      "title": "Extensible",
      "definitions": {
        "Extensible": {
          "$id": "#Extensible",
          "type": "object",
          "description": "Base Extensible schema for use in TMForum Open-APIs",
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "format": "uri",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class Extensible name"
            }
          },
          "dependencies": {
            "@schemaLocation": [
              "@baseType",
              "@type"
            ]
          }
        }
      }
    }
  ],
  "ExternalIdentifier": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ExternalIdentifier.schema.json",
      "title": "ExternalIdentifier",
      "definitions": {
        "ExternalIdentifier": {
          "$id": "#ExternalIdentifier",
          "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "owner": {
              "type": "string",
              "description": "Name of the external system that owns the entity.",
              "examples": [
                "MagentoCommerce"
              ]
            },
            "externalIdentifierType": {
              "type": "string",
              "description": "Type of the identification, typically would be the type of the entity within the external system",
              "examples": [
                "ProductOrder"
              ]
            },
            "id": {
              "type": "string",
              "description": "identification of the entity within the external system.",
              "examples": [
                "MC2255771199555"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ExternalReference": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ExternalReference.schema.json",
      "title": "ExternalReference",
      "definitions": {
        "ExternalReference": {
          "$id": "#ExternalReference",
          "type": "object",
          "description": "External reference of the individual or reference in other system",
          "properties": {
            "externalReferenceType": {
              "type": "string",
              "description": "Type of the external reference"
            },
            "name": {
              "type": "string",
              "description": "External reference name"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "FUTURE_Characteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Characteristic.schema.json",
      "title": "Characteristic",
      "definitions": {
        "Characteristic": {
          "$id": "#Characteristic",
          "description": "Describes a given characteristic of an object or entity through a name/value pair.",
          "type": "object",
          "discriminator": "@type",
          "required": [
            "name",
            "@type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the characteristic"
            },
            "name": {
              "type": "string",
              "description": "Name of the characteristic"
            },
            "valueType": {
              "type": "string",
              "description": "Data type of the value of the characteristic"
            },
            "characteristicRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicRelationship.schema.json#CharacteristicRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Feature": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Feature.schema.json",
      "title": "Feature",
      "definitions": {
        "Feature": {
          "$id": "#Feature",
          "description": "Configuration feature.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the feature.",
              "type": "string"
            },
            "name": {
              "description": "This is the name for the feature.",
              "type": "string"
            },
            "isBundle": {
              "description": "True if this is a feature group. Default is false.",
              "type": "boolean"
            },
            "featureRelationship": {
              "type": "array",
              "items": {
                "$ref": "FeatureRelationship.schema.json#/definitions/FeatureRelationship"
              }
            },
            "constraint": {
              "description": "This is a list of feature constraints.",
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#ConstraintRef"
              }
            },
            "isEnabled": {
              "description": "True if this feature is enabled. Default is true.",
              "type": "boolean"
            },
            "featureCharacteristic": {
              "description": "This is a list of Characteristics for a particular feature.",
              "type": "array",
              "items": {
                "$ref": "Characteristic.schema.json#/definitions/Characteristic"
              }
            }
          },
          "required": [
            "name",
            "featureCharacteristic"
          ]
        }
      }
    }
  ],
  "FeatureRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FeatureRelationship.schema.json",
      "title": "FeatureRelationship",
      "definitions": {
        "FeatureRelationship": {
          "$id": "#FeatureRelationship",
          "description": "Configuration feature",
          "type": "object",
          "properties": {
            "relationshipType": {
              "description": "This is the type of the feature relationship.",
              "type": "string",
              "enum": [
                "excluded",
                "includes",
                "may include",
                "requires"
              ]
            },
            "id": {
              "description": "Unique identifier of the target feature.",
              "type": "string"
            },
            "name": {
              "description": "This is the name of the target feature.",
              "type": "string"
            },
            "validFor": {
              "description": "The period for which this feature relationship is valid.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "required": [
            "relationshipType",
            "name"
          ]
        }
      }
    }
  ],
  "FeatureSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FeatureSpecification.schema.json",
      "title": "FeatureSpecification",
      "definitions": {
        "FeatureSpecification": {
          "$id": "#FeatureSpecification",
          "description": "Specification for resource, service or product features",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
            },
            "version": {
              "type": "string",
              "description": "Version of the feature specification"
            },
            "name": {
              "type": "string",
              "description": "Unique name given to the feature specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "A flag indicating if this is a feature group (true) or not (false)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this feature specification is valid"
            },
            "featureSpecRelationship": {
              "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
              "type": "array",
              "items": {
                "$ref": "../Common/FeatureSpecificationRelationship.schema.json#FeatureSpecificationRelationship"
              }
            },
            "constraint": {
              "description": "This is a list of feature constraints",
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#ConstraintRef"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "A flag indicating if the feature is enabled (true) or not (false)"
            },
            "featureSpecCharacteristic": {
              "description": "This is a list of characteristics for a particular feature",
              "type": "array",
              "items": {
                "$ref": "../Common/FeatureSpecificationCharacteristic.schema.json#/definitions/FeatureSpecificationCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "FeatureSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FeatureSpecificationCharacteristic.schema.json",
      "title": "FeatureSpecificationCharacteristic",
      "definitions": {
        "FeatureSpecificationCharacteristic": {
          "$id": "#FeatureSpecificationCharacteristic",
          "description": "Configuration feature characteristic specification.",
          "type": "object",
          "properties": {
            "featureSpecCharRelationship": {
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics.",
              "type": "array",
              "items": {
                "$ref": "FeatureSpecificationCharacteristicRelationship.schema.json#FeatureSpecificationCharacteristicRelationship"
              }
            },
            "featureSpecCharacteristicValue": {
              "description": "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object.",
              "type": "array",
              "items": {
                "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ],
          "required": [
            "name",
            "value"
          ]
        }
      }
    }
  ],
  "FeatureSpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FeatureSpecificationCharacteristicRelationship.schema.json",
      "title": "FeatureSpecificationCharacteristicRelationship",
      "definitions": {
        "FeatureSpecificationCharacteristicRelationship": {
          "$id": "#FeatureSpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "name": {
              "type": "string",
              "description": "Name of the target characteristic"
            },
            "characteristicId": {
              "type": "string",
              "description": "Unique identifier of the characteristic within the the target feature specification"
            },
            "featureId": {
              "description": "Unique identifier of the target feature specification within the resource specification.",
              "type": "string"
            },
            "resourceSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the resource specification containing the target feature and feature characteristic"
            },
            "resourceSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the resource specification containing the target feature and feature characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the object is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "FeatureSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FeatureSpecificationRelationship.schema.json",
      "title": "FeatureSpecificationRelationship",
      "definitions": {
        "FeatureSpecificationRelationship": {
          "$id": "#FeatureSpecificationRelationship",
          "description": "Relationship between feature specifications",
          "type": "object",
          "properties": {
            "relationshipType": {
              "description": "This is the type of the feature specification relationship.",
              "type": "string",
              "enum": [
                "excluded",
                "includes",
                "may include",
                "requires"
              ]
            },
            "featureId": {
              "description": "Unique identifier of the target feature specification.",
              "type": "string"
            },
            "parentSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the parent specification containing the target feature"
            },
            "parentSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the parent specification containing the target feature"
            },
            "name": {
              "description": "This is the name of the target feature specification.",
              "type": "string"
            },
            "validFor": {
              "description": "The period for which this feature spoecification relationship is valid.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "required": [
            "relationshipType",
            "name"
          ],
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "FederatedIdentity": [
    {
      "$schema": "http://json-schema.org/schema#",
      "$id": "FederatedIdentity.schema.json",
      "title": "FederatedIdentity",
      "description": "An apparatus (hardware + software + firmware) intended to accomplish a particular task (sensing the environment, actuating, etc.).",
      "definitions": {
        "FederatedIdentity": {
          "$id": "#FederatedIdentity",
          "description": "#TODO",
          "type": "object",
          "allOf": [
            {
              "$ref": "../EngagedParty/PartyRole.schema.json#PartyRole"
            }
          ]
        }
      }
    }
  ],
  "FileDescriptor": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FileDescriptor.schema.json",
      "title": "FileDescriptor",
      "definitions": {
        "FileDescriptor": {
          "$id": "FileDescriptor",
          "description": "",
          "type": "object",
          "properties": {
            "fileName": {
              "type": "string"
            },
            "fileLocation": {
              "type": "string"
            },
            "readyTime": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    }
  ],
  "FileDocument": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FileDocument.schema.json",
      "title": "FileDocument",
      "definitions": {
        "FileDocument": {
          "$id": "#FileDocument",
          "description": "A document accompanying an entity",
          "type": "object",
          "properties": {
            "downloadUrl": {
              "type": "string",
              "format": "uri",
              "description": "URL where the document could be downloaded"
            },
            "fileType": {
              "type": "string",
              "description": "Document file format of the file : csv, pdf, xls, txt... for example"
            },
            "name": {
              "type": "string",
              "description": "Document name"
            },
            "size": {
              "type": "integer",
              "description": "Document file size  (by default in bytes)"
            },
            "sizeUnit": {
              "type": "integer",
              "description": "Size unit (in bytes by default)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "FileTransferData": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FileTransferData.schema.json",
      "title": "FileTransferData",
      "definitions": {
        "FileTransferData": {
          "$id": "FileTransferData",
          "description": "",
          "type": "object",
          "properties": {
            "fileLocation": {
              "type": "string",
              "format": "uri"
            },
            "fileFormat": {
              "type": "string"
            },
            "compressionType": {
              "$ref": "CompressionType.schema.json#/definitions/CompressionType"
            },
            "retentionPeriod": {
              "$ref": "Duration.schema.json#/definitions/Duration"
            },
            "packingType": {
              "$ref": "PackingType.schema.json#/definitions/PackingType"
            }
          },
          "allOf": [
            {
              "$ref": "ProtocolTransferData.schema.json#/definitions/ProtocolTransferData"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "FileTransferStatus": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FileTransferStatus.schema.json",
      "title": "FileTransferStatus",
      "definitions": {
        "FileTransferStatus": {
          "$id": "FileTransferStatus",
          "description": "",
          "type": "object",
          "properties": {
            "filename": {
              "description": "This attribute shall represent the name of the file being transferred (this shall include the path name).",
              "type": "string"
            },
            "transferStatus": {
              "description": "This attribute shall represent the current state of the transfer (in progress, failed or completed)",
              "type": "string",
              "enum": [
                "in_progress",
                "failed",
                "completed"
              ]
            },
            "percentageComplete": {
              "description": "This attribute shall indicate the percent complete of the file transfer it shall be in the range 0..100.",
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "reason": {
              "description": "This attribute shall represent, in the event of a failure, reason for the failure.",
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "FinancialAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FinancialAccount.schema.json",
      "title": "FinancialAccount",
      "definitions": {
        "FinancialAccount": {
          "$id": "#FinancialAccount",
          "description": "An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. A financial (account receivable account/account payable) aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party. It is a specialization of entity Account.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {},
          "allOf": [
            {
              "$ref": "../EngagedParty/Account.schema.json#Account"
            }
          ]
        }
      }
    }
  ],
  "FinancialAccountRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FinancialAccountRef.schema.json",
      "title": "FinancialAccountRef",
      "definitions": {
        "FinancialAccountRef": {
          "$id": "#FinancialAccountRef",
          "description": "AccountReceivable reference. An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. An account receivable aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "FirstAlert": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FirstAlert.schema.json",
      "title": "FirstAlert",
      "definitions": {
        "FirstAlert": {
          "$id": "#FirstAlert",
          "type": "object",
          "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the object"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the object"
            },
            "alertType": {
              "type": "string",
              "description": "Type of the object"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "FloatArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FloatArrayCharacteristic.schema.json",
      "title": "FloatArrayCharacteristic",
      "definitions": {
        "FloatArrayCharacteristic": {
          "$id": "#FloatArrayCharacteristic",
          "description": "A characteristic which the value is a number array of format float",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "FloatArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FloatArrayCharacteristicValueSpecification.schema.json",
      "title": "FloatArrayCharacteristicValueSpecification",
      "definitions": {
        "FloatArrayCharacteristicValueSpecification": {
          "$id": "#FloatArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a number array of format floating point",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "FloatCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FloatCharacteristic.schema.json",
      "title": "FloatCharacteristic",
      "definitions": {
        "FloatCharacteristic": {
          "$id": "#FloatCharacteristic",
          "description": "A characteristic which value is a float number",
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "float",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "FloatCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "FloatCharacteristicValueSpecification.schema.json",
      "title": "FloatCharacteristicValueSpecification",
      "definitions": {
        "FloatCharacteristicValueSpecification": {
          "$id": "#FloatCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a floating point number",
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "format": "float",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "FlowerBed": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/ParksAndGardens/FlowerBed/schema.json",
      "title": "FIWARE - Parks and Gardens / Flower Bed",
      "description": "A garden plot in which flowers (or other plants) are grown. Usually you will find flower beds in parks, gardens, pedestrian areas or at big highway interchanges.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "FlowerBed"
              ],
              "description": "NGSI Entity type"
            },
            "taxon": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            "depth": {
              "type": "number",
              "minimum": 0
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "height": {
              "type": "string",
              "minimum": 0
            },
            "category": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "hedge",
                  "lawnArea",
                  "portable",
                  "urbanTreeSpot"
                ]
              }
            },
            "shape": {
              "type": "array",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "string",
                "enum": [
                  "rectangular",
                  "square",
                  "elliptic",
                  "polygon",
                  "circular"
                ]
              }
            },
            "dateLastWatering": {
              "type": "string",
              "format": "date-time"
            },
            "nextWateringDeadline": {
              "type": "string",
              "format": "date-time"
            },
            "refGarden": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "location",
        "type"
      ]
    }
  ],
  "Frequency": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Frequency/schema.json",
      "title": "NGSI GTFS Schema - Frequency",
      "description": "GTFS Frequency",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Frequency"
              ],
              "description": "NGSI Entity type"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "startTime": {
              "type": "string",
              "pattern": "^([0][0-9]|1[0-9]|4[0-7]):[0-5][0-9]:[0-5][0-9]"
            },
            "endTime": {
              "type": "string",
              "pattern": "^([0][0-9]|1[0-9]|4[0-7]):[0-5][0-9]:[0-5][0-9]"
            },
            "headwaySeconds": {
              "type": "integer",
              "minValue": 1
            },
            "exactTimes": {
              "type": "boolean"
            },
            "hasTrip": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasTrip",
        "startTime",
        "endTime",
        "headwaySeconds"
      ]
    }
  ],
  "GSMACommons": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GSMACommons.schema.json",
      "title": "GSMACommons",
      "definitions": {
        "GSMACommons": {
          "type": "object",
          "$id": "#GSMACommons",
          "properties": {
            "dateCreated": {
              "type": "string",
              "format": "date-time"
            },
            "dateModified": {
              "type": "string",
              "format": "date-time"
            },
            "source": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "alternateName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "dataProvider": {
              "type": "string"
            },
            "owner": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri"
                  },
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              }
            },
            "seeAlso": {
              "oneOf": [
                {
                  "type": "array",
                  "minItems": 1,
                  "items": [
                    {
                      "type": "string",
                      "format": "uri"
                    }
                  ]
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "Garden": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/ParksAndGardens/Garden/schema.json",
      "title": "FIWARE - Parks and Gardens / Garden",
      "description": "A garden is a distinguishable planned space, usually outdoors, set aside for the display, cultivation, and enjoyment of plants and other forms of nature.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Garden"
              ],
              "description": "NGSI Entity type"
            },
            "category": {
              "type": "array",
              "minitems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "public",
                  "private",
                  "botanical",
                  "castle",
                  "community",
                  "monastary",
                  "residential",
                  "fencedOff"
                ]
              }
            },
            "style": {
              "type": "string",
              "enum": [
                "english",
                "french",
                "chinese",
                "japanese",
                "zen",
                "rosarium",
                "herb_garden",
                "kitchen"
              ]
            },
            "openingHours": {
              "type": "string"
            },
            "areaServed": {
              "type": "string"
            },
            "dateLastWatering": {
              "type": "string",
              "format": "date-time"
            },
            "nextWateringDeadline": {
              "type": "string",
              "format": "date-time"
            },
            "refRecord": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              }
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "name"
      ]
    }
  ],
  "GeneralTestArtifact": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeneralTestArtifact.schema.json",
      "title": "GeneralTestArtifact",
      "definitions": {
        "GeneralTestArtifact": {
          "$id": "#GeneralTestArtifact",
          "type": "object",
          "description": "A managed general test artifact resource",
          "required": [
            "generalTestArtifactDefinition"
          ],
          "properties": {
            "generalArtifactDefinition": {
              "$ref": "../Common/GeneralTestArtifactDefinition.schema.json#GeneralTestArtifactDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "GeneralTestArtifactDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeneralTestArtifactDefinition.schema.json",
      "title": "GeneralTestArtifactDefinition",
      "definitions": {
        "GeneralTestArtifactDefinition": {
          "$id": "#GeneralTestArtifactDefinition",
          "type": "object",
          "description": "General test artifact definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "GeneralTestArtifactRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeneralTestArtifactRef.schema.json",
      "title": "GeneralTestArtifactRef",
      "definitions": {
        "GeneralTestArtifactRef": {
          "$id": "#GeneralTestArtifactRef",
          "type": "object",
          "description": "A reference to a managed general test artifact resource",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "GeoJSON": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GeoJSON",
      "description": "A geometry as defined by GeoJSON. GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon. Geometric objects with additional properties are Feature objects. Sets of features are contained by FeatureCollection objects.",
      "type": "object",
      "definitions": {
        "position": {
          "$id": "#position",
          "description": "GeoJSON: A single position",
          "type": "array",
          "minItems": 2,
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "additionalItems": false
        },
        "positionArray": {
          "$id": "#positionArray",
          "description": "GeoJSON: An array of positions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/position"
          }
        },
        "lineString": {
          "$id": "#lineString",
          "description": "GeoJSON: An array of two or more positions",
          "allOf": [
            {
              "$ref": "#/definitions/positionArray"
            },
            {
              "minItems": 2
            }
          ]
        },
        "linearRing": {
          "$id": "#linearRing",
          "description": "GeoJSON: An array of four positions where the first equals the last",
          "allOf": [
            {
              "$ref": "#/definitions/positionArray"
            },
            {
              "minItems": 4
            }
          ]
        },
        "polygon": {
          "$id": "#polygon",
          "description": "GeoJSON: An array of linear rings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linearRing"
          }
        }
      }
    }
  ],
  "GeoJsonLineString": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeoJsonLineString.schema.json",
      "title": "GeoJsonLineString",
      "definitions": {
        "GeoJsonLineString": {
          "$id": "#GeoJsonLineString",
          "type": "object",
          "description": "Container for GeoJson LineString: A collection of Points forming a connected line",
          "required": [
            "@type",
            "geoJson"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonLineString"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "geoJson": {
              "$ref": "../Common/LineString.schema.json#LineString"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            }
          ]
        }
      }
    }
  ],
  "GeoJsonMultiLineString": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeoJsonMultiLineString.schema.json",
      "title": "GeoJsonMultiLineString",
      "definitions": {
        "GeoJsonMultiLineString": {
          "$id": "#GeoJsonMultiLineString",
          "description": "A container for GeoJSON MultiLineString: A collection of distinct LineStrings",
          "required": [
            "@type",
            "geoJson"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonMultiLineString"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "geoJson": {
              "$ref": "../Common/MultiLineString.schema.json#MultiLineString"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            }
          ],
          "type": "object"
        }
      }
    }
  ],
  "GeoJsonMultiPoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeoJsonMultiPoint.schema.json",
      "title": "GeoJsonMultiPoint",
      "definitions": {
        "GeoJsonMultiPoint": {
          "$id": "#GeoJsonMultiPoint",
          "description": "Container for GeoJSON MultiPoint: A collection of Points",
          "required": [
            "@type",
            "geoJson"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonMultiPoint"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "geoJson": {
              "$ref": "../Common/MultiPoint.schema.json#MultiPoint"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            }
          ],
          "type": "object"
        }
      }
    }
  ],
  "GeoJsonPoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeoJsonPoint.schema.json",
      "title": "GeoJsonPoint",
      "definitions": {
        "GeoJsonPoint": {
          "$id": "#GeoJsonPoint",
          "type": "object",
          "description": "Container for a GeoJSON Point: A single position",
          "required": [
            "@type",
            "geoJson"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonPoint"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "geoJson": {
              "$ref": "../Common/Point.schema.json#Point"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            }
          ]
        }
      }
    }
  ],
  "GeoJsonPolygon": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeoJsonPolygon.schema.json",
      "title": "GeoJsonPolygon",
      "definitions": {
        "GeoJsonPolygon": {
          "$id": "#GeoJsonPolygon",
          "description": "Container for GeoJSON Polygon: An array of linear rings",
          "required": [
            "@type",
            "geoJson"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonPolygon"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "geoJson": {
              "$ref": "../Common/Polygon.schema.json#Polygon"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            }
          ],
          "type": "object"
        }
      }
    }
  ],
  "GeographicAddress": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicAddress.schema.json",
      "title": "GeographicAddress",
      "definitions": {
        "GeographicAddress": {
          "$id": "#GeographicAddress",
          "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
          "type": "object",
          "properties": {
            "city": {
              "type": "string",
              "description": "City that the address is in"
            },
            "country": {
              "type": "string",
              "description": "Country that the address is in"
            },
            "locality": {
              "type": "string",
              "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
            },
            "postcode": {
              "type": "string",
              "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
            },
            "stateOrProvince": {
              "type": "string",
              "description": "the State or Province that the address is in"
            },
            "streetName": {
              "type": "string",
              "description": "Name of the street or other street type"
            },
            "streetNr": {
              "type": "string",
              "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
            },
            "streetNrLast": {
              "type": "string",
              "description": "Last number in a range of street numbers allocated to a property"
            },
            "streetNrLastSuffix": {
              "type": "string",
              "description": "Last street number suffix for a ranged address"
            },
            "streetNrSuffix": {
              "type": "string",
              "description": "the first street number suffix"
            },
            "streetSuffix": {
              "type": "string",
              "description": "A modifier denoting a relative direction"
            },
            "streetType": {
              "type": "string",
              "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
            },
            "geographicLocation": {
              "$ref": "GeographicLocationRefOrValue.schema.json#GeographicLocationRefOrValue"
            },
            "geographicSubAddress": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeographicSubAddress.schema.json#GeographicSubAddress"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Place.schema.json#Place"
            }
          ]
        }
      }
    }
  ],
  "GeographicAddressRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicAddressRef.schema.json",
      "title": "GeographicAddressRef",
      "definitions": {
        "GeographicAddressRef": {
          "$id": "#GeographicAddressRef",
          "description": "The place at which the change request has occurred.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "The detail address of the location."
            },
            "id": {
              "type": "string",
              "description": "The post code of an address."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GeographicAddressValidation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicAddressValidation.schema.json",
      "title": "GeographicAddressValidation",
      "definitions": {
        "GeographicAddressValidation": {
          "$id": "#GeographicAddressValidation",
          "description": "This resource is used to manage address validation request and response",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "An URI used to access to the address validation resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Address Validation"
            },
            "provideAlternative": {
              "type": "boolean",
              "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
            },
            "state": {
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType"
            },
            "validationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the address validation is performed"
            },
            "validationResult": {
              "type": "string",
              "description": "Result of the address validation (success, partial, fails)"
            },
            "submittedGeographicAddress": {
              "$ref": "../Common/GeographicAddress.schema.json#GeographicAddress",
              "description": "the address as submitted to validation"
            },
            "validGeographicAddress": {
              "$ref": "../Common/GeographicAddress.schema.json#GeographicAddress",
              "description": "the correct form of the validated address in case of validation success"
            },
            "alternateGeographicAddress": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeographicAddress.schema.json#GeographicAddress"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GeographicLocation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicLocation.schema.json",
      "title": "GeographicLocation",
      "definitions": {
        "GeographicLocation": {
          "$id": "#GeographicLocation",
          "type": "object",
          "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the geographic location"
            },
            "href": {
              "type": "string",
              "description": "An URI used to access to the geographic location resource"
            },
            "@type": {
              "type": "string",
              "enum": [
                "GeoJsonPoint",
                "GeoJsonMultiPoint",
                "GeoJsonLineString",
                "GeoJsonMultiLineString",
                "GeoJsonPolygon"
              ],
              "description": "The name of the GeoJSON structure used in the geometry attribute"
            },
            "bbox": {
              "type": "array",
              "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
              "items": {
                "type": "number"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Place.schema.json#Place"
            }
          ],
          "required": [
            "@type"
          ]
        }
      }
    }
  ],
  "GeographicLocationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicLocationRef.schema.json",
      "title": "GeographicLocationRef",
      "definitions": {
        "GeographicLocationRef": {
          "$id": "#GeographicLocationRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "GeographicLocationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicLocationRefOrValue.schema.json",
      "title": "GeographicLocationRefOrValue",
      "definitions": {
        "GeographicLocationRefOrValue": {
          "$id": "#GeographicLocationRefOrValue",
          "type": "object",
          "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
          "properties": {},
          "allOf": [
            {
              "$ref": "GeographicLocationRef.schema.json#GeographicLocationRef"
            },
            {
              "$ref": "GeographicLocation.schema.json#GeographicLocation"
            }
          ]
        }
      }
    }
  ],
  "GeographicPoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicPoint.schema.json",
      "title": "GeographicPoint",
      "definitions": {
        "GeographicPoint": {
          "$id": "#GeographicPoint",
          "description": "A GeographicPoint defines a geographic point through coordinates.",
          "type": "object",
          "properties": {
            "x": {
              "type": "string",
              "description": "x coordinate (usually latitude)"
            },
            "y": {
              "type": "string",
              "description": "y coordinate (usually longitude)"
            },
            "z": {
              "type": "string",
              "description": "z coordinate (usually elevation)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GeographicSite": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicSite.schema.json",
      "title": "GeographicSite",
      "definitions": {
        "GeographicSite": {
          "$id": "#GeographicSite",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
            },
            "description": {
              "type": "string",
              "description": "Text describing additional information regarding the site"
            },
            "status": {
              "type": "string",
              "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "calendar": {
              "type": "array",
              "items": {
                "$ref": "../Common/CalendarPeriod.schema.json#CalendarPeriod"
              }
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
              }
            },
            "siteRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeographicSiteRelationship.schema.json#GeographicSiteRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Place.schema.json#Place"
            }
          ]
        }
      }
    }
  ],
  "GeographicSiteRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicSiteRef.schema.json",
      "title": "GeographicSiteRef",
      "definitions": {
        "GeographicSiteRef": {
          "$id": "#GeographicSiteRef",
          "type": "object",
          "properties": {
            "href": {
              "type": "integer"
            },
            "id": {
              "type": "integer"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GeographicSiteRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicSiteRelationship.schema.json",
      "title": "GeographicSiteRelationship",
      "definitions": {
        "GeographicSiteRelationship": {
          "$id": "#GeographicSiteRelationship",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the related geographic site"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the related site entity within the server"
            },
            "role": {
              "type": "string",
              "description": "Role of the related site in the relationship"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity for the relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GeographicSubAddress": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GeographicSubAddress.schema.json",
      "title": "GeographicSubAddress",
      "definitions": {
        "GeographicSubAddress": {
          "$id": "#GeographicSubAddress",
          "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
          "type": "object",
          "properties": {
            "buildingName": {
              "type": "string",
              "description": "allows for buildings that have well-known names"
            },
            "href": {
              "type": "string",
              "description": "Link to the subAddress"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier of the subAddress"
            },
            "levelNumber": {
              "type": "string",
              "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
            },
            "levelType": {
              "type": "string",
              "description": "describes level types within a building"
            },
            "name": {
              "type": "string",
              "description": "Name of the subAddress to identify it with a meaningful identification"
            },
            "privateStreetName": {
              "type": "string",
              "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
            },
            "privateStreetNumber": {
              "type": "string",
              "description": "private streets numbers internal to a private street"
            },
            "subUnitNumber": {
              "type": "string",
              "description": "the discriminator used for the subunit\noften just a simple number e.g. FLAT 5, may also be a range"
            },
            "subUnitType": {
              "type": "string",
              "description": "the type of subunit\ne.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF"
            },
            "subAddressType": {
              "type": "string",
              "description": "Type of subAddress : it can be a subunit or a private street"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Granularity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Granularity.schema.json",
      "title": "Granularity",
      "definitions": {
        "Granularity": {
          "$id": "#Granularity",
          "description": "Sampling rate of the collection or production of performance indicators.",
          "type": "string",
          "enum": [
            "g_1mn",
            "g_5mn",
            "g_15mn",
            "g_30mn",
            "g_1h",
            "g_24h",
            "g_1m",
            "g_1y",
            "na"
          ]
        }
      }
    }
  ],
  "Graph": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Graph.schema.json",
      "title": "Graph",
      "definitions": {
        "Graph": {
          "type": "object",
          "description": "Graph is a directed graph representing edges connecting vertices.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "graphRelationship": {
              "type": "array",
              "description": "Relationship to another Graph.",
              "items": {
                "$ref": "GraphRelationship.schema.json#GraphRelationship"
              }
            },
            "vertex": {
              "type": "array",
              "items": {
                "$ref": "VertexRefOrValue.schema.json#VertexRefOrValue"
              }
            },
            "edge": {
              "type": "array",
              "items": {
                "$ref": "EdgeRefOrValue.schema.json#EdgeRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GraphRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GraphRef.schema.json",
      "title": "GraphRef",
      "definitions": {
        "GraphRef": {
          "$id": "#GraphRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "GraphRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GraphRefOrValue.schema.json",
      "title": "GraphRefOrValue",
      "definitions": {
        "GraphRefOrValue": {
          "$id": "#GraphRefOrValue",
          "description": "Graph is a directed graph representing edges connecting vertices.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "GraphRef.schema.json#GraphRef"
            },
            {
              "$ref": "Graph.schema.json#Graph"
            }
          ]
        }
      }
    }
  ],
  "GraphRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GraphRelationship.schema.json",
      "title": "GraphRelationship",
      "definitions": {
        "GraphRelationship": {
          "$id": "#GraphRelationship",
          "description": "A relationship between Graphs.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as adjacency, connectivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this Graph"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of target Graph"
            },
            "href": {
              "type": "string",
              "description": "Reference of the target Graph"
            },
            "name": {
              "type": "string",
              "description": "The name given to the target Grapph instance"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "GreenspaceRecord": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/ParksAndGardens/GreenspaceRecord/schema.json",
      "title": "FIWARE - Parks and Gardens / Greenspace Record",
      "description": "This entity contains a harmonised description of the conditions recorded on a particular area or point inside a greenspace (flower bed, garden, etc.). This entity type has been inspired by the AgriParcelRecord entity type defined by the GSMA Harmonized Data Models.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "GreenspaceRecord"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string",
              "format": "date-time"
            },
            "soilTemperature": {
              "type": "number"
            },
            "soilMoistureVwc": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "soilMoistureEc": {
              "type": "number"
            },
            "refGreenspace": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refDevice": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "dateObserved"
      ]
    }
  ],
  "GroupAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "GroupAlarms.schema.json",
      "title": "GroupAlarms",
      "definitions": {
        "GroupAlarms": {
          "$id": "#GroupAlarms",
          "description": "Task resource for group alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "sourceSystemId": {
              "description": "Source system identifier",
              "type": "string"
            },
            "alarmChangedTime": {
              "description": "Time of the correlation",
              "type": "string",
              "format": "date-time"
            },
            "parentAlarm": {
              "description": "Root cause alarm",
              "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
            },
            "correlatedAlarm": {
              "description": "Correlated alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            },
            "groupedAlarm": {
              "description": "The successfully correlated alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "HLRSubscriberAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "HLRSubscriberAnalytics.schema.json",
      "title": "HLRSubscriberAnalytics",
      "definitions": {
        "HLRSubscriberAnalytics": {
          "$id": "#HLRSubscriberAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "HeaderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "HeaderItem.schema.json",
      "title": "HeaderItem",
      "definitions": {
        "HeaderItem": {
          "$id": "#HeaderItem",
          "type": "object",
          "description": "An item typically included in a request or response",
          "properties": {
            "name": {
              "description": "The name of the header item, e.g. locale",
              "type": "string"
            },
            "value": {
              "description": "The value of the header item, e.g. en-us",
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ]
        }
      }
    }
  ],
  "Heal": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Heal.schema.json",
      "title": "Heal",
      "definitions": {
        "Heal": {
          "$id": "#Heal",
          "description": "Task Resource used to request healing of a Resource Function",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the Heal task resource",
              "type": "string"
            },
            "href": {
              "description": "Reference to the Heal task resource",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "Name of the Heal task resource",
              "type": "string"
            },
            "resourceFunction": {
              "description": "Reference to the Resource Function that needs to be healed",
              "$ref": "../Resource/ResourceFunctionRef.schema.json#/definitions/ResourceFunctionRef"
            },
            "cause": {
              "description": "Reason why healing is being requested",
              "type": "string"
            },
            "degreeOfHealing": {
              "description": "Indicates the degree of healing required",
              "type": "string",
              "enum": [
                "Complete - Restore to state before failure",
                "Complete - Heal based on latest QOS values",
                "Complete - Restore to instatiation state",
                "Partial"
              ]
            },
            "healAction": {
              "description": "Exact action to be taken as part of the heal process or a pointer to a script to be run",
              "type": "string"
            },
            "healPolicy": {
              "$ref": "../Resource/HealPolicyRef.schema.json#/definitions/HealPolicyRef"
            },
            "startTime": {
              "description": "The time when the heal action needs to commence. This allows a delay to be added",
              "type": "string"
            },
            "additionalParms": {
              "description": "Additional parameters to be sent to the heal action as name value pairs",
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "state": {
              "description": "Tracks the lifecycle status of the migrate request.",
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ],
          "required": [
            "resourceFunction",
            "cause",
            "degreeOfHealing"
          ]
        }
      }
    }
  ],
  "HealPolicyRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "HealPolicyRef.schema.json",
      "title": "HealPolicyRef",
      "definitions": {
        "HealPolicyRef": {
          "$id": "#HealPolicyRef",
          "description": "Heal policy reference.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "HourPeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "HourPeriod.schema.json",
      "title": "HourPeriod",
      "definitions": {
        "HourPeriod": {
          "$id": "#HourPeriod",
          "type": "object",
          "properties": {
            "endHour": {
              "type": "string",
              "description": "The time when the status ends applying"
            },
            "startHour": {
              "type": "string",
              "description": "The time when the status starts applying"
            }
          }
        }
      }
    }
  ],
  "Hub": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Hub.schema.json",
      "title": "Hub",
      "definitions": {
        "Hub": {
          "$id": "#Hub",
          "description": "A Hub is used to subscribe to an event notification",
          "type": "object",
          "required": [
            "id",
            "callback"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique-id for your subscription - referenced when updating or deleting a subscription",
              "examples": [
                "4aafacbd-11ff-4dc8-b445-305f2215715f",
                "2334bc59-726e-4d34-ab96-f50e0561412f"
              ]
            },
            "callback": {
              "type": "string",
              "format": "uri",
              "description": "The URI that will be POSTed to when a notification is triggered",
              "examples": [
                "http://host/resource/id/listener"
              ]
            },
            "query": {
              "type": "string",
              "description": "This is a query string used to filter notifications in the context of the notifier",
              "examples": [
                "status=active"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "IOTObservationAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IOTObservationAnalytics.schema.json",
      "title": "IOTObservationAnalytics",
      "definitions": {
        "IOTObservationAnalytics": {
          "$id": "#IOTObservationAnalytics",
          "type": "object",
          "properties": {
            "observationStartDatetime": {
              "type": "string",
              "format": "date-time",
              "description": "End datetime of the observation"
            },
            "observationSentDatetime": {
              "type": "string",
              "format": "date-time",
              "description": "Datetime when the observation was sent to recepient"
            },
            "observationReceivedDatetime": {
              "type": "string",
              "format": "date-time",
              "description": "Datetime when the observation was received by recepient"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "IOTPropertyAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IOTPropertyAnalytics.schema.json",
      "title": "IOTPropertyAnalytics",
      "definitions": {
        "IOTPropertyAnalytics": {
          "$id": "#IOTPropertyAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ImpactEntityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ImpactEntityRef.schema.json",
      "title": "ImpactEntityRef",
      "definitions": {
        "ImpactEntityRef": {
          "$id": "#ImpactEntityRef",
          "description": "Defines the entities (product, service, resource, and other related objects) which will be impacted while the change \nrequest is executed.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description and analysis of the impact of the change request on the Product, Service or Resource."
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the impacted party, it could be a party reference or a party role reference."
            },
            "id": {
              "type": "string",
              "description": "Identifier of impacted entity."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ImpactPattern": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ImpactPattern.schema.json",
      "title": "ImpactPattern",
      "definitions": {
        "ImpactPattern": {
          "$id": "#ImpactPattern",
          "type": "object",
          "description": "Define the patterns of impact (optional), such as other service characteristics- Used when defining impact through another pattern than the pre-defined attributes",
          "properties": {
            "description": {
              "type": "string",
              "description": "Basic description of the impact pattern"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "A generic list of any type of elements. Used for extensions or loose element encapsulation from other namespaces"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ImpactedBucket": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ImpactedBucket.schema.json",
      "title": "ImpactedBucket",
      "definitions": {
        "ImpactedBucket": {
          "$id": "#ImpactedBucket",
          "type": "object",
          "description": "A resource that references other buckets that have been impacted by the action of type TopupBalance,AdjustBalance,TransferBalance or ReserveBalance",
          "properties": {
            "name": {
              "type": "string",
              "description": "Friendly name to identify the bucket"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the balance managed by the bucket"
            },
            "amountBefore": {
              "description": "Indicates the amount remaiing on the impacted bucket",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "amountAfter": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Indicates the amount after on the impacted bucket after the action has completed."
            },
            "requestedDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction request was received in the server"
            },
            "confirmationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the deduction was confirmed in the server"
            },
            "bucket": {
              "description": "A reference to the bucket impacted by the request or the value itself.",
              "$ref": "BucketRef.schema.json#BucketRef"
            },
            "item": {
              "type": "array",
              "items": {
                "description": "A reference to an array of ImpactedBucketItem that capture the details of the changes to the ImpactedBucket.",
                "$ref": "ImpactedBucketItem.schema.json#ImpactedBucketItem"
              },
              "minItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ImpactedBucketItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ImpactedBucketItem.schema.json",
      "title": "ImpactedBucketItem",
      "definitions": {
        "ImpactedBucketItem": {
          "$id": "#ImpactedBucketItem",
          "description": "a resource used by the ImpactedBucket resource to capture the impact of a ImpactedBucket",
          "type": "object",
          "properties": {
            "reason": {
              "type": "string",
              "description": "Text describing the reason for the action/task"
            },
            "description": {
              "type": "string",
              "description": "Description of the recharge operation"
            },
            "amount": {
              "description": "Indicate the amount on the bucket",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            },
            "name": {
              "type": "string",
              "description": "This represents the transaction activity. e.g topup, bonus, additional bonus, tax, fees, and so on"
            },
            "itemType": {
              "type": "string",
              "description": "This indicates whether the action led to the bucket being incremented or decremented.eg credit or debit"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ImportJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ImportJob.schema.json",
      "title": "ImportJob",
      "definitions": {
        "ImportJob": {
          "$id": "#ImportJob",
          "description": "Represents a task used to import resources from a file",
          "type": "object",
          "properties": {
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was completed"
            },
            "contentType": {
              "type": "string",
              "description": "Indicates the format of the imported data"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was created"
            },
            "errorLog": {
              "type": "string",
              "description": "Reason for failure if status is failed"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Reference of the import job"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the import job"
            },
            "path": {
              "type": "string",
              "description": "URL of the root resource where the content of the file specified by the import job must be applied"
            },
            "status": {
              "description": "Status of the import job (not started, running, succeeded, failed)",
              "$ref": "../Common/JobStateType.schema.json#JobStateType"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "URL of the file containing the data to be imported"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Incident": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Incident.schema.json",
      "title": "Incident",
      "definitions": {
        "Incident": {
          "$id": "#Incident",
          "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product)",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "The description of the incident."
            },
            "name": {
              "type": "string",
              "description": "The name of the incident."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "IndicatorType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IndicatorType.schema.json",
      "title": "IndicatorType",
      "definitions": {
        "IndicatorType": {
          "$id": "#IndicatorType",
          "description": "This is enumeration for Indicator Type",
          "type": "string",
          "enum": [
            "string",
            "int",
            "float",
            "double"
          ]
        }
      }
    }
  ],
  "Individual": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Individual.schema.json",
      "title": "Individual",
      "definitions": {
        "Individual": {
          "$id": "#Individual",
          "type": "object",
          "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
          "properties": {
            "gender": {
              "type": "string",
              "description": "Gender"
            },
            "placeOfBirth": {
              "type": "string",
              "description": "Reference to the place where the individual was born"
            },
            "countryOfBirth": {
              "type": "string",
              "description": "Country where the individual was born"
            },
            "nationality": {
              "type": "string",
              "description": "Nationality"
            },
            "maritalStatus": {
              "type": "string",
              "description": "Marital status (married, divorced, widow ...)"
            },
            "birthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Birth date"
            },
            "deathDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of death"
            },
            "title": {
              "type": "string",
              "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
            },
            "aristocraticTitle": {
              "type": "string",
              "description": "e.g. Baron, Graf, Earl,…"
            },
            "generation": {
              "type": "string",
              "description": "e.g.. Sr, Jr, III (the third),…"
            },
            "givenName": {
              "type": "string",
              "description": "First name of the individual"
            },
            "preferredGivenName": {
              "type": "string",
              "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
            },
            "familyNamePrefix": {
              "type": "string",
              "description": "Family name prefix"
            },
            "familyName": {
              "type": "string",
              "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
            },
            "legalName": {
              "type": "string",
              "description": "Legal name or birth name (name one has for official purposes)"
            },
            "middleName": {
              "type": "string",
              "description": "Middles name or initial"
            },
            "fullName": {
              "type": "string",
              "description": "Full name flatten (first, middle, and last names)"
            },
            "formattedName": {
              "type": "string",
              "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…)"
            },
            "location": {
              "type": "string",
              "description": "Temporary current location od the individual (may be used if the individual has approved its sharing)"
            },
            "status": {
              "description": "Status of the individual",
              "$ref": "../EngagedParty/IndividualStateType.schema.json#IndividualStateType"
            },
            "otherName": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/OtherNameIndividual.schema.json#OtherNameIndividual"
              }
            },
            "individualIdentification": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/IndividualIdentification.schema.json#IndividualIdentification"
              }
            },
            "disability": {
              "type": "array",
              "items": {
                "$ref": "../Customer/Disability.schema.json#Disability"
              }
            },
            "languageAbility": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/LanguageAbility.schema.json#LanguageAbility"
              }
            },
            "skill": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/Skill.schema.json#Skill"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Party.schema.json#Party"
            },
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "IndividualIdentification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IndividualIdentification.schema.json",
      "title": "IndividualIdentification",
      "definitions": {
        "IndividualIdentification": {
          "$id": "#IndividualIdentification",
          "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
          "type": "object",
          "properties": {
            "identificationId": {
              "type": "string",
              "description": "Identifier"
            },
            "issuingAuthority": {
              "type": "string",
              "description": "Authority which has issued the identifier, such as: social security, town hall"
            },
            "issuingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the identifier was issued"
            },
            "identificationType": {
              "type": "string",
              "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the identification information is valid."
            },
            "attachment": {
              "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "IndividualStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IndividualStateType.schema.json",
      "title": "IndividualStateType",
      "definitions": {
        "IndividualStateType": {
          "$id": "#IndividualStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the individual",
          "enum": [
            "initialized",
            "validated",
            "deceased"
          ]
        }
      }
    }
  ],
  "InitiatePayment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "InitiatePayment.schema.json",
      "title": "InitiatePayment",
      "definitions": {
        "InitiatePayment": {
          "$id": "#InitiatePayment",
          "required": [
            "authorizedPayment"
          ],
          "description": "Task resource for operation initiate payment",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "InitiatePaymentDate ": {
              "description": "date of the operation initiate payment",
              "type": "string",
              "format": "date-time"
            },
            "InitiatedPaymentDate ": {
              "description": "date when the operation was initiated",
              "type": "string",
              "format": "date-time"
            },
            "authorizedPayment ": {
              "description": "Related authorized payment to this operation.",
              "$ref": "../Customer/AuthorizePaymentRef.schema.json#AuthorizePaymentRef"
            },
            "initiatedPayment ": {
              "description": "Related payment to this operation.",
              "$ref": "../Customer/PaymentRefOrValue.schema.json#PaymentRefOrValue"
            }
          }
        }
      }
    }
  ],
  "IntegerArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IntegerArrayCharacteristic.schema.json",
      "title": "IntegerArrayCharacteristic",
      "definitions": {
        "IntegerArrayCharacteristic": {
          "$id": "#IntegerArrayCharacteristic",
          "description": "A characteristic which the value is a number array of format integer",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "IntegerArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IntegerArrayCharacteristicValueSpecification.schema.json",
      "title": "IntegerArrayCharacteristicValueSpecification",
      "definitions": {
        "IntegerArrayCharacteristicValueSpecification": {
          "$id": "#IntegerArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a number array of format integer",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "IntegerCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IntegerCharacteristic.schema.json",
      "title": "IntegerCharacteristic",
      "definitions": {
        "IntegerCharacteristic": {
          "$id": "#IntegerCharacteristic",
          "description": "A characteristic which value is an integer number",
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "IntegerCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IntegerCharacteristicValueSpecification.schema.json",
      "title": "IntegerCharacteristicValueSpecification",
      "definitions": {
        "IntegerCharacteristicValueSpecification": {
          "$id": "#IntegerCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is an integer number",
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "InteractionItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "InteractionItem.schema.json",
      "title": "InteractionItem",
      "definitions": {
        "InteractionItem": {
          "$id": "#InteractionItem",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the interaction item"
            },
            "itemDate": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Moment this item is referred"
            },
            "reason": {
              "type": "string",
              "description": "Reason why this item is referred"
            },
            "resolution": {
              "type": "string",
              "description": "Resolution of the interaction item"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the interaction item is created in the system"
            },
            "item": {
              "$ref": "../Common/RelatedEntity.schema.json#RelatedEntityRefOrValue",
              "description": "RelatedEntity defines a reference to any entity. It uses polymorphism in order to let the API client know how to treat the element, as the entity type is not known beforehand."
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/Channel.schema.json#RelatedChannel"
              },
              "description": "Where the interaction took place (e.g.: web, mobile app, store, kiosk, etc.)"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "InteractionRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "InteractionRelationship.schema.json",
      "title": "InteractionRelationship",
      "definitions": {
        "InteractionRelationship": {
          "$id": "#InteractionRelationship",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the referenced party interaction"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the referenced party interaction"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of the interaction relationship"
            }
          }
        }
      }
    }
  ],
  "InvoiceLineItemAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "InvoiceLineItemAnalytics.schema.json",
      "title": "InvoiceLineItemAnalytics",
      "definitions": {
        "InvoiceLineItemAnalytics": {
          "$id": "#InvoiceLineItemAnalytics",
          "type": "object",
          "properties": {
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "subscriptionStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "subscriptionCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Subscriber creation date"
            },
            "subscriptionActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "IoTService": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IotService.schema.json",
      "title": "IotService",
      "definitions": {
        "IotService": {
          "$id": "#IotService",
          "description": "#TODO",
          "type": "object",
          "properties": {
            "dataAccessEndPoint": {
              "type": "array",
              "items": {
                "$ref": "../Resource/DataAccessEndpoint.schema.json#DataAccessEndpoint"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Service/Service.schema.json#Service"
            }
          ]
        }
      }
    }
  ],
  "IotDataEvent": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IotDataEvent.schema.json",
      "title": "IotDataEvent",
      "description": "#TODO",
      "definitions": {
        "IotDataEvent": {
          "$id": "#IotDataEvent",
          "description": "#TODO",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/BaseEvent.json#BaseEvent"
            }
          ],
          "required": []
        }
      }
    }
  ],
  "IotDevice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IotDevice.schema.json",
      "title": "IotDevice",
      "description": "An apparatus (hardware + software + firmware) intended to accomplish a particular task (sensing the environment, actuating, etc.).",
      "definitions": {
        "IotDevice": {
          "$id": "#IotDevice",
          "description": "#TODO",
          "type": "object",
          "properties": {
            "dataAccessEndPoint": {
              "type": "array",
              "items": {
                "$ref": "DataAccessEndpoint.schema.json#DataAccessEndpoint"
              }
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Resource/CategoryType.schema.json#CategoryType"
              }
            },
            "location": {
              "$ref": "GeoLocation.schema.json#GeoLocation"
            },
            "configuration": {
              "ref": "Configuration.schema.json#Configuration"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/Device.json#Device"
            }
          ],
          "required": [
            "id",
            "type",
            "category",
            "controlledProperty"
          ]
        }
      }
    }
  ],
  "IotDeviceSpecification": [
    {
      "$schema": "http://json-schema.org/schema#",
      "$id": "https://fiware.github.io/dataModels/specs/Device/Device/schema.json",
      "title": "IotDeviceSpecification",
      "description": "#TODO",
      "definitions": {
        "IotDeviceSpecification": {
          "$id": "#IotDeviceSpecification",
          "description": "#TODO",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Resource/ResourceSpecification.json#ResourceSpecification"
            }
          ]
        }
      }
    }
  ],
  "IotManagementEvent": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IotManagementEvent.schema.json",
      "title": "IotManagementEvent",
      "definitions": {
        "IotManagementEvent": {
          "$id": "#IotManagementEvent",
          "description": "Generic IotManagementEvent structure used to define commonalities between sub concepts of PartyIotManagementEvent and Financial IotManagementEvent.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/BaseEvent.schema.json#BaseEvent"
            }
          ]
        }
      }
    }
  ],
  "IotServiceSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IotServiceSpecification.schema.json",
      "title": "IotServiceSpecification",
      "definitions": {
        "IotServiceSpecification": {
          "$id": "#IotServiceSpecification",
          "description": "#TODO",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Service/ServiceSpecification.schema.json#ServiceSpecification"
            }
          ]
        }
      }
    }
  ],
  "IssuerRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "IssuerRef.schema.json",
      "title": "IssuerRef",
      "definitions": {
        "IssuerRef": {
          "$id": "#IssuerRef",
          "description": "Issuer reference. The issuer is the party role who will issue the settlement note.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the issuer"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the issuer"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ItemRef.schema.json",
      "title": "ItemRef",
      "definitions": {
        "ItemRef": {
          "$id": "#ItemRef",
          "description": "Describes a specific item contained in a parent element",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "entityHref": {
              "type": "string",
              "description": "Hypertext Reference of the parent element."
            },
            "entityId": {
              "type": "string",
              "description": "Unique identifier of the parent element."
            },
            "itemId": {
              "type": "string",
              "description": "Unique identifier of the considered item."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "JeopardyAlert": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "JeopardyAlert.schema.json",
      "title": "JeopardyAlert",
      "definitions": {
        "JeopardyAlert": {
          "$id": "#JeopardyAlert",
          "description": "A JeopardyAlert represents a predicted exception during a process that may cause a risk to complete successfully the process.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "identifier of the JeopardyAlert"
            },
            "alertDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date that the alert issued"
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the jeopardy alert"
            },
            "jeopardyType": {
              "type": "string",
              "description": "A string represents the type of jeopardy/risk like Normal, Hazard, Critical, ..."
            },
            "exception": {
              "type": "string",
              "description": " The exception associated with this jeopardy alert"
            },
            "message": {
              "type": "string",
              "description": "A string represents the message of the alert"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "JobStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "JobStateType.schema.json",
      "title": "JobStateType",
      "definitions": {
        "JobStateType": {
          "$id": "#JobStateType",
          "type": "string",
          "description": "Valid values for the state of a batch job (e.g. catalog import)",
          "enum": [
            "Not Started",
            "Running",
            "Succeeded",
            "Failed"
          ]
        }
      }
    }
  ],
  "LanguageAbility": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LanguageAbility.schema.json",
      "title": "LanguageAbility",
      "definitions": {
        "LanguageAbility": {
          "$id": "#LanguageAbility",
          "type": "object",
          "description": "Ability of an individual to understand or converse in a language.",
          "properties": {
            "languageCode": {
              "type": "string",
              "description": "Language code (RFC 5646)"
            },
            "languageName": {
              "type": "string",
              "description": "Language name"
            },
            "isFavouriteLanguage": {
              "type": "boolean",
              "description": "A “true” value specifies whether the language is considered by the individual as his favourite one"
            },
            "writingProficiency": {
              "type": "string",
              "description": "Writing proficiency evaluated for this language"
            },
            "readingProficiency": {
              "type": "string",
              "description": "Reading proficiency evaluated for this language"
            },
            "speakingProficiency": {
              "type": "string",
              "description": "Speaking proficiency evaluated for this language"
            },
            "listeningProficiency": {
              "type": "string",
              "description": "Listening proficiency evaluated for this language"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "License": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "License.schema.json",
      "title": "License",
      "definitions": {
        "License": {
          "$id": "#License",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      }
    }
  ],
  "LineString": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LineString.schema.json",
      "title": "LineString",
      "definitions": {
        "LineString": {
          "$id": "#LineString",
          "type": "object",
          "description": "GeoJSON: A collection of Points forming a connected line",
          "required": [
            "type",
            "coordinates"
          ],
          "properties": {
            "type": {
              "enum": [
                "LineString"
              ]
            },
            "coordinates": {
              "$ref": "../Common/GeoJSON.schema.json#lineString"
            }
          }
        }
      }
    }
  ],
  "LocationAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LocationAnalytics.schema.json",
      "title": "LocationAnalytics",
      "definitions": {
        "LocationAnalytics": {
          "$id": "#LocationAnalytics",
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "manufacturedDated": {
              "type": "string",
              "format": "date-time",
              "description": "manufactoring date"
            },
            "purchaseDate": {
              "type": "string",
              "format": "date-time",
              "description": "customer purchase date"
            },
            "activationDate": {
              "type": "string",
              "format": "date-time",
              "description": "date the device was activated"
            },
            "firstUseDate": {
              "type": "string",
              "format": "date-time",
              "description": "date the device was first used on the network"
            },
            "guranteeExpirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "the date the device guarantee expires"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "LocationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LocationCharacteristic.schema.json",
      "title": "LocationCharacteristic",
      "definitions": {
        "LocationCharacteristic": {
          "$id": "#LocationCharacteristic",
          "description": "Name/value pairs, used to extra characterized the Area (e.g. if a standard\ncode set has been defined for the GeographicArea type, etc.)",
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "LocationCommons": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LocationCommons.schema.json",
      "title": "LocationCommons",
      "definitions": {
        "LocationCommons": {
          "type": "object",
          "$id": "#LocationCommons",
          "properties": {
            "location": {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            },
            "address": {
              "$ref": "../Common/Address.schema.json#Address"
            },
            "areaServed": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "LogicalResource": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LogicalResource.schema.json",
      "title": "LogicalResource",
      "definitions": {
        "LogicalResource": {
          "type": "object",
          "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
          "properties": {
            "value": {
              "type": "string",
              "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
            }
          },
          "allOf": [
            {
              "$ref": "./Resource.schema.json#Resource"
            }
          ]
        }
      }
    }
  ],
  "LogicalResourceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LogicalResourceRef.schema.json",
      "title": "LogicalResourceRef",
      "definitions": {
        "LogicalResourceRef": {
          "$id": "#LogicalResourceRef",
          "description": "reference to the LogicalResource eg MSISDN",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The value of the logical resource"
            }
          },
          "allOf": [
            {
              "$ref": "ResourceRef.schema.json#ResourceRef"
            }
          ]
        }
      }
    }
  ],
  "LogicalResourceSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LogicalResourceSpecification.schema.json",
      "title": "LogicalResourceSpecification",
      "definitions": {
        "LogicalResourceSpecification": {
          "$id": "#LogicalResourceSpecification",
          "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a LogicalResource.",
          "type": "object",
          "allOf": [
            {
              "$ref": "ResourceSpecification.schema.json#ResourceSpecification"
            }
          ]
        }
      }
    }
  ],
  "LoginPasswordCredential": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoginPasswordCredential.schema.json",
      "title": "- ",
      "definitions": {
        "LoginPasswordCredential": {
          "$id": "#LoginPasswordCredential",
          "description": "A Credential based on a login and a password.",
          "type": "object",
          "properties": {
            "login": {
              "type": "string",
              "description": "credential login"
            },
            "password": {
              "type": "string",
              "description": "credential password - must be in write only"
            }
          },
          "allOf": [
            {
              "$ref": "../engagedParty/Credential.schema.json#Credential"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyAccount.schema.json",
      "title": "LoyaltyAccount",
      "definitions": {
        "LoyaltyAccount": {
          "$id": "#LoyaltyAccount",
          "description": "A loyalty account, containing loyalty balances.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the account."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty members loyalty account."
            },
            "loyaltyProgramProduct": {
              "$ref": "../Product/LoyaltyProgramProductRef.schema.json#LoyaltyProgramProductRef"
            }
          }
        }
      }
    }
  ],
  "LoyaltyAccountRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyAccountRef.schema.json",
      "title": "LoyaltyAccountRef",
      "definitions": {
        "LoyaltyAccountRef": {
          "$id": "#LoyaltyAccountRef",
          "description": "Reference to a loyalty account.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyAction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyAction.schema.json",
      "title": "LoyaltyAction",
      "definitions": {
        "LoyaltyAction": {
          "$id": "#LoyaltyAction",
          "description": "Contains information on a loyalty action that should be applied should certain conditions be met for a loyalty rule and program.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty event type."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            },
            "actionType": {
              "type": "string",
              "description": "The type of loyalty action.",
              "enum": [
                "LoyaltyEarn",
                "CustomerOrder",
                "BusinessInteraction"
              ]
            },
            "actionAttributes": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#Any",
              "description": "Additional attributes required to perform the action. These attributes will depend on the type of the loyalty action. For example, if it is a LoyaltyEarn action, there will be a “quantity” attribute value pair indicating how many points should be earned."
            },
            "body": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#Any",
              "description": "The body if the request that is made when this action i executed. The body is assumed to be of type text/json. Any tokens denoted with {} will be replaced by attributes present in: Member profile, actionAttributes or event attributes in the loyalty event request."
            },
            "headers": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#Any",
              "description": "The HTTP headers that is added to the action call."
            },
            "version": {
              "type": "string",
              "description": "A string that identifies the version of the loyalty action."
            },
            "commonName": {
              "type": "string",
              "description": "A user-friendly identifier of the loyalty execution point."
            },
            "description": {
              "type": "string",
              "description": "A free-form description of the loyalty execution point."
            },
            "action": {
              "type": "string",
              "description": "The HTTP operation to be used when calling the endpoint",
              "enum": [
                "POST",
                "PUT",
                "GET",
                "PATCH",
                "DELETE"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint to call to trigger a BusinessInteraction, CustomerOrder or LoyaltyEarn."
            }
          }
        }
      }
    }
  ],
  "LoyaltyActionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyActionRef.schema.json",
      "title": "LoyaltyActionRef",
      "definitions": {
        "LoyaltyActionRef": {
          "$id": "#LoyaltyActionRef",
          "description": "A reference to a loyalty action.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty action."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty action."
            }
          }
        }
      }
    }
  ],
  "LoyaltyBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyBalance.schema.json",
      "title": "LoyaltyBalance",
      "definitions": {
        "LoyaltyBalance": {
          "$id": "#LoyaltyBalance",
          "description": "A loyalty balance, containing a balance unit and value.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty balance."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty member’s loyalty balance."
            },
            "quantity": {
              "type": "object",
              "description": "Unit and value of the balance.",
              "$ref": "../Common/Money.schema.json#Money"
            },
            "loyaltyProgramMember": {
              "type": "object",
              "description": "Reference to the loyaltyProgramMember to whom the loyaltyAccount belongs.",
              "$ref": "../Product/LoyaltyProgramMemberRef.schema.json#LoyaltyProgramMemberRef"
            },
            "validFor": {
              "type": "object",
              "description": "The validity period in which loyalty can be burned using the account.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          }
        }
      }
    }
  ],
  "LoyaltyCondition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyCondition.schema.json",
      "title": "LoyaltyCondition",
      "definitions": {
        "LoyaltyCondition": {
          "$id": "#LoyaltyCondition",
          "description": "A condition, comprised of a attribute that will be tested against a value.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty condition."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            },
            "attribute": {
              "type": "string",
              "description": "The attribute to evaluate."
            },
            "operator": {
              "type": "string",
              "description": "Comparison operator to be used in the evaluation."
            },
            "value": {
              "type": "string",
              "description": "The value of the attribute to be evaluated."
            }
          }
        }
      }
    }
  ],
  "LoyaltyConditionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyConditionRef.schema.json",
      "title": "LoyaltyConditionRef",
      "definitions": {
        "LoyaltyConditionRef": {
          "$id": "#LoyaltyConditionRef",
          "description": "A reference to a loyalty condition.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty condition."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty condition."
            }
          }
        }
      }
    }
  ],
  "LoyaltyEvent": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyEvent.schema.json",
      "title": "LoyaltyEvent",
      "definitions": {
        "LoyaltyEvent": {
          "$id": "#LoyaltyEvent",
          "description": "A loyalty event notification.",
          "type": "object",
          "properties": {
            "eventId": {
              "$ref": "../Product/LoyaltyProgramProductRef.schema.json#LoyaltyProgramProductRef"
            },
            "eventType": {
              "type": "string",
              "description": "The incoming loyalty event type."
            },
            "eventTime": {
              "type": "string",
              "description": "The time that the event was received."
            },
            "memberId": {
              "type": "string",
              "description": "The loyalty program member ID associated with the event."
            },
            "event": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#Any",
              "description": "The event attributes."
            }
          }
        }
      }
    }
  ],
  "LoyaltyEventType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyEventType.schema.json",
      "title": "LoyaltyEventType",
      "definitions": {
        "LoyaltyEventType": {
          "$id": "#LoyaltyEventType",
          "description": "An event type used to match filter incoming loyalty events.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty event type."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            },
            "eventType": {
              "type": "string",
              "description": "The type of loyalty event expected to trigger the loyalty rule evaluation, e.g. a CustomerOrder or an Invoice. The eventType should be unique to prevent existing resources not being reused. An eventType that already exists will result in a 422 error."
            }
          }
        }
      }
    }
  ],
  "LoyaltyEventTypeRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyEventTypeRef.schema.json",
      "title": "LoyaltyEventTypeRef",
      "definitions": {
        "LoyaltyEventTypeRef": {
          "$id": "#LoyaltyEventTypeRef",
          "description": "A reference to a loyalty event type.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty event type."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            }
          }
        }
      }
    }
  ],
  "LoyaltyExecutionPoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyExecutionPoint.schema.json",
      "title": "LoyaltyExecutionPoint",
      "definitions": {
        "LoyaltyAccount": {
          "$id": "#LoyaltyAccount",
          "description": "A record of a loyalty action that was applied.",
          "type": "object",
          "title": "LoyaltyExecutionPoint",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty event type."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            },
            "type": {
              "type": "string",
              "description": "The type of loyalty action.",
              "enum": [
                "LoyaltyEarn",
                "CustomerOrder",
                "BusinessInteraction"
              ]
            },
            "actionAttributes": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#/definitions/Any",
              "description": "Additional attributes required to perform the action. These attributes will depend on the type of the loyalty action. For example, if it is a LoyaltyEarn action, there will be a “quantity” attribute value pair indicating how many points should be earned."
            },
            "body": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#/definitions/Any",
              "description": "The body if the request that is made when this action i executed. The body is assumed to be of type text/json. Any tokens denoted with {} will be replaced by attributes present in: Member profile, actionAttributes or event attributes in the loyalty event request."
            },
            "headers": {
              "type": "object",
              "$ref": "../Common/Any.schema.json#/definitions/Any",
              "description": "The HTTP headers that is added to the action call."
            },
            "version": {
              "type": "string",
              "description": "A string that identifies the version of the loyalty action."
            },
            "commonName": {
              "type": "string",
              "description": "A user-friendly identifier of the loyalty execution point."
            },
            "description": {
              "type": "string",
              "description": "A free-form description of the loyalty execution point."
            },
            "action": {
              "type": "string",
              "description": "The HTTP operation to be used when calling the endpoint",
              "enum": [
                "POST",
                "PUT",
                "GET",
                "PATCH",
                "DELETE"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint to call to trigger a BusinessInteraction, CustomerOrder or LoyaltyEarn."
            },
            "datetime": {
              "type": "string",
              "description": "The timestamp that the action was applied.",
              "format": "date-time"
            }
          }
        }
      }
    }
  ],
  "LoyaltyPaymentMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyPaymentMethod.schema.json",
      "title": "LoyaltyPaymentMethod",
      "definitions": {
        "LoyaltyPaymentMethod": {
          "$id": "#LoyaltyPaymentMethod",
          "description": "Reference to an account in a loyalty system that could be used to perform the payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "loyaltyAccount": {
              "$ref": "../Product/LoyaltyAccountRef.schema.json#LoyaltyAccountRef"
            },
            "@type": {
              "type": "string",
              "enum": [
                "loyaltyPaymentMethod"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyProgramMember": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramMember.schema.json",
      "title": "LoyaltyProgramMember",
      "definitions": {
        "LoyaltyProgramMember": {
          "$id": "#LoyaltyProgramMember",
          "description": "A person or group that opts in to a loyalty program.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty program member."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty program member."
            },
            "name": {
              "type": "string",
              "description": "The loyalty members name."
            },
            "status": {
              "type": "string",
              "description": "A free-form field in which the members status may be captured, e.g. [active], [suspended], .etc."
            },
            "ValidFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period during which the loyalty member is valid for."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyProgramMemberRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramMemberRef.schema.json",
      "title": "LoyaltyProgramMemberRef",
      "definitions": {
        "LoyaltyProgramMemberRef": {
          "$id": "#LoyaltyProgramMemberRef",
          "description": "Reference to a loyalty member.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty program member."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty program member."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyProgramProduct": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramProduct.schema.json",
      "title": "LoyaltyProgramProduct",
      "definitions": {
        "LoyaltyProgramProduct": {
          "$id": "#LoyaltyProgramProduct",
          "description": "An instance of a loyalty program specification, linked to a specified loyalty member.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty program product."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty account."
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which the product is known and distinguished from other products."
            },
            "description": {
              "type": "string",
              "description": "An explanation of what the product is."
            },
            "productStatus": {
              "type": "string",
              "description": "The condition of the product, such as planned, designed, activated, disconnected."
            },
            "characteristic": {
              "type": "array",
              "description": "Name value pairs of product characteristics.",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "loyaltyProgramProductSpec": {
              "type": "object",
              "$ref": "../Product/LoyaltyProgramProductSpecRef.schema.json#LoyaltyProgramProductSpecRef"
            },
            "loyaltyAccount": {
              "type": "object",
              "$ref": "../Product/LoyaltyAccountRef.schema.json#LoyaltyAccountRef"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyProgramProductRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramProductRef.schema.json",
      "title": "LoyaltyProgramProductRef",
      "definitions": {
        "LoyaltyProgramProductRef": {
          "$id": "#LoyaltyProgramProductRef",
          "type": "object",
          "description": "A reference to a loyalty product.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty program product."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty program product."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "LoyaltyProgramProductSpec": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramProductSpec.schema.json",
      "title": "LoyaltyProgramProductSpec",
      "definitions": {
        "LoyaltyProgramProductSpec": {
          "$id": "#LoyaltyProgramProductSpec",
          "type": "object",
          "description": "A reference to a loyalty program specification.",
          "properties": {
            "brand": {
              "type": "string",
              "description": "The manufacturer or trademark of the specification."
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the product specification is."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for the product specification."
            },
            "href": {
              "type": "string",
              "description": "A reference to the product specification."
            },
            "lifeCycleStatus": {
              "type": "string",
              "description": "The condition of the product specification, such as active, inactive, planned."
            },
            "name": {
              "type": "string",
              "description": "The name of the product specification."
            },
            "needsLoyaltyAccount": {
              "type": "boolean",
              "description": "A narrative that explains in detail what the product specification is."
            },
            "productNumber": {
              "type": "string",
              "productNumber": "An identification number assigned to uniquely identify the specification."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          }
        }
      }
    }
  ],
  "LoyaltyProgramProductSpecRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyProgramProductSpecRef.schema.json",
      "title": "LoyaltyProgramProductSpecRef",
      "definitions": {
        "LoyaltyProgramProductSpecRef": {
          "$id": "#LoyaltyProgramProductSpecRef",
          "description": "A reference to a loyalty program specification.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the product specification."
            },
            "href": {
              "type": "string",
              "description": "A reference to the product specification."
            }
          }
        }
      }
    }
  ],
  "LoyaltyRule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyRule.schema.json",
      "title": "LoyaltyRule",
      "definitions": {
        "LoyaltyRule": {
          "$id": "#LoyaltyRule",
          "description": "Loyalty rule, containing conditions, event types and actions.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty rule."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty rule."
            },
            "isCNF": {
              "type": "boolean",
              "description": "This is a Boolean attribute that, if true, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If the value of this attribute is false, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs)."
            },
            "hasSubRules": {
              "type": "boolean",
              "description": "A Boolean attribute that signifies whether this loyalty rule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
            },
            "isMandatoryEvaluation": {
              "type": "boolean",
              "description": "A Boolean attribute that, if true, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If the Mandatory property value of this entity is false, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
            },
            "usage": {
              "type": "string",
              "description": "A free-form string attribute that recommends how this policy object should be used."
            },
            "keywords": {
              "type": "string",
              "description": "A string attribute that defines a set of one or more keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
            },
            "policyName": {
              "type": "string",
              "description": "A generic naming attribute that can be used to identify different policy entities."
            },
            "commonName": {
              "type": "string",
              "description": "A user-friendly identifier of the loyalty rule."
            },
            "description": {
              "type": "string",
              "description": "A free-form description of the rule."
            },
            "loyaltyEventType": {
              "type": "array",
              "description": "References to linked event types.",
              "items": {
                "$ref": "../Product/LoyaltyEventTypeRef.schema.json#LoyaltyEventTypeRef"
              }
            },
            "loyaltyCondition": {
              "type": "array",
              "description": "References to linked conditions.",
              "items": {
                "$ref": "../Product/LoyaltyConditionRef.schema.json#LoyaltyConditionRef"
              }
            },
            "loyaltyAction": {
              "type": "array",
              "description": "References to linked actions.",
              "items": {
                "$ref": "../Product/LoyaltyActionRef.schema.json#LoyaltyActionRef"
              }
            }
          }
        }
      }
    }
  ],
  "LoyaltyRuleAction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyRuleAction.schema.json",
      "title": "LoyaltyRuleAction",
      "definitions": {
        "LoyaltyRuleAction": {
          "$id": "#LoyaltyRuleAction",
          "description": "Resource containing a the ID of a action to link to a loyalty rule.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty action."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty action."
            }
          }
        }
      }
    }
  ],
  "LoyaltyRuleCondition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyRuleCondition.schema.json",
      "title": "LoyaltyRuleCondition",
      "definitions": {
        "LoyaltyRuleCondition": {
          "$id": "#LoyaltyRuleCondition",
          "description": "Resource containing a the ID of a condition to link to a loyalty rule.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty condition."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty condition."
            }
          }
        }
      }
    }
  ],
  "LoyaltyRuleEventType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "LoyaltyRuleEventType.schema.json",
      "title": "LoyaltyRuleEventType",
      "definitions": {
        "LoyaltyRuleEventType": {
          "$id": "#LoyaltyRuleEventType",
          "description": "Resource containing a the ID of a event type to link to a loyalty rule.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for the loyalty event type."
            },
            "href": {
              "type": "string",
              "description": "A reference to the loyalty event type."
            }
          }
        }
      }
    }
  ],
  "MEntity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MEntity.schema.json",
      "title": "MEntity",
      "definitions": {
        "MEntity": {
          "$id": "#MEntity",
          "description": "MEntity represents an entity that describes the common set of attributes shared by all concrete entities (e.g. Resource, Service, ..) in the Entity Inventory.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "free-text description of the entity"
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date from which the entity is effective"
            },
            "endDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date till the entity is effective"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether an entity represents a single entity (false), or a bundle of entities(true)."
            },
            "isExternal": {
              "type": "boolean",
              "description": "isExternal determines whether an entity represents an external entity in the inventory."
            },
            "status": {
              "type": "string",
              "description": "The life cycle state of the entity."
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date that the entity status changed"
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the entity"
            },
            "context": {
              "type": "string",
              "description": "A string used to give a context to the entity"
            },
            "version": {
              "type": "string",
              "description": "A field that identifies the specific version of an instance of an entity."
            },
            "entitySpecification": {
              "$ref": "../Common/EntitySpecificationRef.schema.json#/definitions/EntitySpecificationRef"
            },
            "entityRelationship": {
              "type": "array",
              "items": {
                "$ref": "EntityRelationship.schema.json#/definitions/EntityRelationship"
              },
              "description": "A list of entities related to this entity"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              },
              "description": "Attachments that may be of relevance to this entity, such as picture, document, media"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "MacAddressType": [
    {
      "$schema": "http://json-schema.org/schema#",
      "$id": "MacAddressType.schema.json",
      "title": "MacAddressType",
      "description": "#TODO",
      "definitions": {
        "MacAddressType": {
          "$id": "#MacAddressType",
          "description": "#TODO",
          "type": "object",
          "properties": {
            "MacAddressType": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "ManagedArtifact": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ManagedArtifact.schema.json",
      "definitions": {
        "ManagedArtifact": {
          "$id": "#ManagedArtifact",
          "type": "object",
          "description": "General information about a managed artifact",
          "properties": {
            "description": {
              "type": "string",
              "description": "The description for the artifact",
              "example": ""
            },
            "version": {
              "type": "string",
              "description": "The artifact version",
              "example": "1.2.3"
            },
            "versionDescription": {
              "type": "string",
              "description": "The artifact version description",
              "example": "What's changed: ..."
            },
            "attribute": {
              "type": "array",
              "items": {
                "$ref": "Attribute.schema.json#/definitions/Attribute"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyWithContactInfo.schema.json#/definitions/RelatedPartyWithContactInfo"
              }
            },
            "state": {
              "$ref": "../Common/ManagedArtifactStateType.schema.json#ManagedArtifactStateType"
            },
            "agreement": {
              "$ref": "TestAgreement.schema.json#/definitions/TestAgreement"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#/definitions/ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "ManagedArtifactStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ManagedArtifactStateType.schema.json",
      "title": "ManagedArtifactStateType",
      "definitions": {
        "ManagedArtifactStateType": {
          "$id": "#ManagedArtifactStateType",
          "type": "string",
          "description": "Possible values for the state of a managed artifact: 'incomplete', 'beta', 'stable', 'deprecated'",
          "enum": [
            "incomplete",
            "beta",
            "stable",
            "deprecated"
          ]
        }
      }
    }
  ],
  "ManagedEntity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ManagedEntity.schema.json",
      "title": "ManagedEntity",
      "definitions": {
        "ManagedEntity": {
          "$id": "#ManagedEntity",
          "description": "ManagedEntity represents an entity that describes the common set of attributes shared by all concrete entities (e.g. Resource, Service, ..) in the Entity Inventory. A ManagedEntity may concern a simple concept, such as a logical point of communication, or a complex concept, such as an Application or System ",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "free-text description of the entity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether an entity represents a single entity (false), or a bundle of entities(true)."
            },
            "isExternal": {
              "type": "boolean",
              "description": "isExternal determines whether an entity represents an external entity in the inventory."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of this managed entity"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date that the entity status changed to the current one"
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the entity"
            },
            "context": {
              "type": "string",
              "description": "A string used to give a context to the entity"
            },
            "version": {
              "type": "string",
              "description": "A field that identifies the specific version of an instance of an entity."
            },
            "entitySpecification": {
              "$ref": "../Common/EntitySpecificationRef.schema.json#/definitions/EntitySpecificationRef"
            },
            "entityRelationship": {
              "type": "array",
              "items": {
                "$ref": "EntityRelationship.schema.json#/definitions/EntityRelationship"
              },
              "description": "A list of entities related to this entity"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              },
              "description": "Attachments that may be of relevance to this entity, such as picture, document, media"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ManagementJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ManagementJob.schema.json",
      "title": "ManagementJob",
      "definitions": {
        "ManagementJob": {
          "type": "object",
          "description": "",
          "properties": {
            "adminState": {
              "$ref": "AdministrativeState.schema.json#/definitions/AdministrativeState"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time",
              "description": "The measurement job creation time."
            },
            "executionState": {
              "$ref": "ExecutionState.schema.json#/definitions/ExecutionStateType"
            },
            "fileTransferData": {
              "type": "array",
              "items": {
                "$ref": "FileTransferData.schema.json#/definitions/FileTransferData"
              },
              "minItems": 1
            },
            "jobId": {
              "type": "string",
              "description": "The ID of the management job."
            },
            "jobPriority": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "default": 5,
              "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
            },
            "lastModifiedTime": {
              "type": "string",
              "format": "date-time",
              "description": "The last time that a measurement job was modified."
            },
            "scheduleDefinition": {
              "type": "array",
              "items": {
                "$ref": "ScheduleDefinition.schema.json#/definitions/ScheduleDefinition"
              },
              "minItems": 0,
              "maxItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MapArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MapArrayCharacteristic.schema.json",
      "title": "MapArrayCharacteristic",
      "definitions": {
        "MapArrayCharacteristic": {
          "$id": "#MapArrayCharacteristic",
          "description": "A characteristic which value is a string",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "value": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "MapArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MapArrayCharacteristicValueSpecification.schema.json",
      "title": "MapArrayCharacteristicValueSpecification",
      "definitions": {
        "MapArrayCharacteristicValueSpecification": {
          "$id": "#MapArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is an array of mapped objects",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "value": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "MapCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MapCharacteristic.schema.json",
      "title": "MapCharacteristic",
      "definitions": {
        "MapCharacteristic": {
          "$id": "#MapCharacteristic",
          "description": "A characteristic which value is a mapped object",
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "MapCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MapCharacteristicValueSpecification.schema.json",
      "title": "MapCharacteristicValueSpecification",
      "definitions": {
        "MapCharacteristicValueSpecification": {
          "$id": "#MapCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a mapped object",
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "MarketSegmentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MarketSegmentRef.schema.json",
      "title": "MarketSegmentRef",
      "definitions": {
        "MarketSegmentRef": {
          "$id": "#MarketSegmentRef",
          "type": "object",
          "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the market segment"
            },
            "href": {
              "type": "string",
              "description": "Reference of the market segment"
            },
            "name": {
              "type": "string",
              "description": "Name of the market segment"
            },
            "@referredType": {
              "type": "string",
              "description": "(Class) type of the referred market segment"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MarketingCampaignRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MarketingCampaignRef.schema.json",
      "title": "MarketingCampaignRef",
      "definitions": {
        "MarketingCampaignRef": {
          "$id": "#MarketingCampaignRef",
          "description": "MarketingCampaign reference. Marketing campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "MeasureThresholdRuleViolation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MeasureThresholdRuleViolation.schema.json",
      "title": "MeasureThresholdRuleViolation",
      "definitions": {
        "MeasureThresholdRuleViolation": {
          "$id": "#MeasureThresholdRuleViolation",
          "description": "A measureThresholdRuleViolation is a violation of a rule that defines the in the \nMericDefMeasureThresholdRule.",
          "type": "object",
          "properties": {
            "conformanceComparatorLower": {
              "type": "string",
              "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetLower if used."
            },
            "conformanceComparatorUpper": {
              "type": "string",
              "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper if used."
            },
            "conformanceTargetLower": {
              "type": "string",
              "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper if used. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
            },
            "conformanceTargetUpper": {
              "type": "string",
              "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower if used. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
            },
            "description": {
              "type": "string",
              "description": "Description for the MetricDefMeasureThresholdRule ."
            },
            "name": {
              "type": "string",
              "description": "Name for the MetricDefMeasureThresholdRule ."
            },
            "numberOfAllowedCrossing": {
              "type": "integer",
              "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
            },
            "thresholdRuleSeverity": {
              "type": "string",
              "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
            },
            "conformanceTargetExact": {
              "type": "string",
              "description": "To cater for values that are not numerical test metrics (e.g. a DSL line can be Synchronised or Unsynchronised. If the latter, the test should result in a rule violation).The allowed value can contain a REGEX expression."
            },
            "tolerancePeriod": {
              "description": "An interval of time of allowed crossing occurrences before a \nconsequence being initiated.",
              "$ref": "../Common/Duration.schema.json#Duration"
            },
            "appliedConsequence": {
              "type": "array",
              "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a MeasureThresholdRuleViolation occurs.",
              "items": {
                "$ref": "../Service/AppliedConsequence.schema.json#AppliedConsequence"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Measurement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Measurement.schema.json",
      "title": "Measurement",
      "definitions": {
        "Measurement": {
          "type": "object",
          "description": "A counter/KPI to be used by the threshold rule",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of the measurement"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which a measurement is known and distinguished from other measurements"
            },
            "collectionType": {
              "type": "string",
              "description": "This attribute indicates different forms in which the measurement data can be captured (please see details below)"
            },
            "measurementFormula": {
              "type": "string",
              "description": "A formula that is used to calculate a measurement (a string)"
            },
            "measurementType": {
              "type": "string",
              "description": "A category of the measurement (different SDOs may be using different categories)"
            },
            "measurementUnit": {
              "type": "string",
              "description": "The unit of the measurement (e.g. second, bytes, Celsius, etc.)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MeasurementCollectionJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MeasurementCollectionJob.schema.json",
      "title": "MeasurementCollectionJob",
      "definitions": {
        "MeasurementCollectionJob": {
          "$id": "#MeasurementCollectionJob",
          "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.",
          "type": "object",
          "properties": {
            "outputFormat": {
              "type": "string"
            },
            "reportingPeriod": {
              "$ref": "#/definitions/ReportingPeriod"
            }
          },
          "allOf": [
            {
              "$ref": "ManagementJob.schema.json#/definitions/MeasurementJob"
            },
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "MeasurementJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MeasurementJob.schema.json",
      "title": "MeasurementJob",
      "definitions": {
        "MeasurementJob": {
          "$id": "MeasurementJob",
          "description": "A PM measurement job is the administrative entity defined by a client application to perform a periodic activity related to PM data.  The PM activities may be production of measurements, collection of measurements or PM objective monitoring (scheduled evaluation of thresholds).",
          "type": "object",
          "properties": {
            "consumingApplicationId": {
              "description": "The identifier of the application that consumes performance indicators.",
              "type": "string"
            },
            "producingApplicationId": {
              "description": "The identifier of the application that produces performance indicators.",
              "type": "string"
            },
            "granularity": {
              "$ref": "#/definitions/Granularity"
            },
            "performanceIndicatorGroupSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
              },
              "minItems": 0
            },
            "performanceIndicatorSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
              },
              "minItems": 0
            },
            "trackingRecord": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrackingRecord"
              },
              "minItems": 0
            },
            "monitoredInstancesCriteria": {
              "$ref": "#/definitions/MonitoredInstancesCriteria"
            },
            "monitoredClassCriteria": {
              "$ref": "#/definitions/MonitoredClassCriteria"
            }
          },
          "allOf": [
            {
              "$ref": "ManagementJob.schema.json#/definitions/ManagementJob"
            }
          ]
        }
      }
    }
  ],
  "MeasurementProductionJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MeasurementProductionJob.schema.json",
      "title": "MeasurementProductionJob",
      "definitions": {
        "MeasurementProductionJob": {
          "$id": "#MeasurementProductionJob",
          "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.",
          "type": "object",
          "properties": {
            "measurementCollectionJob": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasurementCollectionJob"
              },
              "minItems": 0,
              "maxItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "ManagementJob.schema.json#/definitions/MeasurementJob"
            },
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "MeasurementProductionJobAVCN": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MeasurementProductionJobAVCN.schema.json",
      "title": "MeasurementProductionJobAVCN",
      "definitions": {
        "MeasurementProductionJobAVCN": {
          "type": "object",
          "description": "This is a notification generated from the entity MeasurementProductionJob",
          "properties": {
            "granularity": {
              "$ref": "ExecutionState.schema.json#/definitions/Granularity"
            },
            "monitoredInstancesCriteria": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonitoredInstancesCriteria"
              },
              "minItems": 0,
              "maxItems": 1
            },
            "monitoredClassCriteria": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MonitoredClassCriteria"
              },
              "minItems": 0,
              "maxItems": 1
            },
            "lastModifiedTime": {
              "type": "string",
              "format": "date-time",
              "description": "The last time that a measurement job was modified."
            },
            "adminState": {
              "$ref": "AdministrativeState.schema.json#/definitions/AdministrativeState"
            },
            "jobPriority": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "default": 5,
              "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
            },
            "executionState": {
              "$ref": "ExecutionState.schema.json#/definitions/ExecutionStateType"
            },
            "scheduleDefinition": {
              "type": "array",
              "items": {
                "$ref": "ScheduleDefinition.schema.json#/definitions/ScheduleDefinition"
              },
              "minItems": 0,
              "maxItems": 1
            }
          }
        }
      }
    }
  ],
  "MediumCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MediumCharacteristic.schema.json",
      "title": "MediumCharacteristic",
      "definitions": {
        "MediumCharacteristic": {
          "$id": "#MediumCharacteristic",
          "type": "object",
          "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
          "properties": {
            "city": {
              "type": "string",
              "description": "The city"
            },
            "country": {
              "type": "string",
              "description": "The country"
            },
            "emailAddress": {
              "type": "string",
              "description": "Full email address in standard format"
            },
            "faxNumber": {
              "type": "string",
              "description": "The fax number of the contact"
            },
            "contactType": {
              "type": "string",
              "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…"
            },
            "socialNetworkId": {
              "type": "string",
              "description": "Identifier as a member of a social network"
            },
            "phoneNumber": {
              "type": "string",
              "description": "The primary phone number of the contact"
            },
            "postCode": {
              "type": "string",
              "description": "Postcode"
            },
            "stateOrProvince": {
              "type": "string",
              "description": "State or province"
            },
            "street1": {
              "type": "string",
              "description": "Describes the street"
            },
            "street2": {
              "type": "string",
              "description": "Complementary street description"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MergeTopologyGraphJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MergeTopologyGraphJob.schema.json",
      "title": "MergeTopologyGraphJob",
      "definitions": {
        "MergeTopologyGraphJob": {
          "$id": "#MergeTopologyGraphJob",
          "description": "Merges two or more Graphs into a single graph.",
          "type": "object",
          "properties": {
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was completed"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was created"
            },
            "status": {
              "description": "Status of the merge job",
              "$ref": "TaskStateType.schema.json#TaskStateType"
            },
            "mergeTopologyGraph": {
              "description": "URI with query string of the Topology GraphIds to be merged",
              "type": "array",
              "items": {
                "$ref": "GraphRef.schema.json#GraphRef"
              }
            },
            "graph": {
              "description": "The created topology graph",
              "$ref": "GraphRef.schema.json#GraphRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MetricDefMeasureConsequence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MetricDefMeasureConsequence.schema.json",
      "title": "MetricDefMeasureConsequence",
      "definitions": {
        "MetricDefMeasureConsequence": {
          "$id": "#MetricDefMeasureConsequence",
          "description": "A MetricDefMeasureConsequence defines the action (prescribed action or notification) to take when a \nMetricDefMeasureThresholdRule is crossed.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the consequence is."
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which a \nMetricDefMeasureConsequence is known and distinguished from other MetricDefMeasureConsequences."
            },
            "prescribeAction": {
              "type": "string",
              "description": "Recommended remedy for a violated threshold. This could be \nthe hyperlink to the action."
            },
            "repeatAction": {
              "type": "boolean",
              "description": "An indicator used to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value. \nIf the repeatAction is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAction is False, the consequence is applied only if the previous MetricMeasure value was not in the same range."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A valid duration of a thing."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "MetricDefMeasureThresholdRule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MetricDefMeasureThresholdRule.schema.json",
      "title": "MetricDefMeasureThresholdRule",
      "definitions": {
        "MetricDefMeasureThresholdRule": {
          "$id": "#MetricDefMeasureThresholdRule",
          "description": "A MetricDefMeasureThresholdRule is a rule that defines the condition (raise or clear) to achieve to apply \nconsequences when a threshold is crossed or ceased to be crossed. It also defines the severity of the \nraise or clear of the threshold.",
          "type": "object",
          "properties": {
            "conformanceComparatorLower": {
              "type": "string",
              "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to Service Test Management API REST Specification compare with the conformanceTargetLower if used."
            },
            "conformanceComparatorUpper": {
              "type": "string",
              "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper if used."
            },
            "conformanceTargetExact": {
              "type": "string",
              "description": "To cater for values that are not numerical test metrics (e.g. a DSL line can be Synchronised or Unsynchronised. If the latter, the test should result in a rule violation). The allowed value can contain a REGEX expression."
            },
            "conformanceTargetLower": {
              "type": "string",
              "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper if used. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
            },
            "conformanceTargetUpper": {
              "type": "string",
              "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower if used. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
            },
            "consequence": {
              "type": "array",
              "description": "A list of consequences (actions, notifications) that will arise if the threshold is crossed",
              "items": {
                "$ref": "../Service/MetricDefMeasureConsequence.schema.json#MetricDefMeasureConsequence"
              }
            },
            "description": {
              "type": "string",
              "description": "Description for the MetricDefMeasureThresholdRule ."
            },
            "name": {
              "type": "string",
              "description": "Name for the MetricDefMeasureThresholdRule ."
            },
            "numberOfAllowedCrossing": {
              "type": "integer",
              "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
            },
            "thresholdRuleSeverity": {
              "type": "string",
              "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
            },
            "tolerancePeriod": {
              "description": "An interval of time of allowed crossing occurrences before a consequence being initiated.",
              "$ref": "../Common/Duration.schema.json#Duration"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Migrate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Migrate.schema.json",
      "title": "Migrate",
      "definitions": {
        "Migrate": {
          "$id": "#Migrate",
          "description": "Task resource used to request migration of the Resource Function",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the Migrate task resource",
              "type": "string"
            },
            "href": {
              "description": "Reference to the Migrate task resource",
              "type": "string",
              "format": "uri"
            },
            "name": {
              "description": "Name of the Migrate task resource",
              "type": "string"
            },
            "resourceFunction": {
              "description": "Reference to the Resource Function that needs to be migrated",
              "$ref": "../Resource/ResourceFunctionRef.schema.json#/definitions/ResourceFunctionRef"
            },
            "cause": {
              "description": "Reason why migration is being requested",
              "type": "string"
            },
            "adminStateModification": {
              "description": "SubState required before migrate is carried out",
              "type": "string",
              "enum": [
                "locked",
                "unlocked",
                "shuttingDown"
              ]
            },
            "removeConnectionPoint": {
              "description": "Connection points to be removed when function is migrated",
              "type": "array",
              "items": {
                "$ref": "../Resource/ConnectionPointRef.schema.json#/definitions/ConnectionPointRef"
              }
            },
            "addConnectionPoint": {
              "description": "Connection points to be added when function is migrated",
              "type": "array",
              "items": {
                "$ref": "../Resource/ConnectionPointRef.schema.json#/definitions/ConnectionPointRef"
              }
            },
            "priority": {
              "description": "Priority of the migrate operation",
              "type": "integer",
              "format": "int64"
            },
            "startTime": {
              "description": "The time when the migration needs to commence. This allows a delay to be added",
              "type": "string"
            },
            "completionMode": {
              "description": "In what mode is the migrate operation to be performed",
              "type": "string",
              "enum": [
                "bestEffort",
                "atomic"
              ]
            },
            "place": {
              "$ref": "../Common/PlaceRef.schema.json#/definitions/PlaceRef"
            },
            "characteristics": {
              "description": "Additional attributes to pass to the migrate operation",
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "state": {
              "description": "Tracks the lifecycle status of the migrate request.",
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ],
          "required": [
            "resourceFunction",
            "cause"
          ]
        }
      }
    }
  ],
  "Milestone": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Milestone.schema.json",
      "title": "Milestone",
      "definitions": {
        "Milestone": {
          "$id": "#Milestone",
          "description": "Milestone represents an action or event marking a significant change or stage in a process like an order process.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "free-text description of the Milestone"
            },
            "id": {
              "type": "string",
              "description": "identifier of the Milestone"
            },
            "status": {
              "description": "The milestone status",
              "type": "string",
              "enum": [
                "Yet-To-Reach",
                "Completed",
                "Violated"
              ]
            },
            "milestoneDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date that the milestone happens"
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the milestone"
            },
            "message": {
              "type": "string",
              "description": "A string represents the message of the milestone"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "MobileDataXDRAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MobileDataXDRAnalytics.schema.json",
      "title": "MobileDataXDRAnalytics",
      "definitions": {
        "MobileDataXDRAnalytics": {
          "$id": "#MobileDataXDRAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Money": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Money.schema.json",
      "title": "Money",
      "definitions": {
        "Money": {
          "$id": "#Money",
          "description": "A base / value business entity used to represent money",
          "type": "object",
          "properties": {
            "unit": {
              "type": "string",
              "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "A signed floating point number, the meaning of the sign is according to the context of the API that uses this Data type"
            }
          }
        }
      }
    }
  ],
  "Monitor": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Monitor.schema.json",
      "title": "Monitor",
      "definitions": {
        "Monitor": {
          "$id": "#Monitor",
          "type": "object",
          "description": "Monitoring of resources",
          "properties": {
            "href": {
              "type": "string",
              "description": "reference to this monitor"
            },
            "id": {
              "type": "string",
              "description": "Identifier of an instance of the monitor. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type"
            },
            "request": {
              "description": "Represents the request",
              "$ref": "../Common/Request.schema.json#Request"
            },
            "response": {
              "description": "Represents the response",
              "$ref": "../Common/Response.schema.json#Response"
            },
            "sourceHref": {
              "type": "string",
              "description": "The monitored resource href"
            },
            "state": {
              "type": "string",
              "description": "The Monitor state of the resource.  InProgress, InError, Completed"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "MonitoredClassCriteria": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MonitoredClassCriteria.schema.json",
      "title": "MonitoredClassCriteria",
      "definitions": {
        "MonitoredClassCriteria": {
          "$id": "#MonitoredClassCriteria",
          "description": "Specifies a monitored object class (a string) in conjunction with a filter object.",
          "type": "object",
          "properties": {
            "monitoredObjectClass": {
              "type": "string",
              "description": "A monitored object class for specifying the set of instances that are referenced by a PM query."
            },
            "objectInstanceFilter": {
              "type": "string",
              "description": "A filter that can be used in conjunction with the monitored object class for specifying the set of instances that are referenced by a PM query."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "MonitoredInstancesCriteria": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MonitoredInstancesCriteria.schema.json",
      "title": "MonitoredInstancesCriteria",
      "definitions": {
        "MonitoredInstancesCriteria": {
          "$id": "#MonitoredInstancesCriteria",
          "description": "List of monitored instances",
          "type": "object",
          "properties": {
            "monitoredObjectInstances": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 0
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "MonitoredObjectsCriteria": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MonitoredObjectsCriteria.schema.json",
      "title": "MonitoredObjectsCriteria",
      "definitions": {
        "MonitoredObjectsCriteria": {
          "$id": "#MonitoredObjectsCriteria",
          "description": "Monitored objects are specified by the MonitoredObjectsCriteria.",
          "type": "object",
          "properties": {
            "monitoredObjectFilter": {
              "description": "A filter that can be used in conjunction with the monitored object class for specifying the set of instances that are referenced",
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "MonthlyScheduleDayOfWeekDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MonthlyScheduleDayOfWeekDefinition.schema.json",
      "title": "MonthlyScheduleDayOfWeekDefinition",
      "definitions": {
        "MonthlyScheduleDayOfWeekDefinition": {
          "$id": "#MonthlyScheduleDayOfWeekDefinition",
          "type": "object",
          "properties": {
            "dayOfMonthRecurrence": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DayOfMonthRecurrence"
              }
            },
            "recurringDaySequence": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "MultiLineString": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MultiLineString.schema.json",
      "title": "MultiLineString",
      "definitions": {
        "MultiLineString": {
          "$id": "#MultiLineString",
          "description": "A collection of distinct LineStrings",
          "required": [
            "type",
            "coordinates"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MultiLineString"
              ]
            },
            "coordinates": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeoJSON.schema.json#lineString"
              }
            }
          },
          "type": "object"
        }
      }
    }
  ],
  "MultiPoint": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MultiPoint.schema.json",
      "title": "MultiPoint",
      "definitions": {
        "MultiPoint": {
          "$id": "#MultiPoint",
          "description": "A collection of Points",
          "required": [
            "type",
            "coordinates"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "MultiPoint"
              ]
            },
            "coordinates": {
              "$ref": "../Common/GeoJSON.schema.json#positionArray"
            }
          },
          "type": "object"
        }
      }
    }
  ],
  "Multilingual": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Multilingual.schema.json",
      "title": "Multilingual",
      "definitions": {
        "Multilingual": {
          "$id": "#Multilingual",
          "description": "Serialization format for multilingual text",
          "type": "object",
          "propertyNames": {
            "$ref": "#/definitions/supportedLanguages"
          },
          "patternProperties": {
            ".*": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "supportedLanguages": {
          "$id": "#supportedLanguages",
          "enum": [
            "EN",
            "ZH"
          ],
          "type": "object"
        }
      }
    }
  ],
  "MultilingualConverter": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MultilingualConverter.schema.json",
      "title": "MultilingualConverter",
      "definitions": {
        "MultilingualConverter": {
          "$id": "#MultilingualConverter",
          "description": "REST resource for multilingual conversion from the base language",
          "type": "object",
          "required": [
            "baseText"
          ],
          "properties": {
            "baseText": {
              "type": "string",
              "description": "The text in the base language",
              "example": "The quick brown fox jumps over the lazy dog"
            },
            "langSelector": {
              "type": "string",
              "description": "The language to provide conversion to",
              "example": "FR"
            },
            "convertedText": {
              "type": "string",
              "description": "The converted text",
              "example": "Portez ce vieux whisky au juge blond qui fume"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "Museum": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/PointOfInterest/Museum/schema.json",
      "title": "FIWARE - Museum schema",
      "description": "A museum",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Museum"
              ],
              "description": "NGSI Entity type"
            },
            "museumType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "appliedArts",
                  "scienceAndTechnology",
                  "fineArts",
                  "music",
                  "history",
                  "sacredArt",
                  "archaeology",
                  "specials",
                  "decorativeArts",
                  "literature",
                  "medicineAndPharmacy",
                  "maritime",
                  "transports",
                  "military",
                  "wax",
                  "popularArtsAndTraditions",
                  "numismatic",
                  "unesco",
                  "ceramics",
                  "sumptuaryArts",
                  "naturalScience",
                  "prehistoric",
                  "ethnology",
                  "railway",
                  "mining",
                  "textile",
                  "sculpture",
                  "multiDisciplinar",
                  "painting",
                  "paleonthology",
                  "modernArt",
                  "thematic",
                  "architecture",
                  "museumHouse",
                  "cathedralMuseum",
                  "diocesanMuseum",
                  "universitary",
                  "contemporaryArt",
                  "bullfighting"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "owner": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                }
              ]
            },
            "facilities": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "elevator",
                  "cafeteria",
                  "shop",
                  "auditory",
                  "conferenceRoom",
                  "audioguide",
                  "cloakRoom",
                  "forDisabled",
                  "forBabies",
                  "guidedTour",
                  "restaurant",
                  "ramp",
                  "reservation"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "historicalPeriod": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "artPeriod": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "buildingType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prehistoricPlace",
                  "acropolis",
                  "alcazaba",
                  "aqueduct",
                  "alcazar",
                  "amphitheatre",
                  "arch",
                  "polularArchitecture",
                  "basilica",
                  "road",
                  "chapel",
                  "cartuja",
                  "nobleHouse",
                  "residence",
                  "castle",
                  "castro",
                  "catacombs",
                  "cathedral",
                  "cloister",
                  "convent",
                  "prehistoricCave",
                  "dolmen",
                  "officeBuilding",
                  "houseBuilding",
                  "industrialBuilding",
                  "militaryBuilding",
                  "hermitage",
                  "fortress",
                  "sculpturalGroups",
                  "church",
                  "garden",
                  "fishMarket",
                  "masia",
                  "masiaFortificada",
                  "minaret",
                  "monastery",
                  "monolith",
                  "walls",
                  "necropolis",
                  "menhir",
                  "mansion",
                  "palace",
                  "pantheon",
                  "pazo",
                  "pyramid",
                  "bridge",
                  "gate",
                  "arcade",
                  "walledArea",
                  "sanctuary",
                  "grave",
                  "synagogue",
                  "taulasTalayotsNavetas",
                  "theathre",
                  "temple",
                  "spring",
                  "tower",
                  "archeologicalSite",
                  "university",
                  "graveyard",
                  "fortifiedTemple",
                  "civilEngineering",
                  "square",
                  "seminar",
                  "bullfightingRing",
                  "publicBuilding",
                  "town",
                  "cavesAndTouristicMines",
                  "proCathedral",
                  "mosque",
                  "circus",
                  "burialMound"
                ],
                "minItems": 1,
                "uniqueItems": true
              }
            },
            "featuredArtist": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "contactPoint": {
              "type": "object"
            },
            "touristArea": {
              "type": "string"
            },
            "openingHoursSpecification": {
              "type": "array",
              "items": {
                "properties": {
                  "opens": {
                    "type": "string",
                    "pattern": "[0-9]{2}:[0-9]{2}"
                  },
                  "closes": {
                    "type": "string",
                    "pattern": "[0-9]{2}:[0-9]{2}"
                  },
                  "dayOfWeek": {
                    "type": "string"
                  }
                }
              },
              "minItems": 1
            },
            "refSeeAlso": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "name"
      ]
    }
  ],
  "MutlilingualEntry": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "MutlilingualEntry.schema.json",
      "title": "MutlilingualEntry",
      "definitions": {
        "MutlilingualEntry": {
          "$id": "#MutlilingualEntry",
          "type": "object",
          "required": [
            "language",
            "text"
          ],
          "properties": {
            "language": {
              "type": "string",
              "description": "A supported language",
              "example": "EN"
            },
            "text": {
              "type": "string",
              "description": "Text in the corresponding supported language",
              "example": "Some text in English"
            }
          }
        }
      }
    }
  ],
  "NetworkCredential": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NetworkCredential.schema.json",
      "title": "A credential provided by a resource like a PKI key",
      "definitions": {
        "NetworkCredential": {
          "$id": "#NetworkCredential",
          "description": "A Credential based on a login and a password.",
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "description": "credential password to use resource based credential - must be in write only"
            },
            "resource": {
              "$ref": "../Resource/ResourceRef.schema.json#ResourceRef",
              "description": "Resource used by a network credential."
            }
          },
          "allOf": [
            {
              "$ref": "../engagedParty/Credential.schema.json#Credential"
            }
          ]
        }
      }
    }
  ],
  "NetworkFunction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NetworkFunction.schema.json",
      "title": "NetworkFunction",
      "definitions": {
        "NetworkFunction": {
          "$id": "#NetworkFunction",
          "type": "object",
          "properties": {
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "NetworkProduct": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NetworkProduct.schema.json",
      "title": "NetworkProduct",
      "definitions": {
        "NetworkProduct": {
          "$id": "#NetworkProduct",
          "type": "object",
          "description": "An instantiated network product (specialization of a product) subscribed by a customer.",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference to the network product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the network product"
            },
            "name": {
              "type": "string",
              "description": "Network product name"
            },
            "outOfBucketCounter": {
              "type": "array",
              "description": "Counters detailing usage consumption out of the buckets",
              "items": {
                "$ref": "../Product/ConsumptionSummary.schema.json#ConsumptionSummary"
              }
            },
            "publicIdentifier": {
              "type": "string",
              "description": "Public number associated to the network product (msisdn number for mobile line for example)"
            },
            "user": {
              "type": "array",
              "description": "References of the users of the network product",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "NetworkProductRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NetworkProductRef.schema.json",
      "title": "NetworkProductRef",
      "definitions": {
        "NetworkProductRef": {
          "$id": "#NetworkProductRef",
          "type": "object",
          "description": "Reference of a product",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "Generic attribute indicating the name of the class type of the referred resource entity"
            },
            "href": {
              "type": "string",
              "description": "Reference to the network product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the network product"
            },
            "name": {
              "type": "string",
              "description": "Network product name"
            },
            "publicIdentifier": {
              "type": "string",
              "description": "Public number associated to the product (msisdn number for mobile line for example)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "NetworkQualityAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NetworkQualityAnalytics.schema.json",
      "title": "NetworkQualityAnalytics",
      "definitions": {
        "NetworkQualityAnalytics": {
          "$id": "#NetworkQualityAnalytics",
          "type": "object",
          "properties": {
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "NoiseLevelObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Environment/NoiseLevelObserved/schema.json",
      "title": "GSMA / FIWARE - Noise Level observed schema",
      "description": "An observation of those acoustic parameters that estimate noise pressure levels at a certain place and time. ",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "NoiseLevelObserved"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string"
            },
            "dateObservedFrom": {
              "type": "string",
              "format": "date-time"
            },
            "dateObservedTo": {
              "type": "string",
              "format": "date-time"
            },
            "sonometerClass": {
              "type": "string",
              "enum": [
                "0",
                "1",
                "2"
              ]
            },
            "refDevice": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refPointOfInterest": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refWeatherObserved": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObservedFrom",
        "dateObservedTo",
        "location"
      ]
    }
  ],
  "NonFunctionalTestExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestExecution.schema.json",
      "title": "NonFunctionalTestExecution",
      "definitions": {
        "NonFunctionalTestExecution": {
          "$id": "#NonFunctionalTestExecution",
          "type": "object",
          "description": "REST resource for the non-functional test execution lifecycle",
          "properties": {
            "nonFunctionalTestModel": {
              "$ref": "../Common/NonFunctionalTestModelRef.schema.json#NonFunctionalTestModelRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/TestExecution.schema.json#TestExecution"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestExecutionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestExecutionRef.schema.json",
      "title": "NonFunctionalTestExecutionRef",
      "definitions": {
        "NonFunctionalTestExecutionRef": {
          "$id": "#NonFunctionalTestExecutionRef",
          "type": "object",
          "description": "A reference to a non-funcitonal test execution",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestExecutionRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestExecutionRefOrValue.schema.json",
      "title": "NonFunctionalTestExecutionRefOrValue",
      "definitions": {
        "NonFunctionalTestExecutionRefOrValue": {
          "$id": "#NonFunctionalTestExecutionRefOrValue",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/NonFunctionalTestExecution.schema.json#NonFunctionalTestExecution"
            },
            {
              "$ref": "../Common/NonFunctionalTestExecutionRef.schema.json#NonFunctionalTestExecutionRef"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestModel": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestModel.schema.json",
      "title": "NonFunctionalTestModel",
      "definitions": {
        "NonFunctionalTestModel": {
          "$id": "#NonFunctionalTestModel",
          "type": "object",
          "description": "A managed non-functional test model resource",
          "required": [
            "nonFunctionalTestModelDefinition"
          ],
          "properties": {
            "nonFunctionalTestModelDefinition": {
              "$ref": "../Common/NonFunctionalTestModelDefinition.schema.json#NonFunctionalTestModelDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestModelDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestModelDefinition.schema.json",
      "title": "NonFunctionalTestModelDefinition",
      "definitions": {
        "NonFunctionalTestModelDefinition": {
          "$id": "#NonFunctionalTestModelDefinition",
          "type": "object",
          "description": "Non-functional test model definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestModelRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestModelRef.schema.json",
      "title": "NonFunctionalTestModelRef",
      "definitions": {
        "NonFunctionalTestModelRef": {
          "$id": "#NonFunctionalTestModelRef",
          "type": "object",
          "description": "A reference to a managed non-functional test model resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestResult": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestResult.schema.json",
      "title": "NonFunctionalTestResult",
      "definitions": {
        "NonFunctionalTestResult": {
          "$id": "#NonFunctionalTestResult",
          "type": "object",
          "description": "A managed non-functional test result resource",
          "required": [
            "nonFunctionalTestResultDefinition",
            "testExecution"
          ],
          "properties": {
            "nonFunctionalTestResultDefinition": {
              "$ref": "../Common/NonFunctionalTestResultDefinition.schema.json#NonFunctionalTestResultDefinition"
            },
            "testExecution": {
              "$ref": "../Common/NonFunctionalTestExecutionRefOrValue.schema.json#NonFunctionalTestExecutionRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "NonFunctionalTestResultDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NonFunctionalTestResultDefinition.schema.json",
      "title": "NonFunctionalTestResultDefinition",
      "definitions": {
        "NonFunctionalTestResultDefinition": {
          "$id": "#NonFunctionalTestResultDefinition",
          "type": "object",
          "description": "Non-functional test result definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "Note": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Note.schema.json",
      "title": "Note",
      "definitions": {
        "Note": {
          "$id": "#Note",
          "description": "Extra information about a given entity",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the note within its containing entity",
              "example": [
                "afa9-3d90aaa8da0f"
              ]
            },
            "author": {
              "type": "string",
              "description": "Author of the note",
              "example": [
                "Mr. N. Bene"
              ]
            },
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Date of the note",
              "example": [
                "2020-11-20T08:00:00Z"
              ]
            },
            "text": {
              "type": "string",
              "description": "Text of the note",
              "example": [
                "This is important"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Notification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Notification.schema.json",
      "title": "Notification",
      "definitions": {
        "Notification": {
          "$id": "#Notification",
          "description": "The notification is sent to each listener who has subscribed to receive it.",
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "Identifier of the event"
            },
            "eventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date of the event"
            },
            "eventType": {
              "type": "string",
              "description": "Type of event"
            },
            "fieldPath": {
              "type": "string",
              "description": "details which field is missing, its structure is quite similar to GET filter criteria"
            },
            "resourcePath": {
              "type": "string",
              "description": "To indicate which entity is concerned"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "NumberArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NumberArrayCharacteristic.schema.json",
      "title": "NumberArrayCharacteristic",
      "definitions": {
        "NumberArrayCharacteristic": {
          "$id": "#NumberArrayCharacteristic",
          "description": "A characteristic which the value is a number array",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "NumberArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NumberArrayCharacteristicValueSpecification.schema.json",
      "title": "NumberArrayCharacteristicValueSpecification",
      "definitions": {
        "NumberArrayCharacteristicValueSpecification": {
          "$id": "#NumberArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a number array with no specific format ",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "NumberCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NumberCharacteristic.schema.json",
      "title": "NumberCharacteristic",
      "definitions": {
        "NumberCharacteristic": {
          "$id": "NumberCharacteristic",
          "description": "A characteristic which value is a number",
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "NumberCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "NumberCharacteristicValueSpecification.schema.json",
      "title": "NumberCharacteristicValueSpecification",
      "definitions": {
        "NumberCharacteristicValueSpecification": {
          "$id": "#NumberCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a number of no specific format",
          "type": "object",
          "properties": {
            "value": {
              "type": "number",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "Object": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Object.schema.json",
      "title": "Object",
      "definitions": {
        "Object": {
          "$id": "#Object",
          "type": "object",
          "properties": {
            "objectType": {
              "type": "string",
              "description": "The type of object"
            },
            "uri": {
              "type": "string",
              "format": "uri"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ObjectArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ObjectArrayCharacteristic.schema.json",
      "title": "ObjectArrayCharacteristic",
      "definitions": {
        "ObjectArrayCharacteristic": {
          "$id": "#ObjectArrayCharacteristic",
          "description": "A characteristic which the value is a object array",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "ObjectArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ObjectArrayCharacteristicValueSpecification.schema.json",
      "title": "ObjectArrayCharacteristicValueSpecification",
      "definitions": {
        "ObjectArrayCharacteristicValueSpecification": {
          "$id": "#ObjectArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is an array of objects",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "ObjectCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ObjectCharacteristic.schema.json",
      "title": "ObjectCharacteristic",
      "definitions": {
        "ObjectCharacteristic": {
          "$id": "#ObjectCharacteristic",
          "description": "A characteristic which value is an object",
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "ObjectCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ObjectCharacteristicValueSpecification.schema.json",
      "title": "ObjectCharacteristicValueSpecification",
      "definitions": {
        "ObjectCharacteristicValueSpecification": {
          "$id": "#ObjectCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is any object",
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "ObjectName": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ObjectName.schema.json",
      "title": "ObjectName",
      "definitions": {
        "ObjectName": {
          "$id": "#ObjectName",
          "type": "object",
          "properties": {
            "name": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValuePair"
              },
              "maxItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "OffStreetParking": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Parking/OffStreetParking/schema.json",
      "title": "FIWARE - Parking / Off Street Parking",
      "description": "Off street parking",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "OffStreetParking"
              ],
              "description": "NGSI Entity type"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "public",
                  "private",
                  "publicPrivate",
                  "urbanDeterrentParking",
                  "parkingGarage",
                  "parkingLot",
                  "shortTerm",
                  "mediumTerm",
                  "longTerm",
                  "free",
                  "feeCharged",
                  "staffed",
                  "guarded",
                  "barrierAccess",
                  "gateAccess",
                  "freeAccess",
                  "onlyResidents",
                  "onlyWithPermit",
                  "forEmployees",
                  "forVisitors",
                  "forCustomers",
                  "forStudents",
                  "forMembers",
                  "forDisabled",
                  "forResidents",
                  "forElectricalCharging",
                  "underground",
                  "ground",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "extCategory": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "allowedVehicleType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "agriculturalVehicle",
                  "bicycle",
                  "bus",
                  "car",
                  "caravan",
                  "carWithCaravan",
                  "carWithTrailer",
                  "constructionOrMaintenanceVehicle",
                  "lorry",
                  "moped",
                  "motorcycle",
                  "motorcycleWithSideCar",
                  "motorscooter",
                  "tanker",
                  "trailer",
                  "van",
                  "anyVehicle"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "chargeType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "flat",
                  "minimum",
                  "maximum",
                  "additionalIntervalPrice",
                  "seasonTicket",
                  "temporaryPrice",
                  "firstIntervalPrice",
                  "annualPayment",
                  "monthlyPayment",
                  "free",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "requiredPermit": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "employeePermit",
                  "studentPermit",
                  "fairPermit",
                  "governmentPermit",
                  "residentPermit",
                  "specificIdentifiedVehiclePermit",
                  "visitorPermit",
                  "noPermitNeeded"
                ]
              },
              "minItems": 0,
              "uniqueItems": true
            },
            "occupancyDetectionType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "none",
                  "balancing",
                  "singleSpaceDetection",
                  "modelBased",
                  "manual"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "acceptedPaymentMethod": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ByBankTransferInAdvance",
                  "ByInvoice",
                  "Cash",
                  "CheckInAdvance",
                  "COD",
                  "DirectDebit",
                  "GoogleCheckout",
                  "PayPal",
                  "PaySwarm"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "priceRatePerMinute": {
              "type": "number"
            },
            "priceCurrency": {
              "type": "string"
            },
            "layout": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "automatedParkingGarage",
                  "surface",
                  "multiStorey",
                  "singleLevel",
                  "multiLevel",
                  "openSpace",
                  "covered",
                  "nested",
                  "field",
                  "rooftop",
                  "sheds",
                  "carports",
                  "garageBoxes",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "usageScenario": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "truckParking",
                  "parkAndRide",
                  "parkAndCycle",
                  "parkAndWalk",
                  "kissAndRide",
                  "liftshare",
                  "carSharing",
                  "restArea",
                  "serviceArea",
                  "dropOffWithValet",
                  "dropOffMechanical",
                  "eventParking",
                  "automaticParkingGuidance",
                  "staffGuidesToSpace",
                  "vehicleLift",
                  "loadingBay",
                  "dropOff",
                  "overnightParking",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "parkingMode": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "perpendicularParking",
                  "parallelParking",
                  "echelonParking"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "facilities": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "toilet",
                  "shower",
                  "informationPoint",
                  "internetWireless",
                  "payDesk",
                  "paymentMachine",
                  "cashMachine",
                  "vendingMachine",
                  "faxMachineOrService",
                  "copyMachineOrService",
                  "safeDeposit",
                  "luggageLocker",
                  "publicPhone",
                  "elevator",
                  "dumpingStation",
                  "freshWater",
                  "wasteDisposal",
                  "refuseBin",
                  "iceFreeScaffold",
                  "playground",
                  "electricChargingStation",
                  "bikeParking",
                  "tollTerminal",
                  "defibrillator",
                  "firstAidEquipment",
                  "fireHose",
                  "fireExtinguisher",
                  "fireHydrant"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "security": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "patrolled",
                  "securityStaff",
                  "externalSecurity",
                  "cctv",
                  "dog",
                  "guard24hours",
                  "lighting",
                  "floodLight",
                  "fences",
                  "areaSeperatedFromSurroundings"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "highestFloor": {
              "type": "integer"
            },
            "lowestFloor": {
              "type": "integer"
            },
            "maximumAllowedDuration": {
              "type": "string"
            },
            "totalSpotNumber": {
              "type": "integer",
              "minimum": 1
            },
            "availableSpotNumber": {
              "type": "integer",
              "minimum": 0
            },
            "extraSpotNumber": {
              "type": "integer",
              "minimum": 0
            },
            "openingHours": {
              "type": "string"
            },
            "firstAvailableFloor": {
              "type": "integer"
            },
            "specialLocation": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "airportTerminal",
                  "exhibitonCentre",
                  "shoppingCentre",
                  "specificFacility",
                  "trainStation",
                  "campground",
                  "themePark",
                  "ferryTerminal",
                  "vehicleOnRailTerminal",
                  "coachStation",
                  "cableCarStation",
                  "publicTransportStation",
                  "market",
                  "religiousCentre",
                  "conventionCentre",
                  "cinema",
                  "skilift",
                  "hotel",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "status": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "open",
                  "closed",
                  "closedAbnormal",
                  "openingTimesInForce",
                  "full",
                  "fullAtEntrance",
                  "spacesAvailable",
                  "almostFull"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "reservationType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "optional",
                  "mandatory",
                  "notAvailable",
                  "partly"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "owner": {
              "type": "string"
            },
            "provider": {
              "type": "object"
            },
            "measuresPeriod": {
              "type": "number"
            },
            "measuresPeriodUnit": {
              "type": "string"
            },
            "contactPoint": {
              "type": "object"
            },
            "averageSpotWidth": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "averageSpotLength": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "maximumAllowedHeight": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "maximumAllowedWidth": {
              "type": "number",
              "minimum": 0,
              "exclusiveMinimum": true
            },
            "refParkingAccess": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refParkingGroup": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refParkingSpot": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "aggregateRating": {
              "type": "object"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "OnDemandCollection": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OnDemandCollection.schema.json",
      "title": "OnDemandCollection",
      "definitions": {
        "OnDemandCollection": {
          "$id": "OnDemandCollection",
          "description": "",
          "type": "object",
          "properties": {
            "consumingApplicationId": {
              "type": "string"
            },
            "producingApplicationId": {
              "type": "string"
            },
            "granulatiry": {
              "$ref": "#/definitions/Granularity"
            },
            "outputFormat": {
              "type": "string"
            },
            "collectionPeriod": {
              "$ref": "#/definitions/TimePeriod"
            },
            "trackingRecord": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrackingRecord"
              },
              "minItems": 0
            },
            "performanceIndicatorGroupSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
              },
              "minItems": 0
            },
            "performanceIndicatorSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
              },
              "minItems": 0
            },
            "monitoredInstancesCriteria": {
              "$ref": "#/definitions/MonitoredInstancesCriteria"
            },
            "monitoredClassCriteria": {
              "$ref": "#/definitions/MonitoredClassCriteria"
            }
          },
          "allOf": [
            {
              "$ref": "ManagementJob.schema.json#/definitions/ManagementJob"
            },
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "OnStreetParking": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Parking/OnStreetParking/schema.json",
      "title": "FIWARE - Parking / On Street Parking - TODO: Provide a complete schema",
      "description": "On street parking",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "OnStreetParking"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "Open311_ServiceRequest": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/IssueTracking/Open311_ServiceRequest/schema.json",
      "title": "FIWARE - Open311 Service Request",
      "description": "An entity of type ServiceRequest is an acceptable Open 311 service request. Such entity encompasses all the properties defined by Open 311 at POST Service Request and GET Service Request.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Open311:ServiceRequest"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type"
      ]
    }
  ],
  "Open311_ServiceType": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/IssueTracking/Open311_ServiceType/schema.json",
      "title": "FIWARE - Open311 Service Type",
      "description": "As per Open311 an entity of type ServiceType is an acceptable 311 service request type. A request type can be unique to the city/jurisdiction.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Open311:ServiceType"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type"
      ]
    }
  ],
  "OrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderItem.schema.json",
      "title": "OrderItem",
      "definitions": {
        "OrderItem": {
          "$id": "#OrderItem",
          "description": "An identified part of the order. A product order is decomposed into one or more order items.",
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "Can be \"add\" / \"modify\" / \"no_change\"/ \"delete\""
            },
            "id": {
              "type": "string",
              "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity ordered"
            },
            "state": {
              "type": "string",
              "description": "State of the order item : described in the state machine diagram"
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#AppointmentRef"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "itemPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#OrderPrice"
              }
            },
            "orderItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItem.schema.json#OrderItem"
              }
            },
            "orderItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItemRelationship.schema.json#OrderItemRelationship"
              }
            },
            "itemTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#OrderPrice"
              }
            },
            "payment": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
              }
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "product": {
              "$ref": "../Product/Product.schema.json#Product"
            },
            "qualification": {
              "type": "array",
              "items": {
                "$ref": "../Common/QualificationRef.schema.json#QualificationRef"
              }
            },
            "itemTerm": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderTerm.schema.json#OrderTerm"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrderItemActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderItemActionType.schema.json",
      "title": "OrderItemActionType",
      "definitions": {
        "OrderItemActionType": {
          "$id": "#OrderItemActionType",
          "description": "action to be performed on the product",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "OrderItemPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderItemPrice.schema.json",
      "title": "OrderItemPrice",
      "definitions": {
        "OrderItemPrice": {
          "$id": "#OrderItemPrice",
          "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order",
          "type": "object",
          "required": [
            "priceType",
            "price"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this order item price."
            },
            "name": {
              "type": "string",
              "description": "Name of the order item price"
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef"
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth"
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price"
            },
            "priceAlteration": {
              "type": "array",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#PriceAlteration"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrderItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderItemRef.schema.json",
      "title": "OrderItemRef",
      "definitions": {
        "OrderItemRef": {
          "$id": "#OrderItemRef",
          "type": "object",
          "description": "ProductOrder (ProductOrder) .The product order which the recommendation is related with.",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "OrderItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderItemRelationship.schema.json",
      "title": "OrderItemRelationship",
      "definitions": {
        "OrderItemRelationship": {
          "$id": "#OrderItemRelationship",
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of order item relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrderLineItemAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderLineItemAnalytics.schema.json",
      "title": "OrderLineItemAnalytics",
      "definitions": {
        "OrderLineItemAnalytics": {
          "$id": "#OrderLineItemAnalytics",
          "type": "object",
          "properties": {
            "orderTime": {
              "type": "string",
              "format": "date-time",
              "description": "time the order was placed"
            },
            "totalQuantity": {
              "type": "number",
              "format": "integer",
              "description": "A line item might include several items of the same type, e.g. 5 iPhone X"
            },
            "statusSubmittedQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in submitted status"
            },
            "statusProvisionedQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in provisioned status"
            },
            "statusActivatedQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in activated status"
            },
            "statusDeliveredQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in delivered status"
            },
            "statusReturnedQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in returned status"
            },
            "statusCanceledQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in cancelled status"
            },
            "statusFailureQuantity": {
              "type": "number",
              "format": "integer",
              "description": "The number of items in this line item in failure status"
            },
            "statusUpdateTime": {
              "type": "string",
              "format": "date-time",
              "description": "when the status was last updated"
            },
            "priceChargeTotalAmt": {
              "type": "number",
              "format": "integer",
              "description": "Offering Recurrent amount"
            },
            "priceChargeTotalOcAmt": {
              "type": "number",
              "format": "integer",
              "description": "Offering One time amount"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "OrderPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderPrice.schema.json",
      "title": "OrderPrice",
      "definitions": {
        "OrderPrice": {
          "$id": "#OrderPrice",
          "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this order item price."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name such as \"Subscription price\"."
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef",
              "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time."
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth"
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef",
              "description": "A reference to a billing account used for paid the order price charge"
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price",
              "description": "a structure used to define price amount"
            },
            "priceAlteration": {
              "type": "array",
              "description": "a strucuture used to describe a price alteration",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#PriceAlteration"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrderRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderRef.schema.json",
      "title": "OrderRef",
      "definitions": {
        "OrderRef": {
          "$id": "#OrderRef",
          "type": "object",
          "description": "ProductOrder (ProductOrder) .The product order which the recommendation is related with.",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "OrderRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderRelationship.schema.json",
      "title": "OrderRelationship",
      "definitions": {
        "OrderRelationship": {
          "$id": "#OrderRelationship",
          "type": "object",
          "properties": {
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of order relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrderStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderStateType.schema.json",
      "title": "OrderStateType",
      "definitions": {
        "OrderStateType": {
          "$id": "#OrderStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "OrderTerm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrderTerm.schema.json",
      "title": "OrderTerm",
      "definitions": {
        "OrderTerm": {
          "$id": "#OrderTerm",
          "description": "Description of a productTerm linked to this orderItem. This represent a commitment with a duration",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the productOrderTerm"
            },
            "duration": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Duration of the productOrderTerm"
            },
            "name": {
              "type": "string",
              "description": "Name of the productOrderTerm"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Organization": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Organization.schema.json",
      "title": "Organization",
      "definitions": {
        "Organization": {
          "$id": "#Organization",
          "type": "object",
          "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
          "properties": {
            "isLegalEntity": {
              "type": "boolean",
              "description": "If value is true, the organization is a legal entity known by a national referential."
            },
            "isHeadOffice": {
              "type": "boolean",
              "description": "If value is true, the organization is the head office"
            },
            "organizationType": {
              "type": "string",
              "description": "Type of Organization (company, department...)"
            },
            "tradingName": {
              "type": "string",
              "description": "Name that the organization (unit) trades under"
            },
            "existsDuring": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "name": {
              "type": "string",
              "description": "Organization name (department name for example)"
            },
            "nameType": {
              "type": "string",
              "description": "Type of the name : Co, Inc, Ltd,…"
            },
            "status": {
              "description": "Status of the organization",
              "$ref": "../EngagedParty/OrganizationStateType.schema.json#OrganizationStateType"
            },
            "otherName": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/OtherNameOrganization.schema.json#OtherNameOrganization"
              }
            },
            "organizationIdentification": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/OrganizationIdentification.schema.json#OrganizationIdentification"
              }
            },
            "organizationChildRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/OrganizationChildRelationship.schema.json#OrganizationChildRelationship"
              }
            },
            "organizationParentRelationship": {
              "$ref": "../EngagedParty/OrganizationParentRelationship.schema.json#OrganizationParentRelationship"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Party.schema.json#Party"
            },
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrganizationChildRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrganizationChildRelationship.schema.json",
      "title": "OrganizationChildRelationship",
      "definitions": {
        "OrganizationChildRelationship": {
          "$id": "#OrganizationChildRelationship",
          "type": "object",
          "description": "Child references of an organization in a structure of organizations.",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
            },
            "organization": {
              "$ref": "../EngagedParty/OrganizationRef.schema.json#OrganizationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrganizationIdentification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrganizationIdentification.schema.json",
      "title": "OrganizationIdentification",
      "definitions": {
        "OrganizationIdentification": {
          "$id": "#OrganizationIdentification",
          "description": "Represents our registration of information used as proof of identity by an organization",
          "type": "object",
          "properties": {
            "identificationId": {
              "type": "string",
              "description": "Identifier"
            },
            "issuingAuthority": {
              "type": "string",
              "description": "Authority which has issued the identifier (chamber of commerce...)"
            },
            "issuingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the identifier was issued"
            },
            "identificationType": {
              "type": "string",
              "description": "Type of identification information used to identify the company in a country or internationally"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the identification information is valid."
            },
            "attachment": {
              "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrganizationParentRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrganizationParentRelationship.schema.json",
      "title": "OrganizationParentRelationship",
      "definitions": {
        "OrganizationParentRelationship": {
          "$id": "#OrganizationParentRelationship",
          "type": "object",
          "description": "Parent references of an organization in a structure of organizations.",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
            },
            "organization": {
              "$ref": "../EngagedParty/OrganizationRef.schema.json#OrganizationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OrganizationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrganizationRef.schema.json",
      "title": "OrganizationRef",
      "definitions": {
        "OrganizationRef": {
          "$id": "#OrganizationRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "OrganizationStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OrganizationStateType.schema.json",
      "title": "OrganizationStateType",
      "definitions": {
        "OrganizationStateType": {
          "$id": "#OrganizationStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the organization",
          "enum": [
            "initialized",
            "validated",
            "closed"
          ]
        }
      }
    }
  ],
  "OtherName": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OtherName.schema.json",
      "title": "OtherName",
      "definitions": {
        "OtherName": {
          "$id": "#OtherName",
          "description": "To keep track of other names (for example the old name of a woman before marriage or an artist name)",
          "type": "object",
          "properties": {
            "familyName": {
              "type": "string",
              "description": "Last name"
            },
            "formattedName": {
              "type": "string",
              "description": "A formatted name useful for specific contexts (chinese, japanese, korean...)"
            },
            "fullName": {
              "type": "string",
              "description": "Full name flatten (first, middle, and last name)"
            },
            "givenName": {
              "type": "string",
              "description": "First name"
            },
            "middleName": {
              "type": "string",
              "description": "Middle name"
            },
            "nameType": {
              "type": "string",
              "description": "Co., Inc., Ltd., Plc., Gmbh."
            },
            "title": {
              "type": "string",
              "description": "useful for titles (aristocratic, social...) Dr, Pr, Sir..."
            },
            "tradingName": {
              "type": "string",
              "description": "The name that the organization trades under"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the other name is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OtherNameIndividual": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OtherNameIndividual.schema.json",
      "title": "OtherNameIndividual",
      "definitions": {
        "OtherNameIndividual": {
          "$id": "#OtherNameIndividual",
          "type": "object",
          "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name.",
          "properties": {
            "title": {
              "type": "string",
              "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,...."
            },
            "aristocraticTitle": {
              "type": "string",
              "description": "e.g. Baron, Graf, Earl,…"
            },
            "generation": {
              "type": "string",
              "description": "e.g. Sr, Jr…"
            },
            "givenName": {
              "type": "string",
              "description": "First name"
            },
            "preferredGivenName": {
              "type": "string",
              "description": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
            },
            "familyNamePrefix": {
              "type": "string",
              "description": "Family name prefix"
            },
            "familyName": {
              "type": "string",
              "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
            },
            "legalName": {
              "type": "string",
              "description": "Legal name or birth name (name one has for official purposes)"
            },
            "middleName": {
              "type": "string",
              "description": "Middle name or initial"
            },
            "fullName": {
              "type": "string",
              "description": "Full name flatten (first, middle, and last names)"
            },
            "formattedName": {
              "type": "string",
              "description": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "OtherNameOrganization": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "OtherNameOrganization.schema.json",
      "title": "OtherNameOrganization",
      "definitions": {
        "OtherNameOrganization": {
          "$id": "#OtherNameOrganization",
          "type": "object",
          "description": "Keeps track of other names, for example the old name of an organization.",
          "properties": {
            "tradingName": {
              "type": "string",
              "description": "The name that the organization trades under"
            },
            "nameType": {
              "type": "string",
              "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
            },
            "name": {
              "type": "string",
              "description": "Organization name (department name for example)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PackingEnumType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PackingEnumType.schema.json",
      "title": "PackingEnumType",
      "definitions": {
        "PackingEnumType": {
          "$id": "PackingEnumType",
          "description": "Enumeration of supported packing/packaging. All extensions allowed.",
          "type": "string",
          "enum": [
            "NO_PACKING",
            "GZIP",
            "TAR",
            "VENDOR_EXT",
            "MINOR_EXT"
          ]
        }
      }
    }
  ],
  "PackingType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PackingType.schema.json",
      "title": "PackingType",
      "definitions": {
        "PackingType": {
          "$id": "PackingType",
          "description": "Specify if the output file(s) are to be packed.",
          "type": "object",
          "properties": {
            "packingEnumType": {
              "$ref": "PackingEnumType.schema.json#/definitions/PackingEnumType"
            }
          }
        }
      }
    }
  ],
  "ParentAlarm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ParentAlarm.schema.json",
      "title": "ParentAlarm",
      "definitions": {
        "ParentAlarm": {
          "$id": "#ParentAlarm",
          "type": "object",
          "description": "Indicates the alarms attached to this alarm as parent alarms from a correlation point of view. ",
          "properties": {
            "id": {
              "type": "string"
            },
            "href": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "ParkingAccess": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Parking/ParkingAcccess/schema.json",
      "title": "FIWARE - Parking / Parking Access",
      "description": "Parking Access - TODO: Provide a complete Schema",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ParkingAccess"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "ParkingGroup": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Parking/ParkingGroup/schema.json",
      "title": "FIWARE - Parking / Parking Group",
      "description": "Parking Group - TODO: Provide a complete Schema",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ParkingGroup"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "required": [
        "id",
        "type"
      ]
    }
  ],
  "ParkingSpot": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/Parking/ParkingSpot/schema.json",
      "title": "FIWARE - Parking / Parking Spot",
      "description": "A parking spot is an area well delimited where one vehicle can be parked. The aim of this entity type is to monitor the status of parking spots individually. Thus, an entity of type ParkingSpot cannot exist without a containing entity of type (OnStreetParking, OffStreetParking). A parking spot might belong to one group.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "ParkingSpot"
              ],
              "description": "NGSI Entity type"
            },
            "status": {
              "type": "string",
              "enum": [
                "occupied",
                "free",
                "closed",
                "unknown"
              ]
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "length": {
              "type": "number",
              "minimum": 0
            },
            "refParkingGroup": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refParkingSite": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "onstreet",
                  "offstreet"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "refDevice": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "TimeInstant": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ],
      "required": [
        "id",
        "location",
        "type",
        "status",
        "category",
        "refParkingSite"
      ]
    }
  ],
  "Partner": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Partner.schema.json",
      "title": "Partner",
      "definitions": {
        "Partner": {
          "$id": "#Partner",
          "description": "The part played by a party in a given context.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Url used to reference the partner."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for Partners"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which the Partner is known and distinguished from other Partners."
            },
            "status": {
              "type": "string",
              "description": "Used to track the lifecycle status of the partner."
            },
            "statusReason": {
              "type": "string",
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the Partner is valid for."
            },
            "engagedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The reference to the party engaged in this partnership."
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Describes the characteristic of a partner."
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CreditProfile.schema.json#CreditProfile"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ],
          "required": [
            "name",
            "engagedParty"
          ]
        }
      }
    }
  ],
  "Partnership": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Partnership.schema.json",
      "title": "Partnership",
      "definitions": {
        "Partnership": {
          "$id": "#Partnership",
          "description": "A partnership represents a formalized collaboration between various parties, each party playing a role in the partnership. The parties playing a role in the partnership represented by the Partner entity. The structure of a partnership is specified by a PartnershipSpecification which contain all the information for the setup of the partnership, including the list of identified roles and the agreement that should apply.",
          "type": "object",
          "required": [
            "name",
            "specification"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text regarding this partnership"
            },
            "href": {
              "type": "string",
              "description": "The reference url for this partnership"
            },
            "id": {
              "type": "string",
              "description": "The identifier of the partnership"
            },
            "name": {
              "type": "string",
              "description": "An identifying name for the partnership."
            },
            "specification": {
              "description": "The specification of this partnership.",
              "$ref": "../EngagedParty/PartnershipSpecificationRef.schema.json#PartnershipSpecificationRef"
            },
            "partner": {
              "description": "The list of partners of the partnership, where a partner represents a party playing a given role. Hence a partner structure includes primarily a reference to the engaged party and a role name matching necessarily the name of one of the role specifications defined in the specification of the partnership.",
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/Partner.schema.json#Partner"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartnershipRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipRef.schema.json",
      "title": "PartnershipRef",
      "definitions": {
        "PartnershipRef": {
          "$id": "#PartnershipRef",
          "description": "Partnership reference. A partnership contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference url for the partnership"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the partnership"
            },
            "name": {
              "type": "string",
              "description": "Name of the partnership"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartnershipSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipSpecification.schema.json",
      "title": "PartnershipSpecification",
      "definitions": {
        "PartnershipSpecification": {
          "$id": "#PartnershipSpecification",
          "description": "A partnership specification contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text regarding this partnership specification"
            },
            "href": {
              "type": "string",
              "description": "The reference url for this partnership specification"
            },
            "id": {
              "type": "string",
              "description": "The identifier of the partnership specification"
            },
            "name": {
              "type": "string",
              "description": "An identifying name for the partnership specification."
            },
            "roleSpecification": {
              "description": "The list of roles specifications a engaged party will be able to play for this kind of partnership",
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RoleSpecification.schema.json#RoleSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartnershipSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipSpecificationRef.schema.json",
      "title": "PartnershipSpecificationRef",
      "definitions": {
        "PartnershipSpecificationRef": {
          "$id": "#PartnershipSpecificationRef",
          "description": "PartnershipSpecification reference. A partnership specification contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference url for the partnership specification"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the partnership specification"
            },
            "name": {
              "type": "string",
              "description": "Name of the partnership specification"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartnershipSpecificationRoleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipSpecificationRoleRef.schema.json.schema.json",
      "title": "PartnershipSpecificationRoleRef",
      "definitions": {
        "PartnershipSpecificationRoleRef.schema.json": {
          "$id": "#PartnershipSpecificationRoleRef.schema.json",
          "description": "Reference to the RoleSpecification reference contained within a given partnership specification.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "The href of the containing partnership specification."
            },
            "id": {
              "type": "string",
              "description": "The id of the containing partnership specification."
            },
            "name": {
              "type": "string",
              "description": "The name of the partnership specification."
            },
            "roleName": {
              "type": "string",
              "description": "The name of the role specification - which should be defined within the partnership specification"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartnershipType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipType.schema.json",
      "title": "PartnershipType",
      "definitions": {
        "PartnershipType": {
          "$id": "#PartnershipType",
          "description": "A partnership type contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text regarding this partnership type"
            },
            "href": {
              "type": "string",
              "description": "The reference url for this partnership type"
            },
            "id": {
              "type": "string",
              "description": "The identifier of the partnership type"
            },
            "name": {
              "type": "string",
              "description": "An identifying name for the partnership type."
            },
            "roleType": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RoleType.schema.json#RoleType"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartnershipTypeRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartnershipTypeRef.schema.json",
      "title": "PartnershipTypeRef",
      "definitions": {
        "PartnershipTypeRef": {
          "$id": "#PartnershipTypeRef",
          "description": "PartnershipType reference. A partnership type contains all the information for the setup of a partnership of a given kind. This includes the list of identified role types for the partnership with the corresponding agreement specifications.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference url for the partnership type"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the partnership"
            },
            "name": {
              "type": "string",
              "description": "Name of the partnership type"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Party": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Party.schema.json",
      "title": "Party",
      "definitions": {
        "Party": {
          "$id": "#Party",
          "type": "object",
          "description": "Generic Party structure used to define commonalities between sub concepts of Individual and Organization.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the organization"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the organization"
            },
            "externalReference": {
              "type": "array",
              "items": {
                "$ref": "../Common/ExternalReference.schema.json#ExternalReference"
              }
            },
            "partyCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "taxExemptionCertificate": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/TaxExemptionCertificate.schema.json#TaxExemptionCertificate"
              }
            },
            "creditRating": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/PartyCreditProfile.schema.json#PartyCreditProfile"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyAccount.schema.json",
      "title": "PartyAccount",
      "definitions": {
        "PartyAccount": {
          "$id": "#PartyAccount",
          "description": "Account used for billing or for settlement purposes concerning a given party (an organization or an individual). It is a specialization of entity Account.",
          "type": "object",
          "required": [
            "name",
            "relatedParty"
          ],
          "properties": {
            "paymentStatus": {
              "type": "string",
              "description": "The condition of the account, such as due, paid, in arrears."
            },
            "billStructure": {
              "$ref": "../Customer/BillStructure.schema.json#BillStructure"
            },
            "paymentPlan": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentPlan.schema.json#PaymentPlan"
              }
            },
            "financialAccount": {
              "$ref": "../EngagedParty/FinancialAccountRef.schema.json#FinancialAccountRef"
            },
            "defaultPaymentMethod": {
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Account.schema.json#Account"
            }
          ]
        }
      }
    }
  ],
  "PartyAccountRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyAccountRef.schema.json",
      "title": "PartyAccountRef",
      "definitions": {
        "PartyAccountRef": {
          "$id": "#PartyAccountRef",
          "description": "PartyAccount reference. A party account is an arrangement that a party has with an enterprise that provides products to the party.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Detailed description of the party account"
            },
            "href": {
              "type": "string",
              "description": "Reference of the party account"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the party account"
            },
            "name": {
              "type": "string",
              "description": "Name of the party account"
            },
            "status": {
              "type": "string",
              "description": "The condition of the account, such as due, paid, in arrears."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyBill": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyBill.schema.json",
      "title": "PartyBill",
      "definitions": {
        "PartyBill": {
          "$id": "#PartyBill",
          "type": "object",
          "properties": {
            "amountDue": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount due for this bill expressed in the given currency"
            },
            "billDate": {
              "type": "string",
              "format": "date-time",
              "description": "Bill date"
            },
            "billingPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Billing period of the bill (used for onCycle bill only)"
            },
            "billNo": {
              "type": "string",
              "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id."
            },
            "category": {
              "type": "string",
              "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note"
            },
            "href": {
              "type": "string",
              "description": "Bill unique reference"
            },
            "id": {
              "type": "string",
              "description": "Bill unique identifier"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of bill last update"
            },
            "nextBillDate": {
              "type": "string",
              "format": "date-time",
              "description": "Approximate date of  the next bill production given for information (only used for onCycle bill)"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the amount due should have been paid"
            },
            "remainingAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Remaining amount to be paid for this bill expressed in the given currency"
            },
            "runType": {
              "type": "string",
              "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)"
            },
            "state": {
              "type": "string",
              "description": "State that a bill could take during its lifecycle : New, Validated, On Hold, Sent, Partially paid or Settled"
            },
            "taxExcludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Total tax excluded amount expressed in the given currency"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Total tax included amount expressed in the given"
            },
            "billDocument": {
              "type": "array",
              "items": {
                "$ref": "../Common/FileDocument.schema.json#FileDocument"
              },
              "description": "Document(s) associated to the bill"
            },
            "paymentItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentItem.schema.json#PaymentItem"
              },
              "description": "Payment items already lettered on this bill."
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              }
            },
            "paymentMethod": {
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "financialAccount": {
              "$ref": "../EngagedParty/FinancialAccountRef.schema.json#FinancialAccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyCreditProfile": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyCreditProfile.schema.json",
      "title": "PartyCreditProfile",
      "definitions": {
        "PartyCreditProfile": {
          "$id": "#PartyCreditProfile",
          "type": "object",
          "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
          "properties": {
            "creditAgencyName": {
              "type": "string",
              "description": "Name of the credit agency giving the score"
            },
            "creditAgencyType": {
              "type": "string",
              "description": "Type of the credit agency giving the score"
            },
            "ratingReference": {
              "type": "string",
              "description": "Reference corresponding to the credit rating"
            },
            "ratingScore": {
              "type": "integer",
              "format": "int32",
              "description": "A measure of a party’s creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyInteraction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyInteraction.schema.json",
      "title": "PartyInteraction",
      "definitions": {
        "PartyInteraction": {
          "$id": "#PartyInteraction",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the party interaction"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the party interaction"
            },
            "interactionDate": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period during which the interaction took place. Start and end will be different in case of a call or a store visit. They will be the same (or only one will appear) in case of a message or other momentary interactions."
            },
            "description": {
              "type": "string",
              "description": "Description of the interaction"
            },
            "reason": {
              "type": "string",
              "description": "Reason why the interaction happened"
            },
            "status": {
              "type": "string",
              "description": "Status of the interaction (opened, inProgress, completed)"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Last time the status changed"
            },
            "direction": {
              "type": "string",
              "description": "Specifies who started the interaction. It might be the party or the enterprise exposing this API. Possible values are “inbound” and “outbound”"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the interaction is created in the system"
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/Channel.schema.json#RelatedChannel"
              },
              "description": "Where the interaction took place (e.g. web, mobile app, store, kiosk, etc.)"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "interactionItem": {
              "type": "array",
              "items": {
                "$ref": "InteractionItem.schema.json#InteractionItem"
              }
            },
            "interactionRelationship": {
              "type": "array",
              "items": {
                "$ref": "InteractionRelationship.schema.json#InteractionRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyInteractionStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyInteractionStatusExampleType.schema.json",
      "title": "PartyInteractionStatusExampleType",
      "definitions": {
        "PartyInteractionStatusExampleType": {
          "$id": "#PartyInteractionStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of party interaction (for example: open,inProgress,completed)",
          "enum": [
            "open",
            "inProgress",
            "completed"
          ]
        }
      }
    }
  ],
  "PartyOrPartyRoleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyOrPartyRoleRef.schema.json",
      "title": "PartyOrPartyRoleRef",
      "definitions": {
        "PartyOrPartyRoleRef": {
          "$id": "#PartyOrPartyRoleRef",
          "description": "Party reference. A party represents an organization or an individual.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Text describing the referred party"
            },
            "href": {
              "type": "string",
              "description": "Reference of the referred party (such as a partner or any other party role)."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the referred party"
            },
            "name": {
              "type": "string",
              "description": "Name of the referred party (such as a partner or any other party role)"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyAgreement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyAgreement.schema.json",
      "title": "PartyPrivacyAgreement",
      "definitions": {
        "PartyPrivacyAgreement": {
          "$id": "#PartyPrivacyAgreement",
          "type": "object",
          "description": "A specific type of agreement that formalizes the privacy profiles requested for a party",
          "properties": {
            "partyPrivacyProfile": {
              "type": "array",
              "description": "The privacy profiles that are the subject of the agreement",
              "items": {
                "$ref": "../EngagedParty/PartyPrivacyProfileRef.schema.json#PartyPrivacyProfileRef"
              }
            },
            "partyPrivacyProfileCharacteristic": {
              "type": "array",
              "description": "A list of (typically) high criticality characteristics whose chosen privacy rules are included in the agreement",
              "items": {
                "$ref": "../EngagedParty/PartyPrivacyProfileCharacteristic.schema.json#PartyPrivacyProfileCharacteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Agreement.schema.json#Agreement"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyAgreementRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyAgreementRef.schema.json",
      "title": "PartyPrivacyAgreementRef",
      "definitions": {
        "PartyPrivacyAgreementRef": {
          "$id": "#PartyPrivacyAgreementRef",
          "type": "object",
          "description": "Reference to Party Privacy Agreement resource",
          "allOf": [
            {
              "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyAgreementStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyAgreementStatusExampleType.schema.json",
      "title": "PartyPrivacyAgreementStatusExampleType",
      "definitions": {
        "PartyPrivacyAgreementStatusExampleType": {
          "$id": "#PartyPrivacyAgreementStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of party privacy profile agreement (for example: intialized, inProgress, rejected, pendingUpdate, validated)",
          "enum": [
            "initialized",
            "inProgress",
            "rejected",
            "pendingUpdate",
            "validated"
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfile": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfile.schema.json",
      "title": "PartyPrivacyProfile",
      "definitions": {
        "PartyPrivacyProfile": {
          "$id": "#PartyPrivacyProfile",
          "type": "object",
          "description": "A Party Privacy Profile represents the set of Privacy settings defined for a Party",
          "properties": {
            "applicableForParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies."
            },
            "agreedByParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies."
            },
            "agreement": {
              "$ref": "../EngagedParty/PartyPrivacyAgreementRef.schema.json#PartyPrivacyAgreementRef",
              "description": "An agreement under which the privacy profile was produced."
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the PartyPrivacyProfile was created"
            },
            "description": {
              "type": "string",
              "description": "Description of the privacy profile"
            },
            "href": {
              "type": "string",
              "description": "URI reference of the privacy profile allowing navigation to the resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the privacy profile"
            },
            "name": {
              "type": "string",
              "description": "Name of the privacy profile"
            },
            "partyPrivacyProfileCharacteristic": {
              "type": "array",
              "description": "List of characteristics of the privacy profile",
              "items": {
                "$ref": "../EngagedParty/PartyPrivacyProfileCharacteristic.schema.json#PartyPrivacyProfileCharacteristic"
              }
            },
            "partyPrivacyProfileSpecification": {
              "$ref": "../EngagedParty/PartyPrivacyProfileSpecificationRef.schema.json#PartyPrivacyProfileSpecificationRef",
              "description": "The specification from which this profile was instantiated"
            },
            "status": {
              "type": "string",
              "description": "The status of this profile (for example: created, terminated, etc.)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfileCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileCharacteristic.schema.json",
      "title": "PartyPrivacyProfileCharacteristic",
      "definitions": {
        "PartyPrivacyProfileCharacteristic": {
          "$id": "#PartyPrivacyProfileCharacteristic",
          "type": "object",
          "description": "A characteristic for an instantiated party profile, where the value indicates the allowed use of the characteristic",
          "properties": {
            "id": {
              "type": "string"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of parties to which the allowed use of the characteristic applies.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "privacyUsagePurpose": {
              "type": "string",
              "description": "Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH, etc."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfileRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileRef.schema.json",
      "title": "PartyPrivacyProfileRef",
      "definitions": {
        "PartyPrivacyProfileRef": {
          "$id": "#PartyPrivacyProfileRef",
          "type": "object",
          "description": "Reference to Party Privacy Profile resource",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfileSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileSpecification.schema.json",
      "title": "PartyPrivacyProfileSpecification",
      "definitions": {
        "PartyPrivacyProfileSpecification": {
          "$id": "#PartyPrivacyProfileSpecification",
          "type": "object",
          "description": "Party Privacy Profile Specification serves as a template for creating Privacy Profiles. The specification defines characteristics for the profile. For example there might be a profile specification for residential customers, and a different specification for partners.",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the specification"
            },
            "applicableRole": {
              "description": "A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent.",
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/PartyPrivacyRoleSpecification.schema.json#PartyPrivacyRoleSpecification"
              }
            },
            "href": {
              "type": "string",
              "format": "hostname",
              "description": "URI reference of the specification allowing navigation to the resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the specification"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the specification was last updated"
            },
            "status": {
              "type": "string",
              "description": "Lifecycle status of the specification (for example: In Design, Active, Rejected, Retired)"
            },
            "name": {
              "type": "string",
              "description": "Name of the specification"
            },
            "partyPrivacyProfileSpecCharacteristic": {
              "type": "array",
              "description": "List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated",
              "items": {
                "$ref": "../EngagedParty/PartyPrivacyProfileSpecificationCharacteristic.schema.json#PartyPrivacyProfileSpecificationCharacteristic"
              }
            },
            "productOffering": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "List of parties or party roles involved in the definition or management of the specification",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which the specification is valid"
            },
            "version": {
              "type": "string",
              "description": "The version of the specification, in case it is desired to maintain multiple versions of profile specifications"
            }
          }
        }
      }
    }
  ],
  "PartyPrivacyProfileSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileSpecificationCharacteristic.schema.json",
      "title": "PartyPrivacyProfileSpecificationCharacteristic",
      "definitions": {
        "PartyPrivacyProfileSpecificationCharacteristic": {
          "$id": "#PartyPrivacyProfileSpecificationCharacteristic",
          "description": "A characteristic of the party privacy profile, whose value(s) would be supplied at runtime. For example, email address",
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Name of the characteristic"
            },
            "description": {
              "type": "string",
              "description": "Description of the characteristic"
            },
            "criticalityLevel": {
              "type": "string",
              "description": "Level of criticality for this characteristic of personal identifiable information (e.g. in terms of the damage if this item was breached), such as low, medium, high."
            },
            "privacyUsagePurpose": {
              "type": "string",
              "description": "Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH)."
            },
            "privacyType": {
              "type": "string",
              "description": "Type of privacy (e.g. Internal Purpose, External Purpose, Internal Retention, External Retention)"
            },
            "allowedRole": {
              "type": "array",
              "description": "A list of roles in the organization who are allowed access to this characteristic",
              "items": {
                "$ref": "../EngagedParty/RoleSpecification.schema.json#RoleSpecification"
              }
            },
            "partyPrivacyProfileSpecCharacteristicValue": {
              "type": "array",
              "description": "List of values that can be assigned to this characteristic at runtime",
              "items": {
                "$ref": "../Common/SpecificationCharacteristicValue.schema.json#SpecificationCharacteristicValue"
              }
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which this characteristic specification is valid."
            }
          }
        }
      }
    }
  ],
  "PartyPrivacyProfileSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileSpecificationRef.schema.json",
      "title": "PartyPrivacyProfileSpecificationRef",
      "definitions": {
        "PartyPrivacyProfileSpecificationRef": {
          "$id": "#PartyPrivacyProfileSpecificationRef",
          "type": "object",
          "description": "Reference to Party Privacy Specification resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfileSpecificationStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileSpecificationStatusExampleType.schema.json",
      "title": "PartyPrivacyProfileSpecificationStatusExampleType",
      "definitions": {
        "PartyPrivacyProfileSpecificationStatusExampleType": {
          "$id": "#PartyPrivacyProfileSpecificationStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of party privacy profile Specification (for example: inDesign, active, rejected, retired)",
          "enum": [
            "inDesign",
            "active",
            "rejected",
            "retired"
          ]
        }
      }
    }
  ],
  "PartyPrivacyProfileStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyProfileStatusExampleType.schema.json",
      "title": "PartyPrivacyProfileStatusExampleType",
      "definitions": {
        "PartyPrivacyProfileStatusExampleType": {
          "$id": "#PartyPrivacyProfileStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of party privacy profile (for example: created, terminated)",
          "enum": [
            "created",
            "terminated"
          ]
        }
      }
    }
  ],
  "PartyPrivacyRoleSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyPrivacyRoleSpecification.schema.json",
      "title": "PartyPrivacyRoleSpecification",
      "definitions": {
        "PartyPrivacyRoleSpecification": {
          "$id": "#PartyPrivacyRoleSpecification",
          "description": "A PartyPrivacyRoleSpecification represents a specification of a role defined in the context of a given privacy spesification, such as Customer, User.",
          "type": "object",
          "properties": {
            "agreementSpecification": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementSpecificationRef.schema.json#AgreementSpecificationRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/RoleSpecification.schema.json#RoleSpecification"
            }
          ]
        }
      }
    }
  ],
  "PartyRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRef.schema.json",
      "title": "PartyRef",
      "definitions": {
        "PartyRef": {
          "$id": "#PartyRef",
          "type": "object",
          "required": [
            "@referredType"
          ],
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PartyRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRefOrValue.schema.json",
      "title": "PartyRefOrValue",
      "definitions": {
        "PartyRefOrValue": {
          "$id": "#PartyRefOrValue",
          "type": "object",
          "allOf": [
            {
              "$ref": "../EngagedParty/PartyRef.schema.json#/definitions/PartyRef"
            },
            {
              "$ref": "../EngagedParty/Party.schema.json#/definitions/Party"
            }
          ]
        }
      }
    }
  ],
  "PartyRole": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRole.schema.json",
      "title": "PartyRole",
      "definitions": {
        "PartyRole": {
          "$id": "#PartyRole",
          "description": "The part played by a party in a given context.",
          "type": "object",
          "required": [
            "name",
            "roleType"
          ],
          "properties": {
            "href": {
              "type": "string",
              "description": "Url used to reference the party role."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for PartyRoles"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
            },
            "status": {
              "type": "string",
              "description": "Used to track the lifecycle status of the party role."
            },
            "statusReason": {
              "type": "string",
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period that the PartyRole is valid for."
            },
            "engagedParty": {
              "$ref": "../EngagedParty/PartyRef.schema.json#RelatedPartyRefOrValue"
            },
            "roleType": {
              "$ref": "../EngagedParty/RoleTypeRef.schema.json#RoleTypeRef"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Describes the characteristic of a party role."
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CreditProfile.schema.json#CreditProfile"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedPartyRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyRoleProductOfferingRiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRoleProductOfferingRiskAssessment.schema.json",
      "title": "PartyRoleProductOfferingRiskAssessment",
      "definitions": {
        "PartyRoleProductOfferingRiskAssessment": {
          "$id": "#PartyRoleProductOfferingRiskAssessment",
          "description": "This is a task resource allowing assessment of the risks associated with a party or party role that considers acquiring a specific product offering",
          "type": "object",
          "required": [
            "partyRole",
            "productOffering"
          ],
          "properties": {
            "partyRole": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party or party role for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.json#ProductOfferingRef",
              "description": "The product offering for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            }
          },
          "allOf": [
            {
              "$ref": "RiskAssessment.schema.json#RiskAssessment"
            }
          ]
        }
      }
    }
  ],
  "PartyRoleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRoleRef.schema.json",
      "title": "PartyRoleRef",
      "definitions": {
        "PartyRoleRef": {
          "$id": "#PartyRoleRef",
          "description": "Party role reference. A party role represents the part played by a party in a given context.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "name": {
              "type": "string",
              "description": "The name of the referred party role."
            },
            "partyId": {
              "type": "string",
              "description": "The identifier of the engaged party that is linked to the PartyRole object."
            },
            "partyName": {
              "type": "string",
              "description": "The name of the engaged party that is linked to the PartyRole object."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PartyRoleRiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PartyRoleRiskAssessment.schema.json",
      "title": "PartyRoleRiskAssessment",
      "definitions": {
        "PartyRoleRiskAssessment": {
          "$id": "#PartyRoleRiskAssessment",
          "description": "This is a task resource allowing assessment of the risks associated with a party role",
          "type": "object",
          "required": [
            "partyRole"
          ],
          "properties": {
            "partyRole": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "The party role for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            }
          },
          "allOf": [
            {
              "$ref": "RiskAssessment.schema.json#RiskAssessment"
            }
          ]
        }
      }
    }
  ],
  "Payment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Payment.schema.json",
      "title": "Payment",
      "definitions": {
        "Payment": {
          "$id": "#Payment",
          "required": [
            "paymentMethod",
            "account"
          ],
          "description": "The Payment resource represents a performed payment. It contains both information about the payment and the payment method used to perform it.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of Payment"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the Payment"
            },
            "correlatorId": {
              "type": "string",
              "description": "Unique identifier in the client for the payment in case it is needed to correlate"
            },
            "paymentDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the payment was performed"
            },
            "name": {
              "type": "string",
              "description": "Screen name of the payment"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment"
            },
            "authorizationCode": {
              "type": "string",
              "description": "Authorization code retrieved from an external payment gateway that could be used for conciliation"
            },
            "status": {
              "type": "string",
              "description": "Status of the payment"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the status was recorded"
            },
            "amount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be paid (net of taxes)"
            },
            "taxAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax applied"
            },
            "totalAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be paid (including taxes)"
            },
            "channel": {
              "$ref": "../Customer/ChannelRef.schema.json#ChannelRef"
            },
            "paymentItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentItem.schema.json#PaymentItem"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "paymentMethod": {
              "$ref": "../Customer/PaymentMethodRefOrValue.schema.json#PaymentMethodRefOrValue"
            },
            "account": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            },
            "pointOfInteraction": {
              "$ref": "../Customer/PointOfInteraction.schema.json#PointOfInteraction"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PaymentAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentAnalytics.schema.json",
      "title": "PaymentAnalytics",
      "definitions": {
        "PaymentAnalytics": {
          "$id": "#PaymentAnalytics",
          "type": "object",
          "properties": {
            "paymentDueAmount": {
              "type": "number",
              "format": "integer",
              "description": "Payment due amount"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Payment due date"
            },
            "paymentPaidAmount": {
              "type": "number",
              "format": "integer",
              "description": "Payment paid amount"
            },
            "paymentPaidDate": {
              "type": "string",
              "format": "date-time",
              "description": "Payment paid date"
            },
            "paymentPaidPostingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Posting date for payment paid"
            },
            "paymentPaidValueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Value date for payment paid"
            },
            "paymentPaidDiscountAmount": {
              "type": "number",
              "format": "integer",
              "description": "Cash discount granted for clearing"
            },
            "bankCountryCode": {
              "type": "number",
              "format": "integer",
              "description": "Bank country key"
            },
            "bankNumber": {
              "type": "number",
              "format": "integer",
              "description": "Bank number"
            },
            "bankAccountNumber": {
              "type": "number",
              "format": "integer",
              "description": "Bank account number"
            },
            "iban": {
              "type": "number",
              "format": "integer",
              "description": "IBAN (International Bank Account Number)"
            },
            "swift": {
              "type": "number",
              "format": "integer",
              "description": "SWIFT Code / Bank Identifier Code (BIC)"
            },
            "paymentCardNumber": {
              "type": "number",
              "format": "integer",
              "description": "Payment card number"
            },
            "paymentCardValidFromDate": {
              "type": "string",
              "format": "date-time",
              "description": "Payment card valid from"
            },
            "paymentCardValidToDate": {
              "type": "string",
              "format": "date-time",
              "description": "Payment card valid to"
            },
            "paymentCardAuthorizationNumber": {
              "type": "number",
              "format": "integer",
              "description": "Payment card authorization number"
            },
            "paymentCardAuthorizationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Payment card authorization date"
            },
            "checkNumber": {
              "type": "number",
              "format": "integer",
              "description": "Check number"
            },
            "paymentInstallmentNumber": {
              "type": "number",
              "format": "integer",
              "description": "Payment number within payments associated with the same installment"
            },
            "invoiceReferenceIssueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of invoice associated with this payment"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "PaymentItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentItem.schema.json",
      "title": "PaymentItem",
      "definitions": {
        "PaymentItem": {
          "$id": "#PaymentItem",
          "required": [
            "item"
          ],
          "description": "The paymentItem is the result of lettering process. It enables to assign automatically or manually part of incoming payment amount to a bill",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the payment Item"
            },
            "amount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be paid (net of taxes)"
            },
            "taxAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax applied"
            },
            "totalAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be paid (including taxes)"
            },
            "item": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PaymentMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentMethod.schema.json",
      "title": "PaymentMethod",
      "definitions": {
        "PaymentMethod": {
          "$id": "#PaymentMethod",
          "description": "A Payment Method is a pure-virtual super-class that defines a specific method of payment such as Direct Debit, Cash, Digital Wallet,Tokenized Card, Bank Account Transfer, Bank Account Debit, Bank Card, Voucher, Check, Bucket PaymentMethod, Account PaymentMethod, and Loyalty PaymentMethod with all details associated. Use the @type attribute to specify the concrete type in the API calls.",
          "type": "object",
          "required": [
            "@type",
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method",
              "examples": [
                "Main credit card"
              ]
            },
            "description": {
              "type": "string",
              "description": "Text description of the contents of the payment method",
              "examples": [
                "My gold mastercard."
              ]
            },
            "isPreferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account",
              "examples": [
                "True",
                "False"
              ]
            },
            "authorizationCode": {
              "type": "string",
              "description": "Review: Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own.",
              "examples": [
                "1234567890"
              ]
            },
            "status": {
              "type": "string",
              "description": "Status of the payment method",
              "examples": [
                "Active",
                "InActive",
                "New"
              ]
            },
            "statusDate": {
              "type": "string",
              "format": "date-time",
              "description": "The last time the payment method status changed.",
              "examples": [
                "2020-07-17T10:12:26+0000"
              ]
            },
            "statusReason": {
              "type": "string",
              "description": "The reason for the last status change.",
              "examples": [
                "This payment method has expired, therefore its status is now inactive."
              ]
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "@type": {
              "type": "string",
              "enum": [
                "cash",
                "digitalWallet",
                "tokenizedCard",
                "bankAccountTransfer",
                "bankAccountDebit",
                "bankCard",
                "voucher",
                "check",
                "bucketPaymentMethod",
                "accountPaymentMethod",
                "loyaltyPaymentMethod",
                "directDebit"
              ],
              "description": "Type of payment method (e.g.: bank card, cash, voucher, etc)."
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "Reference to the customer or party that owns that payment method or can use it."
            },
            "relatedPlace": {
              "$ref": "../Common/RelatedPlace.schema.json#RelatedPlace",
              "description": "Reference to a place for billing or delivery address, if different to that of the related party."
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              },
              "description": "Reference to the accounts that are linked to the payment method. May be a party account or a financial account."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PaymentMethodRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentMethodRef.schema.json",
      "title": "PaymentMethodRef",
      "definitions": {
        "PaymentMethodRef": {
          "$id": "#PaymentMethodRef",
          "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PaymentMethodRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentMethodRefOrValue.schema.json",
      "title": "PaymentMethodRefOrValue",
      "definitions": {
        "PaymentMethodRefOrValue": {
          "description": "link to the resource that holds information about the payment mean used to complete the operation",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "PaymentPlan": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentPlan.schema.json",
      "title": "PaymentPlan",
      "definitions": {
        "PaymentPlan": {
          "$id": "#PaymentPlan",
          "description": "Defines a plan for payment (when a party wants to spread his payments)",
          "type": "object",
          "properties": {
            "numberOfPayments": {
              "type": "integer",
              "description": "Number of payments used to spread the global payment"
            },
            "paymentFrequency": {
              "type": "string",
              "description": "Frequency of the payments, such as monthly and bimonthly"
            },
            "priority": {
              "type": "integer",
              "description": "Priority of the payment plan"
            },
            "status": {
              "type": "string",
              "description": "Status of the payment plan (effective, ineffective)"
            },
            "totalAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount paid"
            },
            "planType": {
              "type": "string",
              "description": "Type of payment plan"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity period of the payment plan"
            },
            "paymentMethod": {
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PaymentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentRef.schema.json",
      "title": "PaymentRef",
      "definitions": {
        "PaymentRef": {
          "$id": "#PaymentRef",
          "type": "object",
          "description": "If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order.",
          "properties": {
            "name": {
              "type": "string",
              "description": "A name for the payment"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PaymentRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentRefOrValue.schema.json",
      "title": "PaymentRefOrValue",
      "definitions": {
        "PaymentRefOrValue": {
          "description": "link to the resource information about the payment operation",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
            },
            {
              "$ref": "../Customer/Payment.schema.json#Payment"
            }
          ]
        }
      }
    }
  ],
  "PaymentStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PaymentStatusExampleType.schema.json",
      "title": "PaymentStatusExampleType",
      "definitions": {
        "PaymentStatusExampleType": {
          "$id": "#PaymentStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of a payment",
          "enum": [
            "pendingAuthorization",
            "authorized",
            "captured",
            "failed",
            "canceled",
            "denied",
            "done"
          ]
        }
      }
    }
  ],
  "PerceivedSeverity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerceivedSeverity.schema.json",
      "title": "PerceivedSeverity",
      "definitions": {
        "PerceivedSeverity": {
          "$id": "#PerceivedSeverity",
          "description": "Lists the possible severities that can be allocated to an Alarm. The values are consistent with ITU-T Recommendation X.733.\nOnce an alarm has been cleared, its perceived severity is set to 'cleared' and can no longer be set.",
          "type": "string",
          "enum": [
            "critical",
            "major",
            "minor",
            "warning",
            "indeterminate",
            "cleared"
          ]
        }
      }
    }
  ],
  "PerformanceAlarmSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceAlarmSpecification.schema.json",
      "title": "PerformanceAlarmSpecification",
      "definitions": {
        "PerformanceAlarmSpecification": {
          "type": "object",
          "description": "The specification of how to populate the alarm fields when generating a threshold crossing alarm",
          "properties": {
            "perfAlarmSpecAdditionalText": {
              "type": "string",
              "description": "A value for the AdditionalText attribute as part of a threshold crossing alarm definition."
            },
            "perfAlarmSpecAlarmType": {
              "type": "string",
              "description": "A value for the AlarmType attribute as part of a threshold crossing alarm definition."
            },
            "perfAlarmSpecSeverity": {
              "type": "string",
              "description": "A value for the Severity attribute as part of a threshold crossing alarm definition"
            },
            "perfAlarmSpecSpecificProblem": {
              "type": "string",
              "description": "A value for the SpecificProblem attribute as part of a threshold crossing alarm definition"
            },
            "perfeAlarmProbableCause": {
              "type": "string",
              "description": "A value for the ProbableCause attribute as part of a threshold crossing alarm definition."
            }
          }
        }
      }
    }
  ],
  "PerformanceConsequence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceConsequence.schema.json",
      "title": "PerformanceConsequence",
      "definitions": {
        "PerformanceConsequence": {
          "type": "object",
          "description": "A Consequence can be applied as a result of a threshold crossing or a threshold ceasing to be crossed",
          "properties": {
            "alarmSpecification": {
              "$ref": "PerformanceAlarmSpecification.schema.json#/definitions/PerformanceAlarmSpecification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Consequence.schema.json#Consequence"
            }
          ]
        }
      }
    }
  ],
  "PerformanceIndicatorGroupSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceIndicatorGroupSpecification.schema.json",
      "title": "PerformanceIndicatorGroupSpecification",
      "definitions": {
        "PerformanceIndicatorGroupSpecification": {
          "$id": "#PerformanceIndicatorGroupSpecification",
          "description": "",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of Group specification",
              "type": "string"
            },
            "performanceIndicatorSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
              },
              "minItems": 1
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ],
          "required": [
            "name"
          ]
        }
      }
    }
  ],
  "PerformanceIndicatorSpecRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceIndicatorSpecRelationship.schema.json",
      "title": "PerformanceIndicatorSpecRelationship",
      "definitions": {
        "PerformanceIndicatorSpecRelationship": {
          "$id": "#PerformanceIndicatorSpecRelationship",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity",
          "type": "object",
          "properties": {
            "relationshipType": {
              "description": "",
              "type": "string"
            },
            "role": {
              "type": "string",
              "description": "The association role for this service specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the target specification"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target specification"
            },
            "name": {
              "type": "string",
              "description": "Name of the targetcharacteristic"
            },
            "validFor": {
              "description": "The period for which the performanceIndicatorSpecRelationship is valid",
              "$ref": "#/definitions/TimePeriod"
            }
          },
          "required": [
            "relationshipType",
            "validFor"
          ],
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "PerformanceIndicatorSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceIndicatorSpecification.schema.json",
      "title": "PerformanceIndicatorSpecification",
      "definitions": {
        "PerformanceIndicatorSpecification": {
          "$id": "#PerformanceIndicatorSpecification",
          "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.",
          "type": "object",
          "properties": {
            "id": {
              "description": "A unique identifier for the PerformanceIndicatorSpecification.",
              "type": "string"
            },
            "name": {
              "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications.",
              "type": "string"
            },
            "description": {
              "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is.",
              "type": "string"
            },
            "perspective": {
              "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation.",
              "type": "string"
            },
            "indicatorCategory": {
              "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent.",
              "type": "string"
            },
            "indicatorType": {
              "description": "A kind of value that the PerformanceIndicator can take; double float,int, string.",
              "$ref": "#/definitions/IndicatorType"
            },
            "derivationAlgorithm": {
              "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator.",
              "type": "string"
            },
            "derivationMethod": {
              "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth.",
              "type": "string"
            },
            "validFor": {
              "description": "The period of time during which the PerformanceIndicatorSpecification is applicable.",
              "$ref": "#/definitions/TimePeriod"
            },
            "collectionType": {
              "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods.",
              "$ref": "#/definitions/CollectionType"
            },
            "indicatorUnit": {
              "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc.",
              "type": "string"
            },
            "performanceIndicatorSpecRelationship": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
              },
              "minItems": 0
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "PerformanceIndicatorSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceIndicatorSpecificationRef.schema.json",
      "title": "PerformanceIndicatorSpecificationRef",
      "definitions": {
        "PerformanceIndicatorSpecificationRef": {
          "$id": "#PerformanceIndicatorSpecificationRef",
          "description": "PerformanceIndicatorSpecification reference: A PerformanceIndicatorSpecification is a detailed description of a tangible or intangible object made available externally in the form of a PerformanceIndicatorSpecification to customers or other parties playing a party role.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Version of the performance indicator specification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PerformanceIndicatorSpecificationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PerformanceIndicatorSpecificationRefOrValue.schema.json",
      "title": "PerformanceIndicatorSpecificationRefOrValue",
      "definitions": {
        "PerformanceIndicatorSpecificationRefOrValue": {
          "$id": "#PerformanceIndicatorSpecificationRefOrValue",
          "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Product/ProductRef.schema.json#PerformanceIndicatorSpecificationRef"
            },
            {
              "$ref": "../Product/Product.schema.json#PerformanceIndicatorSpecification"
            }
          ]
        }
      }
    }
  ],
  "Permission": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Permission.schema.json",
      "title": "Permission",
      "definitions": {
        "Permission": {
          "$id": "#Permission",
          "description": "The Permission resource represents the entitlement given by an individual (granter) to another individual (user) to get access to a set of his owned manageable assets. One single permission resource can hold information referring to privileges granted for multiple manageable assets.",
          "type": "object",
          "required": [
            "validFor",
            "user"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the permission"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the permission"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the payment was performed"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the permission is valid"
            },
            "user": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "granter": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "privilege": {
              "type": "array",
              "items": {
                "$ref": "../Common/Privilege.schema.json#Privilege"
              }
            },
            "assetUserRole": {
              "type": "array",
              "items": {
                "$ref": "../Common/AssetUserRole.schema.json#AssetUserRole"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PhoneMedium": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PhoneMedium.schema.json",
      "title": "PhoneMedium",
      "definitions": {
        "PhoneMedium": {
          "$id": "#PhoneMedium",
          "type": "object",
          "description": "Describes a phone number that could be used to contact a party (an individual or an organization)",
          "properties": {
            "phoneNumber": {
              "type": "string",
              "description": "The phone number of the contact"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/DigitalIdentityContactMedium.schema.json#DigitalIdentityContactMedium"
            }
          ]
        }
      }
    }
  ],
  "PhysicalResource": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PhysicalResource.schema.json",
      "title": "PhysicalResource",
      "definitions": {
        "PhysicalResource": {
          "type": "object",
          "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
          "properties": {
            "manufactureDate": {
              "type": "string",
              "format": "date-time",
              "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
            },
            "powerState": {
              "type": "string",
              "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
            },
            "serialNumber": {
              "type": "string",
              "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
            },
            "versionNumber": {
              "type": "string",
              "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
            }
          },
          "allOf": [
            {
              "$ref": "./Resource.schema.json#Resource"
            }
          ]
        }
      }
    }
  ],
  "PhysicalResourceSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PhysicalResourceSpecification.schema.json",
      "title": "PhysicalResourceSpecification",
      "definitions": {
        "PhysicalResourceSpecification": {
          "$id": "#PhysicalResourceSpecification",
          "description": "This is an example of a derived class of ResourceSpecification, and is used to define the invariant characteristics and behavior (attributes, methods, constraints, and relationships) of a PhysicalResource.",
          "type": "object",
          "properties": {
            "model": {
              "type": "string",
              "description": "This is a string that represents a manufacturer-allocated number used to identify the general type and/or category of the hardware item. This, in combination with the Part and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is an optional attribute."
            },
            "part": {
              "type": "string",
              "description": "This is a string that defines a manufacturer-allocated part number assigned by the organization that manufactures the hardware item. This, in combination with the Model and the Vendor, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute."
            },
            "sku": {
              "type": "string",
              "description": "This is a string that defines the manufacturer-allocated Stock Keeping Unit (SKU) number of the hardware item. This is an optional attribute."
            },
            "vendor": {
              "type": "string",
              "description": "This is a string that defines the name of the manufacturer. This, in combination with the Model and the Part, identify different types of hardware items. The SerialNumber can then be used to differentiate between different instances of the same type of hardware item. This is a REQUIRED attribute for a physical resource."
            }
          },
          "allOf": [
            {
              "$ref": "ResourceSpecification.schema.json#ResourceSpecification"
            }
          ]
        }
      }
    }
  ],
  "Place": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Place.schema.json",
      "title": "Place",
      "definitions": {
        "Place": {
          "$id": "#Place",
          "description": "Place reference. Place defines the places where the products are sold or delivered.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Unique reference of the place"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the place"
            },
            "name": {
              "type": "string",
              "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PlaceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PlaceRef.schema.json",
      "title": "PlaceRef",
      "definitions": {
        "PlaceRef": {
          "$id": "#PlaceRef",
          "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PlaceRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PlaceRefOrValue.schema.json",
      "title": "PlaceRefOrValue",
      "definitions": {
        "PlaceRefOrValue": {
          "$id": "#PlaceRefOrValue",
          "description": "A place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/PlaceRef.schema.json#PlaceRef"
            },
            {
              "$ref": "../Common/Place.schema.json#Place"
            }
          ]
        }
      }
    }
  ],
  "Point": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Point.schema.json",
      "title": "Point",
      "definitions": {
        "Point": {
          "$id": "#Point",
          "type": "object",
          "description": "GeoJSON: A single position",
          "required": [
            "type",
            "coordinates"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Point"
              ]
            },
            "coordinates": {
              "$ref": "../Common/GeoJSON.schema.json#position"
            }
          }
        }
      }
    }
  ],
  "PointOfInteraction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PointOfInteraction.schema.json",
      "title": "PointOfInteraction",
      "definitions": {
        "PointOfInteraction": {
          "$id": "#PointOfInteraction",
          "description": "POI consists of hardware and software which enables a Cardholder and/or an Acceptor to perform a Local Card transaction. This is also referred to as a Physical/EMV Terminal. It may be Attended or Unattended.",
          "type": "object",
          "properties": {
            "resource": {
              "$ref": "../Resource/ResourceRef.schema.json#ResourceRef",
              "description": "A POI is a Physical POI or a Remote POI, as a resource."
            },
            "modeOfEntry": {
              "type": "string",
              "description": "Key entry code that tells the processor how the transaction was captured."
            },
            "retrievalReferenceNumber": {
              "type": "string",
              "description": "The reference number used to identify a given transaction that allow the Acceptor or Acquirer to keep track of their transactions"
            },
            "transactionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date time related to the POI transaction."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PointOfInterest": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/PointOfInterest/PointOfInterest/schema.json",
      "title": "GSMA / FIWARE - Point of Interest schema",
      "description": "A point of interest",
      "type": "object",
      "allOf": [
        {
          "anyOf": [
            {
              "required": [
                "location"
              ]
            },
            {
              "required": [
                "address"
              ]
            }
          ]
        },
        {
          "required": [
            "id",
            "type",
            "category",
            "name"
          ]
        },
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "PointOfInterest"
              ],
              "description": "NGSI Entity type"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "contactPoint": {
              "type": "object"
            },
            "refSeeAlso": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                  }
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "PointofSaleAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PointofSaleAnalytics.schema.json",
      "title": "PointofSaleAnalytics",
      "definitions": {
        "PointofSaleAnalytics": {
          "$id": "#PointofSaleAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "Polygon": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Polygon.schema.json",
      "title": "Polygon",
      "definitions": {
        "Polygon": {
          "$id": "#Polygon",
          "description": "An array of linear rings",
          "required": [
            "type",
            "coordinates"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Polygon"
              ]
            },
            "coordinates": {
              "$ref": "../Common/GeoJSON.schema.json#polygon"
            }
          },
          "type": "object"
        }
      }
    }
  ],
  "Price": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Price.schema.json",
      "title": "Price",
      "definitions": {
        "Price": {
          "$id": "#Price",
          "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
          "type": "object",
          "properties": {
            "dutyFreeAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "All taxes excluded amount (expressed in the given currency)"
            },
            "percentage": {
              "type": "number",
              "format": "float",
              "description": "Percentage to apply for ProdOfferPriceAlteration"
            },
            "taxIncludedAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "All taxes included amount (expressed in the given currency)"
            },
            "taxRate": {
              "type": "number",
              "format": "float",
              "description": "Tax rate"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PriceAlteration": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PriceAlteration.schema.json",
      "title": "PriceAlteration",
      "definitions": {
        "PriceAlteration": {
          "$id": "#PriceAlteration",
          "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
          "type": "object",
          "required": [
            "priceType",
            "price"
          ],
          "properties": {
            "applicationDuration": {
              "type": "integer",
              "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this order item price alteration"
            },
            "name": {
              "type": "string",
              "description": "Name of the order item price alteration"
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef"
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price such as recurring, one time and usage."
            },
            "priority": {
              "type": "integer",
              "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "PricePlanAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PricePlanAnalytics.schema.json",
      "title": "PricePlanAnalytics",
      "definitions": {
        "PricePlanAnalytics": {
          "$id": "#PricePlanAnalytics",
          "type": "object",
          "properties": {
            "planActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date of billing plan"
            },
            "contractStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Contract start date"
            },
            "contractEndDate": {
              "type": "string",
              "format": "date-time",
              "description": "Contract end date"
            },
            "contractMinimumPeriodDays": {
              "type": "number",
              "format": "integer",
              "description": "Minimal contract duration specified with number of days"
            },
            "priceChargeAmount": {
              "type": "number",
              "format": "integer",
              "description": "Amount correponding to the charge type"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "subscriptionStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "subscriptionCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Subscriber creation date"
            },
            "subscriptionActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "PriceType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PriceType.schema.json",
      "title": "PriceType",
      "definitions": {
        "PriceType": {
          "$id": "#PriceType",
          "type": "string",
          "description": "Describes the type of price (ex: oneTime, recurring, etc)",
          "enum": [
            "recurring",
            "oneTime",
            "usage"
          ]
        }
      }
    }
  ],
  "PricingLogicAlgorithm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PricingLogicAlgorithm.schema.json",
      "title": "PricingLogicAlgorithm",
      "definitions": {
        "PricingLogicAlgorithm": {
          "$id": "#PricingLogicAlgorithm",
          "type": "object",
          "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled bahavior in SID). Some of the parameters of the interface definiition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth)",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the PricingLogicAlgorithm"
            },
            "name": {
              "type": "string",
              "description": "Name given to the PricingLogicAlgorithm"
            },
            "plaSpecId": {
              "type": "string",
              "description": "id of corresponding PricingLogicAlgorithm specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the PricingLogicAlgorithm is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Privilege": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Privilege.schema.json",
      "title": "Privilege",
      "definitions": {
        "Privilege": {
          "$id": "#Privilege",
          "description": "A Privilege is a detailed information concerning an individual access entitlement.",
          "type": "object",
          "required": [
            "manageableAsset"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the privilege."
            },
            "manageableAsset": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            },
            "function": {
              "type": "string",
              "description": "Specific function that can be managed over a given asset."
            },
            "action": {
              "type": "string",
              "description": "Level of access granted as part of the permission."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProbableCause": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProbableCause.schema.json",
      "title": "ProbableCause",
      "definitions": {
        "ProbableCause": {
          "$id": "#ProbableCause",
          "description": "This resource represents Probable Cause values defined in ITU-T X.733 and 3GPP TS 32.111-2 Annex B.",
          "type": "string",
          "enum": [
            "ais",
            "callSetUpFailure",
            "degradedSignal",
            "farEndReceiverFailure",
            "framingError",
            "lossOfFrame",
            "lossOfPointer",
            "lossOfSignal",
            "payloadTypeMismatch",
            "transmissionError",
            "remoteAlarmInterface",
            "excessiveBitErrorRate",
            "pathTraceMismatch",
            "unavailable",
            "signalLabelMismatch",
            "lossOfMultiFrame",
            "receiveFailure",
            "transmitFailure",
            "modulationFailure",
            "demodulationFailure",
            "broadcastChannelFailure",
            "connectionEstablishmentError",
            "invalidMessageReceived",
            "localNodeTransmissionError",
            "remoteNodeTransmissionError",
            "routingFailure",
            "backplaneFailure",
            "equipmentIdentifierDuplication",
            "externalIfDeviceProblem",
            "lineCardProblem",
            "multiplexerProblem",
            "neIdentifierDuplication",
            "processorProblem",
            "protectionPathFailure",
            "receiverFailure",
            "replaceableUnitMissing",
            "replaceableUnitTypeMismatch",
            "synchronizationSourceMismatch",
            "terminalProblem",
            "timingProblem",
            "transceiverFailure",
            "transmitterFailure",
            "trunkCardProblem",
            "replaceableUnitProblem",
            "realTimeClockFailure",
            "antennaFailure",
            "batteryChargingFailure",
            "diskFailure",
            "frequencyHoppingFailure",
            "ioDeviceError",
            "lossOfSynchronisation",
            "lossOfRedundancy",
            "powerSupplyFailure",
            "signalQualityEvaluationFailure",
            "protectionMechanismFailure",
            "protectingResourceFailure",
            "airCompressorFailure",
            "airConditioningFailure",
            "airDryerFailure",
            "batteryDischarging",
            "batteryFailure",
            "commercialPowerFailure",
            "coolingFanFailure",
            "engineFailure",
            "fireDetectorFailure",
            "fuseFailure",
            "generatorFailure",
            "lowBatteryThreshold",
            "pumpFailure",
            "rectifierFailure",
            "rectifierHighVoltage",
            "rectifierLowVoltage",
            "ventilationsSystemFailure",
            "enclosureDoorOpen",
            "explosiveGas",
            "fire",
            "flood",
            "highHumidity",
            "highTemperature",
            "highWind",
            "iceBuildUp",
            "intrusionDetection",
            "lowFuel",
            "lowHumidity",
            "lowCablePressure",
            "lowTemperatue",
            "lowWater",
            "smoke",
            "toxicGas",
            "coolingSystemFailure",
            "externalEquipmentFailure",
            "externalPointFailure",
            "storageCapacityProblem",
            "memoryMismatch",
            "corruptData",
            "outOfCpuCycles",
            "softwareEnvironmentProblem",
            "softwareDownloadFailure",
            "lossOfRealTime",
            "reinitialized",
            "applicationSubsystemFailure",
            "databaseInconsistency",
            "fileError",
            "outOfMemory",
            "softwareError",
            "timeoutExpired",
            "underlyingResourceUnavailable",
            "versionMismatch",
            "bandwidthReduced",
            "congestion",
            "excessiveResponseTime",
            "excessiveRetransmissionRate",
            "reducedLoggingCapability",
            "systemResourcesOverload",
            "adapterError",
            "callEstablishmentError",
            "communicationsProtocolError",
            "communicationsSubsystemFailure",
            "configurationOrCustomizationError",
            "cpuCyclesLimitExceeded",
            "dataSetOrModemError",
            "excessiveVibration",
            "heatingVentCoolingSystemProblem",
            "humidityUnacceptable",
            "inputOutputDeviceError",
            "inputDeviceError",
            "lanError",
            "leakDetected",
            "materialSupplyExhausted",
            "ouputDeviceError",
            "performanceDegraded",
            "powerProblems",
            "pressureUnacceptable",
            "queueSizeExceeded",
            "resourceAtOrNearingCapacity",
            "responseTimeExecessive",
            "retransmissionRateExcessive",
            "softwareProgramAbnormallyTerminated",
            "softwareProgramError",
            "temperatureUnacceptable",
            "thresholdCrossed",
            "toxicLeakDetected",
            "transmiterFailure",
            "authenticationFailure",
            "breachOfConfidentiality",
            "cableTamper",
            "delayedInformation",
            "denialOfService",
            "duplicateInformation",
            "informationMissing",
            "informationModificationDetected",
            "informationOutOfSequence",
            "keyExpired",
            "nonRepudiationFailure",
            "outOfHoursActivity",
            "outOfService",
            "proceduralError",
            "unauthorizedAccessAttempt",
            "unexpectedInformation",
            "other",
            "abisBtsInterfaceFailure",
            "abisTrxInterfaceFailure",
            "batteryBreakdown",
            "clockSynchronizationProblem",
            "combinerProblem",
            "equipmentFailure",
            "excessiveReceiverTemperature",
            "excessiveTransmitterOutputPower",
            "excessiveTransmitterTemperature",
            "frequencyHoppingDegraded",
            "frequencyRedefinitionFailed",
            "lineInterfaceFailure",
            "linkFailure",
            "mainsBreakdownWithBatteryBackUp",
            "mainsBreakdownWithoutBatteryBackUp",
            "receiverAntennaFault",
            "receiverMulticouplerFailure",
            "reducedTransmitterOutputPower",
            "timeslotHardwareFailure",
            "transcoderProblem",
            "transcoderOrRateAdapterProblem",
            "transmitterAntennaFailure",
            "transmitterAntennaNotAdjusted",
            "transmitterLowVoltageOrCurrent",
            "transmitterOffFrequency",
            "fileSystemCallUnsuccessful",
            "inputParameterOutOfRange",
            "invalidParameter",
            "invalidPointer",
            "messageNotExpected",
            "messageNotInitialized",
            "messageOutOfSequence",
            "systemCallUnsuccessful",
            "variableOutOfRange",
            "watchdogTimerExpired",
            "externalPowerSupplyFailure",
            "externalTransmissionDeviceFailure",
            "reducedAlarmReporting",
            "reducedEventReporting",
            "lapdLinkProtocolFailure",
            "localAlarmIndication",
            "remoteAlarmIndication",
            "ss7ProtocolFailure"
          ]
        }
      }
    }
  ],
  "ProblemAcknowledgement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProblemAcknowledgement.schema.json",
      "title": "ProblemAcknowledgement",
      "definitions": {
        "ProblemAcknowledgement": {
          "$id": "#ProblemAcknowledgement",
          "type": "object",
          "description": "Task resource that requests acknowledgement of problems by the problem handler.",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference to this task resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of this task resource"
            },
            "problem": {
              "description": "The problems to be acknowledged, relevant in the input to this task",
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "ackProblem": {
              "description": "The problems that were acknowledged, populated in the output to this task",
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "trackingRecord": {
              "description": "A record of the action taken in this acknowledgement",
              "$ref": "../Service/TrackingRecord.schema.json#TrackingRecord"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProblemGroup": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProblemGroup.schema.json",
      "title": "ProblemGroup",
      "definitions": {
        "ProblemGroup": {
          "$id": "#ProblemGroup",
          "description": "Task resource that requests Service Problems to be grouped together into a parent and set of children",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference to this task resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of this task resource"
            },
            "childProblem": {
              "type": "array",
              "description": "List of problems to be grouped under a parent problem",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "parentProblem": {
              "description": "The parent problem to which the problems are to be grouped",
              "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProblemUnacknowledgement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProblemUnacknowledgement.schema.json",
      "title": "ProblemUnacknowledgement",
      "definitions": {
        "ProblemUnacknowledgement": {
          "$id": "#ProblemUnacknowledgement",
          "type": "object",
          "description": "Task resource that requests unacknowledgement of problems, rolling back the status of the problems from Acknowledged to Submitted.",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference to this task resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of this task resource"
            },
            "problem": {
              "description": "The problems to be unacknowledged, relevant in the input to this task",
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "unackProblem": {
              "description": "The problems that were unacknowledged, populated in the output to this task",
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "trackingRecord": {
              "description": "A record of the action taken in this acknowledgement",
              "$ref": "../Service/TrackingRecord.schema.json#TrackingRecord"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProblemUngroup": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProblemUngroup.schema.json",
      "title": "ProblemUngroup",
      "definitions": {
        "ProblemUngroup": {
          "$id": "#ProblemUngroup",
          "description": "Task resource that requests Service Problems to be ungrouped from a parent",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference to this task resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of this task resource"
            },
            "childProblem": {
              "type": "array",
              "description": "List of problems to be ungrouped from a parent problem",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
              }
            },
            "parentProblem": {
              "description": "The parent problem from which the problems are to be ungrouped",
              "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProcessFlow": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProcessFlow.schema.json",
      "title": "ProcessFlow",
      "definitions": {
        "ProcessFlow": {
          "$id": "#ProcessFlow",
          "type": "object",
          "properties": {
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
              },
              "description": "A list of channel(s) where this processFlow is executed"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "A list of characteristic(s) associated to this processFlow"
            },
            "href": {
              "type": "string",
              "description": "Reference of the ProcessFlow"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the Process flow"
            },
            "processFlowDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date when the processFlow was created in basse (timestamp)"
            },
            "processFlowSpecification": {
              "type": "string",
              "description": "Specification of the processFlow."
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
              },
              "description": "A list of related entity(ies) to this processFlow"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A list of related party(ies) to this processFlow"
            },
            "state": {
              "$ref": "../Common/ProcessFlowStateType.schema.json#ProcessFlowStateType",
              "description": "State of the ProcessFlow: described in the state machine diagram."
            },
            "taskFlow": {
              "type": "array",
              "items": {
                "$ref": "../Common/TaskFlowRef.schema.json#TaskFlowRef"
              },
              "description": "A list of taskflow related to this processFlow"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProcessFlowRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProcessFlowRef.schema.json",
      "title": "ProcessFlowRef",
      "definitions": {
        "ProcessFlowRef": {
          "$id": "#ProcessFlowRef",
          "description": "Process Flow ref class is used to provide process main information from Task sub resource.",
          "type": "object",
          "properties": {
            "state": {
              "description": "The life cycle state of the processFlow",
              "$ref": "../Common/ProcessFlowStateType.schema.json#ProcessFlowStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProcessFlowStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProcessFlowStateType.schema.json",
      "title": "ProcessFlowStateType",
      "definitions": {
        "ProcessFlowStateType": {
          "$id": "#ProcessFlowStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the processFlow",
          "enum": [
            "active",
            "cancelled",
            "hold",
            "completed"
          ]
        }
      }
    }
  ],
  "Product": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Product.schema.json",
      "title": "Product",
      "definitions": {
        "Product": {
          "$id": "#Product",
          "type": "object",
          "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
          "properties": {
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementItemRef.schema.json#AgreementItemRef"
              }
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "description": {
              "type": "string",
              "description": "Is the description of the product. It could be copied from the description of the Product Offering."
            },
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "isBundle": {
              "type": "boolean",
              "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
            },
            "isCustomerVisible": {
              "type": "boolean",
              "description": "If true, the product is visible by the customer."
            },
            "name": {
              "type": "string",
              "description": "Name of the product. It could be the same as the name of the product offering"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date when the product was ordered"
            },
            "productCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "productOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../Product/RelatedProductOrderItem.schema.json#RelatedProductOrderItem"
              }
            },
            "product": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
              }
            },
            "productPrice": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductPrice.schema.json#ProductPrice"
              }
            },
            "productRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRelationship.schema.json#ProductRelationship"
              }
            },
            "productSerialNumber": {
              "type": "string",
              "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "productTerm": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductTerm.schema.json#ProductTerm"
              }
            },
            "realizingResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#ResourceRef"
              }
            },
            "realizingService": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
              }
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date from which the product starts"
            },
            "status": {
              "$ref": "../Product/ProductStatusType.schema.json#ProductStatusType",
              "description": "Is the lifecycle status of the product."
            },
            "terminationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date when the product was terminated"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductActionType.schema.json",
      "title": "ProductActionType",
      "definitions": {
        "ProductActionType": {
          "$id": "#ProductActionType",
          "description": "action to be performed on the product",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "ProductCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductCharacteristic.schema.json",
      "title": "ProductCharacteristic",
      "definitions": {
        "ProductCharacteristic": {
          "$id": "#ProductCharacteristic",
          "description": "Characteristics of the product to instantiate or to modify",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the characteristic"
            },
            "value": {
              "type": "string",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductInventoryRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductInventoryRelationship.schema.json",
      "title": "ProductInventoryRelationship",
      "definitions": {
        "ProductInventoryRelationship": {
          "$id": "#ProductInventoryRelationship",
          "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
          "type": "object",
          "required": [
            "relationshipType",
            "product"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOffering": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOffering.schema.json",
      "title": "ProductOffering",
      "definitions": {
        "ProductOffering": {
          "$id": "#ProductOffering",
          "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the productOffering"
            },
            "href": {
              "type": "string",
              "description": "Reference of the ProductOffering"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the productOffering"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
            },
            "isSellable": {
              "type": "boolean",
              "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the productOffering"
            },
            "statusReason": {
              "type": "string",
              "description": "A string providing a complementary information on the value of the lifecycle status attribute."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productOffering is valid"
            },
            "version": {
              "type": "string",
              "description": "ProductOffering version"
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/PlaceRef.schema.json#PlaceRef"
              },
              "description": "Place defines the places where the products are sold or delivered."
            },
            "serviceLevelAgreement": {
              "$ref": "../EngagedParty/SLARef.schema.json#SLARef",
              "description": "A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service."
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef",
              "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
              },
              "description": "The channel defines the channel for selling product offerings."
            },
            "serviceCandidate": {
              "$ref": "../Service/ServiceCandidateRef.schema.json#ServiceCandidateRef",
              "description": "ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog."
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              },
              "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates."
            },
            "resourceCandidate": {
              "$ref": "../Resource/ResourceCandidateRef.schema.json#ResourceCandidateRef",
              "description": "A resource candidate is an entity that makes a ResourceSpecification available to a catalog."
            },
            "productOfferingTerm": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingTerm.schema.json#ProductOfferingTerm"
              },
              "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods."
            },
            "productOfferingPrice": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef"
              },
              "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer."
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              },
              "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              },
              "description": "Complements the description of an element (for instance a product) through video, pictures..."
            },
            "marketSegment": {
              "type": "array",
              "items": {
                "$ref": "../MarketingSales/MarketSegmentRef.schema.json#MarketSegmentRef"
              },
              "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth."
            },
            "bundledProductOffering": {
              "type": "array",
              "items": {
                "$ref": "../Product/BundledProductOffering.schema.json#BundledProductOffering"
              },
              "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering."
            },
            "prodSpecCharValueUse": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductSpecificationCharacteristicValueUse.schema.json#ProductSpecificationCharacteristicValueUse"
              },
              "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingPrice.schema.json",
      "title": "ProductOfferingPrice",
      "definitions": {
        "ProductOfferingPrice": {
          "$id": "#ProductOfferingPrice",
          "description": "Is based on both the basic cost to develop and produce products and the enterprises policy on revenue targets. This price may be further revised through discounting (a Product Offering Price that reflects an alteration). The price, applied for a productOffering may also be influenced by the productOfferingTerm, the customer selected, eg: a productOffering can be offered with multiple terms, like commitment periods for the contract. The price may be influenced by this productOfferingTerm. A productOffering may be cheaper with a 24 month commitment than with a 12 month commitment.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "unique id of this resource"
            },
            "href": {
              "type": "string",
              "description": "Reference of the ProductOfferingPrice"
            },
            "name": {
              "type": "string",
              "description": "Name of the productOfferingPrice"
            },
            "description": {
              "type": "string",
              "description": "Description of the productOfferingPrice"
            },
            "version": {
              "type": "string",
              "description": "ProductOffering version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productOfferingPrice is valid"
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
            },
            "unitOfMeasure": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
            },
            "recurringChargePeriodType": {
              "type": "string",
              "description": "The period to repeat the application of the price\nCould be month, week..."
            },
            "recurringChargePeriodLength": {
              "type": "integer",
              "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
            },
            "@type": {
              "type": "string",
              "description": "The class type of this Product offering"
            },
            "@baseType": {
              "type": "string",
              "description": "the immediate base class type of this product offering"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "hyperlink reference to the schema describing this resource"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "the last update time of this ProductOfferingPrice"
            },
            "isBundle": {
              "type": "boolean",
              "description": "A flag indicating if this ProductOfferingPrice is composite (bundle) or not"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "the lifecycle status of this ProductOfferingPrice"
            },
            "price": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "The amount of money that characterizes the price."
            },
            "percentage": {
              "type": "number",
              "format": "float",
              "description": "Percentage to apply if this Product Offering Price is an Alteration (such as a Discount)"
            },
            "bundledPopRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/BundledProductOfferingPriceRelationship.schema.json#BundledProductOfferingPriceRelationship"
              },
              "description": "this object represents a bundle relationship from a bundle product offering price (parent) to a simple product offering price (child). A simple product offering price may participate in more than one bundle relationship."
            },
            "popRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingPriceRelationship.schema.json#ProductOfferingPriceRelationship"
              },
              "description": "Product Offering Prices related to this Product Offering Price, for example a price alteration such as allowance or discount"
            },
            "prodSpecCharValueUse": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductSpecificationCharacteristicValueUse.schema.json#ProductSpecificationCharacteristicValueUse"
              },
              "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOfferingPrice to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering and ProcuctOfferingPrice level. The list of values in ProductSpecificationCharacteristicValueUse is a strict subset of the list of values as defined in the corresponding product specification characteristics."
            },
            "productOfferingTerm": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingTerm.schema.json#ProductOfferingTerm"
              },
              "description": "A list of conditions under which a ProductOfferingPrice is made available to Customers. For instance, a Product Offering Price can be offered with multiple commitment periods."
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/PlaceRef.schema.json#PlaceRef"
              },
              "description": "Place defines the places where the products are sold or delivered."
            },
            "constraint": {
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#ConstraintRef"
              },
              "description": "The Constraint resource represents a policy/rule applied to ProductOfferingPrice."
            },
            "pricingLogicAlgorithm": {
              "type": "array",
              "items": {
                "$ref": "../Product/PricingLogicAlgorithm.schema.json#PricingLogicAlgorithm"
              },
              "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled behavior in SID). Some of the parameters of the interface definition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth)."
            },
            "tax": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              },
              "description": "An amount of money levied on the price of a Product by a legislative body."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingPriceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingPriceRef.schema.json",
      "title": "ProductOfferingPriceRef",
      "definitions": {
        "ProductOfferingPriceRef": {
          "$id": "#ProductOfferingPriceRef",
          "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingPriceRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingPriceRelationship.schema.json",
      "title": "ProductOfferingPriceRelationship",
      "definitions": {
        "ProductOfferingPriceRelationship": {
          "$id": "#ProductOfferingPriceRelationship",
          "type": "object",
          "description": "Describes a non-composite relationship between product offering prices. For example one price might be an discount alteration for another price.",
          "properties": {
            "href": {
              "type": "string",
              "description": "hyperlink reference of the associated product offering price"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the associated product offering price"
            },
            "name": {
              "type": "string",
              "description": "Name of the associated product offering price"
            },
            "relationshipType": {
              "type": "string",
              "description": "type of the relationship, for example override, discount, etc."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingQualification.schema.json",
      "title": "ProductOfferingQualification",
      "definitions": {
        "ProductOfferingQualification": {
          "$id": "#ProductOfferingQualification",
          "type": "object",
          "description": "ProductOfferingQualification is used to perform a commercial eligibility. It allows to retrieve a list of productOffering that are commercially available in the context of the interaction (defined be place, channel, party, product).",
          "properties": {
            "channel": {
              "description": "Channel used for the qualification",
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
            },
            "category": {
              "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
            },
            "description": {
              "type": "string",
              "description": "Description of the productOfferingQualification"
            },
            "effectiveQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Effective date to productOfferingQualification completion"
            },
            "expectedPOQCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the requester expect to provide an answer for the qualification request"
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date the qualification response expires"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the productOfferingQualification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the productOfferingQualification resource"
            },
            "instantSyncQualification": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
            },
            "note": {
              "type": "array",
              "description": "Free form text associated with the qualification request",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "productOfferingQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the productOfferingQualification has been submitted"
            },
            "productOfferingQualificationItem": {
              "type": "array",
              "description": "Qualification item for a product or a category",
              "items": {
                "$ref": "../Product/ProductOfferingQualificationItem.schema.json#ProductOfferingQualificationItem"
              }
            },
            "provideAlternative": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided"
            },
            "provideOnlyAvailable": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response"
            },
            "provideUnavailabilityReason": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that unavailability reason are expected for non available product offering"
            },
            "qualificationResult": {
              "type": "string",
              "description": "Result of the qualification (example: green, yellow, red)"
            },
            "relatedParty": {
              "type": "array",
              "description": "Party playing a role for this qualification (as requester for example)",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
              }
            },
            "requestedPOQCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Deadline date when the requester expected a qualification answer"
            },
            "state": {
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType",
              "description": "State of the productOfferingQualification defined in the state engine"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingQualificationItem.schema.json",
      "title": "ProductOfferingQualificationItem",
      "definitions": {
        "ProductOfferingQualificationItem": {
          "$id": "#ProductOfferingQualificationItem",
          "type": "object",
          "properties": {
            "expectedActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the requester look for productOfferingQualification activation"
            },
            "id": {
              "type": "string",
              "description": "Id of the productOfferingQualification item"
            },
            "action": {
              "description": "Can be \"add\" / \"modify\" / \"no_change\"/ \"delete\" - by default add is considered",
              "$ref": "../Product/ProductActionType.schema.json#ProductActionType"
            },
            "qualificationItemResult": {
              "type": "string",
              "description": "Qualification result for this productOfferingQualification item. It could be:\n\n qualified (request productOffering or productSpecification are available), \n unqualified (requested not available and not alternate available),\n alternate (requested not available but proposal available)\n"
            },
            "state": {
              "description": "State of the productOfferingQualification item defined in the state engine",
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType"
            },
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "items": {
                "$ref": "../Product/EligibilityUnavailabilityReason.schema.json#EligibilityUnavailabilityReason"
              }
            },
            "qualificationItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/QualificationItemRelationship.schema.json#QualificationItemRelationship"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
            },
            "terminationError": {
              "type": "array",
              "items": {
                "$ref": "../Service/TerminationError.schema.json#TerminationError"
              }
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "alternateProductOfferingProposal": {
              "type": "array",
              "items": {
                "$ref": "../Product/AlternateProductOfferingProposal.schema.json#AlternateProductOfferingProposal"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingQualificationItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingQualificationItemRef.schema.json",
      "title": "ProductOfferingQualificationItemRef",
      "definitions": {
        "ProductOfferingQualificationItemRef": {
          "$id": "#ProductOfferingQualificationItemRef",
          "type": "object",
          "description": "It's a productOfferingQualification item that has been executed previously.",
          "required": [
            "id",
            "productOfferingQualificationId"
          ],
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "productOfferingQualificationHref": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "productOfferingQualificationId": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "productOfferingQualificationName": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "id": {
              "type": "string",
              "description": "Id of an item of a product offering qualification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingQualificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingQualificationRef.schema.json",
      "title": "ProductOfferingQualificationRef",
      "definitions": {
        "ProductOfferingQualificationRef": {
          "$id": "#ProductOfferingQualificationRef",
          "type": "object",
          "description": "It's a productOfferingQualification that has been executed previously",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingQualificationStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingQualificationStateType.schema.json",
      "title": "ProductOfferingQualificationStateType",
      "definitions": {
        "ProductOfferingQualificationStateType": {
          "$id": "#ProductOfferingQualificationStateType",
          "type": "string",
          "description": "Possible values for the state of the product offering qualification & item",
          "enum": [
            "acknowledged",
            "terminatedWithError",
            "inProgress",
            "done"
          ]
        }
      }
    }
  ],
  "ProductOfferingRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingRef.schema.json",
      "title": "ProductOfferingRef",
      "definitions": {
        "ProductOfferingRef": {
          "$id": "#ProductOfferingRef",
          "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingRiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingRiskAssessment.schema.json",
      "title": "ProductOfferingRiskAssessment",
      "definitions": {
        "ProductOfferingRiskAssessment": {
          "$id": "#ProductOfferingRiskAssessment",
          "description": "This is a task resource allowing assessment of the risks associated with a product offering. For example, the risk associated with iPhone X will probably be higher than the risk for a battery",
          "type": "object",
          "required": [
            "productOffering"
          ],
          "properties": {
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.json#ProductOfferingRef",
              "description": "The product offering for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            }
          },
          "allOf": [
            {
              "$ref": "RiskAssessment.schema.json#RiskAssessment"
            }
          ]
        }
      }
    }
  ],
  "ProductOfferingTerm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOfferingTerm.schema.json",
      "title": "ProductOfferingTerm",
      "definitions": {
        "ProductOfferingTerm": {
          "$id": "#ProductOfferingTerm",
          "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the productOfferingTerm"
            },
            "duration": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Duration of the productOfferingTerm"
            },
            "name": {
              "type": "string",
              "description": "Name of the productOfferingTerm"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productOfferingTerm is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrder.schema.json",
      "title": "ProductOrder",
      "definitions": {
        "ProductOrder": {
          "type": "object",
          "$id": "#ProductOrder",
          "required": [
            "productOrderItem"
          ],
          "description": "A Product Order is a type of order which  can  be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa,",
          "properties": {
            "agreement": {
              "type": "array",
              "description": "A reference to an agreement defined in the context of the product order",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "cancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled. This is used when order is cancelled. "
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled. This is used when order is cancelled. "
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. \"enterprise\", \"residential\", ...)"
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedChannel.schema.json#RelatedChannel"
              }
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was completed"
            },
            "description": {
              "type": "string",
              "description": "Description of the product order"
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expected delivery date amended by the provider"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the order"
            },
            "id": {
              "type": "string",
              "description": "ID created on repository side (OM system)"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "notificationContact": {
              "type": "string",
              "description": "Contact attached to the order to send back information regarding this order"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was created"
            },
            "orderTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#OrderPrice"
              }
            },
            "payment": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
              }
            },
            "priority": {
              "type": "string",
              "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
            },
            "productOfferingQualification": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingQualificationRef.schema.json#ProductOfferingQualificationRef"
              }
            },
            "quote": {
              "type": "array",
              "items": {
                "$ref": "../Customer/QuoteRef.schema.json#QuoteRef"
              }
            },
            "productOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ProductOrderItem.schema.json#ProductOrderItem"
              },
              "minItems": 1
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "requestedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Requested delivery date from the requestor perspective"
            },
            "requestedStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date. "
            },
            "state": {
              "$ref": "../Customer/ProductOrderStateType.schema.json#ProductOrderStateType",
              "description": "Tracks the lifecycle status of the product order, such as Acknowledged, Rejected, InProgress, Pending and so on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderItem.schema.json",
      "title": "ProductOrderItem",
      "definitions": {
        "ProductOrderItem": {
          "$id": "#ProductOrderItem",
          "type": "object",
          "description": "An identified part of the order. A product order is decomposed into one or more order items.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity ordered"
            },
            "action": {
              "$ref": "../Customer/OrderItemActionType.schema.json#OrderItemActionType",
              "description": "The action to be carried out on the Product. Can be: add, modify, delete, noChange"
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#AppointmentRef"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "itemPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#OrderPrice"
              }
            },
            "itemTerm": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderTerm.schema.json#OrderTerm"
              }
            },
            "itemTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#OrderPrice"
              }
            },
            "payment": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
              }
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "productOfferingQualificationItem": {
              "$ref": "../Product/ProductOfferingQualificationItemRef.schema.json#ProductOfferingQualificationItemRef"
            },
            "quoteItem": {
              "$ref": "../Customer/QuoteItemRef.schema.json#QuoteItemRef"
            },
            "productOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ProductOrderItem.schema.json#ProductOrderItem"
              }
            },
            "productOrderItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItemRelationship.schema.json#OrderItemRelationship"
              }
            },
            "qualification": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductOfferingQualificationRef.schema.json#ProductOfferingQualificationRef"
              }
            },
            "state": {
              "$ref": "../Customer/ProductOrderItemStateType.schema.json#ProductOrderItemStateType",
              "description": "State of the order item : described in the state machine diagram"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductOrderItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderItemRef.schema.json",
      "title": "ProductOrderItemRef",
      "definitions": {
        "ProductOrderItemRef": {
          "$id": "#ProductOrderItemRef",
          "type": "object",
          "description": "Reference to an order item that can typically be queried with another API.",
          "required": [
            "productOrderId"
          ],
          "properties": {
            "productOrderId": {
              "type": "string",
              "description": "Identifier of the order of which the item is a part of"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductOrderItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderItemStateType.schema.json",
      "title": "ProductOrderItemStateType",
      "definitions": {
        "ProductOrderItemStateType": {
          "$id": "#ProductOrderItemStateType",
          "type": "string",
          "description": "Possible values for the state of the product order item",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ProductOrderRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderRef.schema.json",
      "title": "ProductOrderRef",
      "definitions": {
        "ProductOrderRef": {
          "$id": "#ProductOrderRef",
          "description": "ProductOrder (ProductOrder) .The product order which the recommendation is related with.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductOrderRiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderRiskAssessment.schema.json",
      "title": "ProductOrderRiskAssessment",
      "definitions": {
        "ProductOrderRiskAssessment": {
          "$id": "#ProductOrderRiskAssessment",
          "description": "This is a task resource allowing assessment of the risks associated with a product order - presumably submitted by a party role and containing one or more product offerings",
          "type": "object",
          "required": [
            "productOrder"
          ],
          "properties": {
            "productOrder": {
              "$ref": "../Customer/ProductOrderRef.json#ProductOrderRef",
              "description": "The product order for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            }
          },
          "allOf": [
            {
              "$ref": "RiskAssessment.schema.json#RiskAssessment"
            }
          ]
        }
      }
    }
  ],
  "ProductOrderStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductOrderStateType.schema.json",
      "title": "ProductOrderStateType",
      "definitions": {
        "ProductOrderStateType": {
          "$id": "#ProductOrderStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ProductPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductPrice.schema.json",
      "title": "ProductPrice",
      "definitions": {
        "ProductPrice": {
          "$id": "#ProductPrice",
          "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time.",
          "type": "object",
          "required": [
            "priceType",
            "price"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this product price."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name such as \"Subscription price\"."
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
            },
            "priceType": {
              "type": "string",
              "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            },
            "productPriceAlteration": {
              "type": "array",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#PriceAlteration"
              }
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductRef.schema.json",
      "title": "ProductRef",
      "definitions": {
        "ProductRef": {
          "$id": "#ProductRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductRefOrValue.schema.json",
      "title": "ProductRefOrValue",
      "definitions": {
        "ProductRefOrValue": {
          "$id": "#ProductRefOrValue",
          "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            {
              "$ref": "../Product/Product.schema.json#Product"
            }
          ]
        }
      }
    }
  ],
  "ProductRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductRelationship.schema.json",
      "title": "ProductRelationship",
      "definitions": {
        "ProductRelationship": {
          "$id": "#ProductRelationship",
          "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
          "type": "object",
          "required": [
            "relationshipType",
            "product"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductRequest": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductRequest.schema.json",
      "title": "ProductRequest",
      "definitions": {
        "ProductRequest": {
          "$id": "#ProductRequest",
          "type": "object",
          "properties": {
            "referredProduct": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "description": {
              "type": "string",
              "description": "Is the description of the product. It could be copied from the description of the Product Offering."
            },
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "isBundle": {
              "type": "boolean",
              "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
            },
            "isCustomerVisible": {
              "type": "boolean",
              "description": "If true, the product is visible by the customer."
            },
            "name": {
              "type": "string",
              "description": "Name of the product. It could be the same as the name of the product offering"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date when the product was ordered"
            },
            "productSerialNumber": {
              "type": "string",
              "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date from which the product starts"
            },
            "status": {
              "type": "string",
              "description": "Is the lifecycle status of the product."
            },
            "terminationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Is the date when the product was terminated"
            },
            "realizingService": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "billingAccount": {
              "type": "array",
              "items": {
                "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
              }
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductCharacteristic.schema.json#ProductCharacteristic"
              }
            },
            "productRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRelationship.schema.json#ProductRelationship"
              }
            },
            "realizingResource": {
              "type": "array",
              "items": {
                "$ref": "../Resource/RealizingResourceRef.schema.json#RealizingResourceRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "productPrice": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductPrice.schema.json#ProductPrice"
              }
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/Place.schema.json#Place"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductRestriction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductRestriction.schema.json",
      "title": "ProductRestriction",
      "definitions": {
        "ProductRestriction": {
          "$id": "#ProductRestriction",
          "description": "In the context of a product order or a product offering qualification, this data structure captures the product information useful to order or qualified  an existing subscribed product or to a new one. This is a subset of relevant product attributes for ordering and qualification",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the product"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "name": {
              "type": "string",
              "description": "This is the name of the product."
            },
            "productCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "productRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductRelationship.schema.json#ProductRelationship"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyRef.schema.json#RelatedPartyRef"
              }
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "relatedPlace": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlace.schema.json#RelatedPlace"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecification.schema.json",
      "title": "ProductSpecification",
      "definitions": {
        "ProductSpecification": {
          "$id": "#ProductSpecification",
          "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
          "type": "object",
          "properties": {
            "brand": {
              "type": "string",
              "description": "The manufacturer or trademark of the specification"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the product specification is"
            },
            "href": {
              "type": "string",
              "description": "Reference of the product specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the product specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the product specification"
            },
            "productNumber": {
              "type": "string",
              "description": "An identification number assigned to uniquely identity the specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the product specification is valid"
            },
            "version": {
              "type": "string",
              "description": "Product specification version"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A related party defines party or party role linked to a specific entity."
            },
            "productSpecCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductSpecificationCharacteristic.schema.json#ProductSpecificationCharacteristic"
              },
              "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
            },
            "serviceSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceSpecificationRef.schema.json#ServiceSpecificationRef"
              },
              "description": "ServiceSpecification(s) required to realize a ProductSpecification."
            },
            "productSpecificationRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Product/ProductSpecificationRelationship.schema.json#ProductSpecificationRelationship"
              },
              "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications."
            },
            "resourceSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceSpecificationRef.schema.json#ResourceSpecificationRef"
              },
              "description": "The ResourceSpecification is required to realize a ProductSpecification."
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              },
              "description": "Complements the description of an element (for instance a product) through video, pictures..."
            },
            "bundledProductSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Product/BundledProductSpecification.schema.json#BundledProductSpecification"
              },
              "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification."
            },
            "targetProductSchema": {
              "description": "A target product schema reference. The reference object to the schema and type of target product which is described by product specification.",
              "$ref": "../Product/TargetProductSchema.schema.json#TargetProductSchema"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecificationCharacteristic.schema.json",
      "title": "ProductSpecificationCharacteristic",
      "definitions": {
        "ProductSpecificationCharacteristic": {
          "$id": "#ProductSpecificationCharacteristic",
          "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "type": "object",
          "properties": {
            "productSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A ProductSpecificationCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ProductSpecificationCharacteristic object. The values of the attributes in the ProductSpecificationCharacteristicValue object describe the values of the attributes that a corresponding ProductSpecificationCharacteristic object can take on."
            },
            "productSpecCharRelationship": {
              "type": "array",
              "items": {
                "$ref": "ProductSpecificationCharacteristicRelationship.schema.json#ProductSpecificationCharacteristicRelationship"
              },
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecificationCharacteristicRelationship.schema.json",
      "title": "ProductSpecificationCharacteristicRelationship",
      "definitions": {
        "ProductSpecificationCharacteristicRelationship": {
          "$id": "#ProductSpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecificationCharacteristics.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "the identifier of the associated product specification"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target product specification"
            },
            "charSpecSeq": {
              "type": "integer",
              "description": "The order in which a CharacteristicSpecification appears within another CharacteristicSpecification that defines a grouping of CharacteristicSpecifications.\n\nFor example, a grouping may represent the name of an individual. The given name is first, the middle name is second, and the last name is third."
            },
            "name": {
              "type": "string",
              "description": "Name of the target product specification characteristic"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productSpecificationCharacteristicRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecificationCharacteristicValueUse": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecificationCharacteristicValueUse.schema.json",
      "title": "ProductSpecificationCharacteristicValueUse",
      "definitions": {
        "ProductSpecificationCharacteristicValueUse": {
          "$id": "#ProductSpecificationCharacteristicValueUse",
          "type": "object",
          "description": "A use of the ProductSpecificationCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProductSpecificationCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecificationCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProductSpecificationCharacteristicValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the associated productSpecificationCharacteristic"
            },
            "id": {
              "type": "string",
              "description": "Unique ID for the characteristic"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the productSpecificationCharacteristic is"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "minCardinality": {
              "type": "integer",
              "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
            },
            "maxCardinality": {
              "type": "integer",
              "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productSpecificationCharacteristic is valid"
            },
            "productSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A number or text that can be assigned to a ProductSpecificationCharacteristic."
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef",
              "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecificationRef.schema.json",
      "title": "ProductSpecificationRef",
      "definitions": {
        "ProductSpecificationRef": {
          "$id": "#ProductSpecificationRef",
          "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Version of the product specification"
            },
            "targetProductSchema": {
              "description": "A target product schema reference. The reference object to the schema and type of target product which is described by product specification.",
              "$ref": "../Product/TargetProductSchema.schema.json#TargetProductSchema"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductSpecificationRelationship.schema.json",
      "title": "ProductSpecificationRelationship",
      "definitions": {
        "ProductSpecificationRelationship": {
          "$id": "#ProductSpecificationRelationship",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the productSpecification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the productSpecification"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productSpecificationRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStatusType.schema.json",
      "title": "ProductStatusType",
      "definitions": {
        "ProductStatusType": {
          "$id": "#ProductStatusType",
          "type": "string",
          "description": "Possible values for the status of the product",
          "enum": [
            "created",
            "pendingActive",
            "cancelled",
            "active",
            "pendingTerminate",
            "terminated",
            "suspended",
            "aborted"
          ]
        }
      }
    }
  ],
  "ProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStock.schema.json",
      "title": "ProductStock",
      "definitions": {
        "ProductStock": {
          "$id": "#ProductStock",
          "description": "ProductStock is a base class for defining a product (or configured product with values characteristic) stock level.",
          "type": "object",
          "properties": {
            "description": {
              "description": "Free-text description of the ProductStock",
              "type": "string"
            },
            "creationDate": {
              "description": "Date when the ProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "lastUpdate": {
              "description": "Last date when the ProductStock record was updated.",
              "type": "string",
              "format": "date-time"
            },
            "lastInventoryDate": {
              "description": "Last inventory count date for this ProductStock.",
              "type": "string",
              "format": "date-time"
            },
            "replenishmentDate": {
              "description": "Planned date for future replenishment for this ProductStock.",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "Unique identifier of the ProductStock",
              "type": "string"
            },
            "href": {
              "description": "Reference of the ProductStock",
              "type": "string"
            },
            "stockLevelCategory": {
              "description": "Category of the ProductStock",
              "type": "string"
            },
            "name": {
              "description": "Name of the ProductStock",
              "type": "string"
            },
            "productStockStatusType": {
              "description": "The status of the ProductStock, such as available, unavailable, reserved, unknown",
              "$ref": "ProductStockStatusType.schema.json#/definitions/ProductStockStatusType"
            },
            "productStockUsageType": {
              "description": "The usage type of the  ProductStock, such as inTransit, damaged, onDisplay, etc..",
              "$ref": "ProductStockUsageType.schema.json#/definitions/ProductStockUsageType"
            },
            "productStockLevel": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "minStockLevel": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "maxStockLevel": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "stockLevelAlert": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "reorderQuantity": {
              "$ref": "Quantity.schema.json#/definitions/Quantity"
            },
            "productStockRelationship": {
              "type": "array",
              "description": "relationship to other product stock",
              "items": {
                "$ref": "ProductStockRelationship.schema.json#/definitions/ProductStockRelationship"
              }
            },
            "stockedProduct": {
              "description": "Product stocked in this product stock  - could be via a productSpecification, a ProductSpecification + valued characteristic, etc. ",
              "$ref": "../Product/ProductRefOrValue.schema.json#/definitions/ProductRefOrValue"
            },
            "resource": {
              "type": "array",
              "description": "The Resource managed through this ProductStock is used",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
              }
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "ChannelRef.schema.json#/definitions/ChannelRef"
              }
            },
            "marketSegment": {
              "type": "array",
              "items": {
                "$ref": "../MarketingSales/MarketSegmentRef.schema.json#MarketSegmentRef"
              },
              "description": "provides references to the corresponding market segment as target of a product stock. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth."
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "place": {
              "description": "Used to define a place useful for the ProductStock for example a geographical place where the Product Stock is located",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductStockRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStockRef.schema.json",
      "title": "ProductStockRef",
      "definitions": {
        "ProductStockRef": {
          "$id": "#ProductStockRef",
          "description": "ProductStockRef is a reference to a product stock",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the ProductStockRef",
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductStockRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStockRelationship.schema.json",
      "title": "ProductStockRelationship",
      "definitions": {
        "ProductStockRelationship": {
          "$id": "#ProductStockRelationship",
          "type": "object",
          "description": "Linked product stock  with a type relationship.",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "stockLevel": {
              "description": "A product stock  in relationship with this product stock",
              "$ref": "../Resource/ProductStockRef.schema.json#/definitions/ProductStockRef"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of relationship between product stock"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ProductStockReservationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStockReservationRef.schema.json",
      "title": "ProductStockReservationRef",
      "definitions": {
        "ProductStockReservationRef": {
          "$id": "#ProductStockReservationRef",
          "type": "object",
          "description": "Product Stock Reservation reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ProductStockStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStockStatusType.schema.json",
      "title": "ProductStockStatusType",
      "definitions": {
        "ProductStockStatusType": {
          "$id": "#ProductStockStatusType",
          "type": "string",
          "description": "Possible values for the status of the stock  level",
          "enum": [
            "reserved",
            "available",
            "unavailable",
            "unknown"
          ]
        }
      }
    }
  ],
  "ProductStockUsageType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductStockUsageType.schema.json",
      "title": "ProductStockUsageType",
      "definitions": {
        "ProductStockUsageType": {
          "$id": "#ProductStockUsageType",
          "type": "string",
          "description": "Possible values for the usage of the stock level - This is illustrative",
          "enum": [
            "inTransit",
            "onDisplay",
            "damaged",
            "returned",
            "replenishmentInProgress",
            "inShop"
          ]
        }
      }
    }
  ],
  "ProductTerm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductTerm.schema.json",
      "title": "ProductTerm",
      "definitions": {
        "ProductTerm": {
          "$id": "#ProductTerm",
          "description": "Description of a productTerm linked to this product. This represent a commitment with a duration",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the productTerm"
            },
            "duration": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Duration of the productTerm"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "productTerm validity period"
            },
            "name": {
              "type": "string",
              "description": "Name of the productTerm"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ProductUsageAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProductUsageAnalytics.schema.json",
      "title": "ProductUsageAnalytics",
      "definitions": {
        "ProductUsageAnalytics": {
          "$id": "#ProductUsageAnalytics",
          "type": "object",
          "properties": {
            "activityMostRecentDate": {
              "type": "string",
              "format": "date-time",
              "description": "Most recent activity date indicating recency of information"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Promotion": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Promotion.schema.json",
      "title": "Promotion",
      "definitions": {
        "Promotion": {
          "$id": "#Promotion",
          "type": "object",
          "description": "Promotion is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases. Normally Promotion is not regarded as one type of product or product offering. It is often applied when the customer buys the product offerings with the price or amount surpassing the certain limit.",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections."
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "description": {
              "type": "string",
              "description": "Details about the purpose of this promotion."
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the promotion."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of promotion."
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Latest update date of promotion."
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Value of promotion status. Our suggestion would be: draft/test/waitForApproval/release/suspend/retirement."
            },
            "name": {
              "type": "string",
              "description": "Name of promotion."
            },
            "pattern": {
              "type": "array",
              "items": {
                "$ref": "../Product/PromotionPattern.schema.json#PromotionPattern"
              }
            },
            "promotionType": {
              "type": "string",
              "description": "Type of promotion. The basic type are Award/Discount/Reduction."
            },
            "validFor": {
              "description": "The period for which the promotion is valid.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            }
          },
          "required": [
            "name"
          ]
        }
      }
    }
  ],
  "PromotionAction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PromotionAction.schema.json",
      "title": "PromotionAction",
      "definitions": {
        "PromotionAction": {
          "$id": "#PromotionAction",
          "type": "object",
          "description": "Action of the promotion. When the customer meets the conditions in the promotion pattern, the customer can be given the benefits in the action.",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "actionEntityRef": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef",
              "description": "It refers to the entity which is impacted by the promotion action. \n • When the Promotion type is 1: Award, the actionEntityRef is the party account; \n • When the Promotion type is 2: Discount, it is the product offering; \n • When the Promotion type is 3: Reduction, it is the product offering also."
            },
            "actionType": {
              "type": "string",
              "description": "Action type can be one of the following: voice (minute), data (MB), data (GB), SMS, bonus point, physical gift, voucher, promotion code, an existing offering, currency."
            },
            "actionValue": {
              "type": "string",
              "description": "When the Promotion type is 1: Award, it means the amount or value of the awards decided by actionType, such as: Amount of gift, Amount of bonus, Value of discount;  \n • When the Promotion type is 2: Discount, it means the value of the discount;  \n • When the Promotion type is 3: reduction, it means the value of the reduced money."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier."
            }
          },
          "required": [
            "actionType"
          ]
        }
      }
    }
  ],
  "PromotionCriteria": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PromotionCriteria.schema.json",
      "title": "PromotionCriteria",
      "definitions": {
        "PromotionCriteria": {
          "$id": "#PromotionCriteria",
          "type": "object",
          "description": "Set of criteria to be followed by all parties.",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "criteriaOperator": {
              "type": "string",
              "description": "Logic operator of this criteria instruction: '=' or '>' or '<' or '>=' or '<=' or '<>'."
            },
            "criteriaParameter": {
              "type": "string",
              "description": "The parameter (factor) of the criteria.The basic factors are abstracted from these data sources.There are several detail parameters."
            },
            "criteriaValue": {
              "type": "string",
              "description": "The value is filled for the comparison of the criteria."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier."
            }
          },
          "required": [
            "criteriaOperator",
            "criteriaParameter",
            "criteriaValue"
          ]
        }
      }
    }
  ],
  "PromotionCriteriaGroup": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PromotionCriteriaGroup.schema.json",
      "title": "PromotionCriteriaGroup",
      "definitions": {
        "PromotionCriteriaGroup": {
          "$id": "#PromotionCriteriaGroup",
          "type": "object",
          "description": "Set of group criteria to promotion. Fulfilling these criteria, parties will receice benefits",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "criteria": {
              "type": "array",
              "items": {
                "$ref": "../Product/PromotionCriteria.schema.json#PromotionCriteria"
              }
            },
            "groupName": {
              "type": "string",
              "description": "Name of the group to be easily identified"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier"
            },
            "criteriaLogicalRelationship": {
              "type": "string",
              "description": "Logical relation followed by all criteria.",
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          "required": [
            "criteria"
          ]
        }
      }
    }
  ],
  "PromotionPattern": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PromotionPattern.schema.json",
      "title": "PromotionPattern",
      "definitions": {
        "PromotionPattern": {
          "$id": "#PromotionPattern",
          "type": "object",
          "description": "Contains the conditions and benefits of the promotion toan eligible party",
          "properties": {
            "@baseType": {
              "type": "string",
              "description": "The base type for use in polymorphic collections"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A link to the schema describing a resource (for type extension)."
            },
            "@type": {
              "type": "string",
              "description": "The class type of the actual resource (for type extension)."
            },
            "action": {
              "type": "array",
              "items": {
                "$ref": "../Product/PromotionAction.schema.json#PromotionAction"
              }
            },
            "criteriaGroup": {
              "type": "array",
              "items": {
                "$ref": "../Product/PromotionCriteriaGroup.schema.json#PromotionCriteriaGroup"
              }
            },
            "description": {
              "type": "string",
              "description": "Small description to clarify the pattern details."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of promotion pattern."
            },
            "name": {
              "type": "string",
              "description": "Alias to promotion pattern. This way is easily mentioned."
            },
            "priority": {
              "type": "integer",
              "description": "Priority. Smaller number means high."
            },
            "criteriaGroupLogicalRelationship": {
              "type": "string",
              "description": "Logical relation followed by the criteria group.",
              "enum": [
                "AND",
                "OR"
              ]
            },
            "validFor": {
              "description": "The period  for which the promotion pattern is valid.",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "required": [
            "action",
            "criteriaGroup"
          ]
        }
      }
    }
  ],
  "ProtocolTransferData": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProtocolTransferData.schema.json",
      "title": "ProtocolTransferData",
      "definitions": {
        "ProtocolTransferData": {
          "type": "object",
          "properties": {
            "transportProtocol": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "ProvisioningArtifact": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProvisioningArtifact.schema.json",
      "title": "ProvisioningArtifact",
      "definitions": {
        "ProvisioningArtifact": {
          "$id": "#ProvisioningArtifact",
          "type": "object",
          "description": "A managed provisioning artifact resource",
          "required": [
            "provisioningArtifactDefinition"
          ],
          "properties": {
            "provisioningArtifactDefinition": {
              "$ref": "../Common/ProvisioningArtifactDefinition.schema.json#ProvisioningArtifactDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "ProvisioningArtifactDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProvisioningArtifactDefinition.schema.json",
      "title": "ProvisioningArtifactDefinition",
      "definitions": {
        "ProvisioningArtifactDefinition": {
          "$id": "#ProvisioningArtifactDefinition",
          "type": "object",
          "description": "Provisioning artifact definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "ProvisioningArtifactRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ProvisioningArtifactRef.schema.json",
      "title": "ProvisioningArtifactRef",
      "definitions": {
        "ProvisioningArtifactRef": {
          "$id": "#ProvisioningArtifactRef",
          "type": "object",
          "description": "A reference to a managed provisioning artifact resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "PublicTransportLineAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PublicTransportLineAnalytics.schema.json",
      "title": "PublicTransportLineAnalytics",
      "definitions": {
        "PublicTransportLineAnalytics": {
          "$id": "#PublicTransportLineAnalytics",
          "type": "object",
          "properties": {
            "lineStartHour": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the last daily ride (23:59 if it is o-24 service)"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "PublicTransportStationAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PublicTransportStationAnalytics.schema.json",
      "title": "PublicTransportStationAnalytics",
      "definitions": {
        "PublicTransportStationAnalytics": {
          "$id": "#PublicTransportStationAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "PublictransportationJourneyAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PublictransportationJourneyAnalytics.schema.json",
      "title": "PublictransportationJourneyAnalytics",
      "definitions": {
        "PublictransportationJourneyAnalytics": {
          "$id": "#PublictransportationJourneyAnalytics",
          "type": "object",
          "properties": {
            "stationArrivalHour": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the arrival to the station"
            },
            "stationDepartureHour": {
              "type": "string",
              "format": "date-time",
              "description": "Time of the departure from the station"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "PurchaseActivityAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "PurchaseActivityAnalytics.schema.json",
      "title": "PurchaseActivityAnalytics",
      "definitions": {
        "PurchaseActivityAnalytics": {
          "$id": "#PurchaseActivityAnalytics",
          "type": "object",
          "properties": {
            "purchaseTime": {
              "type": "string",
              "format": "date-time",
              "description": "time the purchase occurred"
            },
            "rentalExpiryDate": {
              "type": "string",
              "format": "date-time",
              "description": "date of rental expiring"
            },
            "purchaseFinalAmount": {
              "type": "number",
              "format": "integer",
              "description": "Amount of purchase that was invoiced (including tax)"
            },
            "purchaseDiscountAmount": {
              "type": "number",
              "format": "integer",
              "description": "Amount of discount (from catalogue price)"
            },
            "purchaseCataloguePrice": {
              "type": "number",
              "format": "integer",
              "description": "The catalogue price (excluding Tax)"
            },
            "purchaseTaxAmount": {
              "type": "number",
              "format": "integer",
              "description": "Amount of tax included in the final amount"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "QualificationItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QualificationItemRelationship.schema.json",
      "title": "QualificationItemRelationship",
      "definitions": {
        "QualificationItemRelationship": {
          "$id": "#QualificationItemRelationship",
          "description": "Structure used to describe relationship between productOfferingQualification item from the same ProductOfferingQualification.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the ProductOfferingQualificationItem (from the same ProductOfferingQualificationItem)."
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QualificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QualificationRef.schema.json",
      "title": "QualificationRef",
      "definitions": {
        "QualificationRef": {
          "$id": "#QualificationRef",
          "type": "object",
          "description": "It could be a serviceQualification or a productOfferingQualification that has been executed previously and captured in the productOrder to provide eligibility information",
          "properties": {
            "qualificationItemId": {
              "type": "string",
              "description": "Id of an item of a qualification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Quantity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Quantity.schema.json",
      "title": "Quantity",
      "definitions": {
        "Quantity": {
          "$id": "#Quantity",
          "type": "object",
          "description": "An amount in a given unit",
          "properties": {
            "amount": {
              "type": "number",
              "format": "float",
              "default": 1,
              "description": "Numeric value in a given unit"
            },
            "units": {
              "type": "string",
              "description": "Unit"
            }
          }
        }
      }
    }
  ],
  "QuantityType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuantityType.schema.json",
      "title": "QuantityType",
      "definitions": {
        "QuantityType": {
          "$id": "#QuantityType",
          "description": "Representation of a quantity of something. I can also be used to represent a quantity range",
          "properties": {
            "amount": {
              "type": "number",
              "format": "decimal",
              "description": "Measured amount"
            },
            "units": {
              "type": "string",
              "description": "Units the quantity is measured in"
            }
          },
          "required": [
            "units",
            "amount"
          ],
          "type": "object"
        }
      }
    }
  ],
  "QueryProductRecommendation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryProductRecommendation.schema.json",
      "title": "QueryProductRecommendation",
      "definitions": {
        "QueryProductRecommendation": {
          "$id": "#QueryProductRecommendation",
          "description": "Recommendation API is used to recommend offering quickly based on the history and real-time context of customer. It is a real-time and personalized recommendation API. It is usually provided by e-commerce or BSS, CRM system in omni-channel.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the queryProductRecommendation"
            },
            "instantSyncRecommendation": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get recommendation result in the response"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the queryProductRecommendation"
            },
            "name": {
              "type": "string",
              "description": "Name of the queryProductRecommendation"
            },
            "recommendationType": {
              "type": "string",
              "description": "The type of the queryProductRecommendation"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period in which the queryProductRecommendation is valid"
            },
            "productOrder": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ProductOrderRef.schema.json#ProductOrderRef"
              }
            },
            "productOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../Common/ItemRef.schema.json#ItemRef"
              }
            },
            "place": {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue",
              "description": "The place which the queryProductRecommendation is related to"
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
              }
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
              }
            },
            "shoppingCart": {
              "type": "array",
              "items": {
                "$ref": "../Customer/ShoppingCartRef.schema.json#ShoppingCartRef"
              }
            },
            "shoppingCartItem": {
              "type": "array",
              "items": {
                "$ref": "../Common/ItemRef.schema.json#ItemRef"
              }
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "recommendationItem": {
              "type": "array",
              "items": {
                "$ref": "../Product/RecommendationItem.schema.json#RecommendationItem"
              }
            },
            "state": {
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType",
              "description": "State of the queryProductRecommendation defined in the state engine"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QueryProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryProductStock.schema.json",
      "title": "QueryProductStock",
      "definitions": {
        "QueryProductStock": {
          "$id": "#QueryProductStock",
          "description": "QueryProductStock is used to query product stock availability",
          "type": "object",
          "properties": {
            "creationDate": {
              "description": "Date when the QueryProductStock was created.",
              "type": "string",
              "format": "date-time"
            },
            "requestedQueryProductStockDate": {
              "description": "Date when the requester wished to have a response for this product stock query.",
              "type": "string",
              "format": "date-time"
            },
            "completedQueryProductStockDate": {
              "description": "Date when the QueryProductStock was completed.",
              "type": "string",
              "format": "date-time"
            },
            "requestedAvailabilityDate": {
              "description": "Date when the stock availability should be query.",
              "type": "string",
              "format": "date-time"
            },
            "id": {
              "description": "Unique identifier of the QueryProductStock",
              "type": "string"
            },
            "href": {
              "description": "Reference of the QueryProductStock",
              "type": "string"
            },
            "instantSyncCheck": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the CheckProductStock (acknowledged, inProgress, terminatedWithError, done)"
            },
            "queryProductStockItem": {
              "type": "array",
              "description": "A list of query product stock item - only present in response",
              "items": {
                "$ref": "..Resource/ProductStock.schema.json#/definitions/ProductStock"
              }
            },
            "searchCriteria": {
              "$ref": "../Resource/ProductStock.schema.json#/definitions/ProductStock",
              "description": "Criterias used to perform the query product stock - To be provided in the request."
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to this QueryProductStock",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "QueryServiceQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryServiceQualification.schema.json",
      "title": "QueryServiceQualification",
      "definitions": {
        "QueryServiceQualification": {
          "$id": "#QueryServiceQualification",
          "type": "object",
          "description": "QueryServiceQualification is used to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics, ...).",
          "properties": {
            "searchCriteria": {
              "description": "Search structure to retrieve eligible service specification",
              "$ref": "ServiceQualificationItem.schema.json#ServiceQualificationItem"
            },
            "serviceQualificationItem": {
              "type": "array",
              "description": "A list of service qualification items.",
              "items": {
                "$ref": "ServiceQualificationItem.schema.json#ServiceQualificationItem"
              }
            },
            "queryServiceQualificationDate": {
              "type": "string",
              "description": "Date when the serviceQualification was submitted",
              "format": "date-time"
            }
          },
          "allOf": [
            {
              "$ref": "../Service/ServiceQualification.schema.json#ServiceQualification"
            }
          ]
        }
      }
    }
  ],
  "QueryShipmentQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryShipmentQualification.schema.json",
      "title": "QueryShipmentQualification",
      "definitions": {
        "QueryShipmentQualification": {
          "$id": "#QueryShipmentQualification",
          "type": "object",
          "description": "QueryShipmentQualification is used to retrieve a list of shipments that are valid in the context of the interaction (place, party, shipment parameters, ...).",
          "properties": {
            "queryShipmentQualificationDate": {
              "type": "string",
              "description": "Date when the shipmentQualification was submitted",
              "format": "date-time"
            },
            "shipmentQualificationItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/ShipmentQualificationItem.schema.json#/definitions/ShipmentQualificationItem"
              }
            },
            "searchCriteria": {
              "$ref": "../EngagedParty/ShipmentQualificationItem.schema.json#/definitions/ShipmentQualificationItem"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/ShipmentQualification.schema.json#/definitions/ShipmentQualification"
            }
          ]
        }
      }
    }
  ],
  "QueryUsageConsumption": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryUsageConsumption.schema.json",
      "title": "QueryUsageConsumption",
      "definitions": {
        "QueryUsageConsumption": {
          "$id": "#QueryUsageConsumption",
          "type": "object",
          "description": "An QueryUsageConsumption allows to manage the calculation request of an usage consumption",
          "properties": {
            "searchCriteria": {
              "description": "Search structure to retrieve current value of usage",
              "$ref": "UsageConsumption.schema.json#UsageConsumption"
            },
            "usageConsumption": {
              "type": "array",
              "description": "Report with current counters and balances",
              "items": {
                "$ref": "UsageConsumption.schema.json#UsageConsumption"
              }
            },
            "queryUsageConsumptionDate": {
              "type": "string",
              "description": "Date when the query was submitted",
              "format": "date-time"
            },
            "relatedParty": {
              "type": "array",
              "description": "Reference and role of the related parties for which the usage consumption is requested",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QueryWorkQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QueryWorkQualification.schema.json",
      "title": "QueryWorkQualification",
      "definitions": {
        "QueryWorkQualification": {
          "$id": "#QueryWorkQualification",
          "type": "object",
          "description": "QueryWorkQualification is used to retrieve a list of units of work that are valid in the context of the interaction",
          "properties": {
            "queryWorkQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the workQualification was submitted"
            },
            "searchCriteria": {
              "$ref": "../EngagedParty/WorkQualificationItem.schema.json#/definitions/WorkQualificationItem"
            },
            "workQualificationItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkQualificationItem.schema.json#/definitions/WorkQualificationItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/WorkQualification.schema.json#/definitions/WorkQualification"
            }
          ]
        }
      }
    }
  ],
  "Quote": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Quote.schema.json",
      "title": "Quote",
      "definitions": {
        "Quote": {
          "$id": "#Quote",
          "type": "object",
          "required": [
            "quoteItem"
          ],
          "description": "Quote can be used to negotiate service and product acquisition or modification between a customer and a service provider. Quote contain list of quote items, a reference to customer (partyRole), a list of productOffering and attached prices and conditions.",
          "properties": {
            "agreement": {
              "type": "array",
              "description": "A reference to an agreement defining the context of the quote",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#AgreementRef"
              }
            },
            "billingAccount": {
              "type": "array",
              "description": "A reference to a billing account to provide quote context information ",
              "items": {
                "$ref": "../Customer/BillingAccountRef.schema.json#BillingAccountRef"
              }
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the quote from a business perspective that can be useful for the CRM system (e.g. \"enterprise\", \"residential\", ...)"
            },
            "contactMedium": {
              "type": "array",
              "description": "Information contact related to the quote requester",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "description": {
              "type": "string",
              "description": "Description of the quote"
            },
            "effectiveQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the quote has been completed"
            },
            "expectedFulfillmentStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "this is the date wished by the requester to have the requested quote item delivered"
            },
            "expectedQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "This is expected date - from quote supplier - to be able to send back  a response for this quote"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards)"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the quote"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier - attributed by quoting system"
            },
            "instantSyncQuote": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get quoting result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201. "
            },
            "note": {
              "type": "array",
              "description": "Free form text associated with the quote",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "authorization": {
              "type": "array",
              "description": "An authorization provided for the quote",
              "items": {
                "$ref": "../Customer/Authorization.schema.json#Authorization"
              }
            },
            "quoteDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the quote was created"
            },
            "quoteItem": {
              "type": "array",
              "description": "An item of the quote - it is used to descirbe an operation on a product to be quoted",
              "items": {
                "$ref": "../Customer/QuoteItem.schema.json#QuoteItem"
              },
              "minItems": 1
            },
            "quoteTotalPrice": {
              "type": "array",
              "description": "Quote total price",
              "items": {
                "$ref": "../Customer/QuotePrice.schema.json#QuotePrice"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "A reference to a party playing a role in this quote (customer, seller, requester, etc.)",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "productOfferingQualification": {
              "type": "array",
              "description": "A reference to a previously done product offering qualification",
              "items": {
                "$ref": "../Product/ProductOfferingQualificationRef.schema.json#ProductOfferingQualificationRef"
              }
            },
            "requestedQuoteCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "This is requested date - from quote requester - to get a complete response for this quote"
            },
            "state": {
              "$ref": "../Product/QuoteStateType.schema.json#QuoteStateType",
              "description": "State of the quote : described in the state-machine diagram"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Quote validity period"
            },
            "version": {
              "type": "string",
              "description": "Quote version - if the customer rejected the quote but  negotiations still open a new version of the quote is managed"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QuoteItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteItem.schema.json",
      "title": "QuoteItem",
      "definitions": {
        "QuoteItem": {
          "$id": "#QuoteItem",
          "type": "object",
          "description": "A quote items describe an action to be performed on a productOffering or a product in order to get pricing elements and condition.",
          "properties": {
            "action": {
              "type": "string",
              "description": "Action to be performed on this quote item (add, modify, remove, etc.)"
            },
            "appointment": {
              "type": "array",
              "description": "A reference to appointment(s) associated with this quote item",
              "items": {
                "$ref": "../Customer/AppointmentRef.schema.json#AppointmentRef"
              }
            },
            "attachment": {
              "type": "array",
              "description": "A reference to attachment(s) associated with this quote item",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "id": {
              "type": "string",
              "description": "Identifier of the quote item (generally it is a sequence number 01, 02, 03, ...)"
            },
            "note": {
              "type": "array",
              "description": "Free form text associated with the quote item",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue"
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity asked for this quote item"
            },
            "quoteItem": {
              "type": "array",
              "description": "A structure to embedded quote item within quote item",
              "items": {
                "$ref": "../Customer/QuoteItem.schema.json#QuoteItem"
              }
            },
            "quoteItemAuthorization": {
              "type": "array",
              "description": "Authorization related to this quote item",
              "items": {
                "$ref": "../Customer/Authorization.schema.json#Authorization"
              }
            },
            "quoteItemPrice": {
              "type": "array",
              "description": "Price for this quote item",
              "items": {
                "$ref": "../Customer/QuotePrice.schema.json#QuotePrice"
              }
            },
            "quoteItemRelationship": {
              "type": "array",
              "description": "A relationship from item within a quote",
              "items": {
                "$ref": "../Customer/QuoteItemRelationship.schema.json#QuoteItemRelationship"
              }
            },
            "productOfferingQualificationItem": {
              "description": "A reference to a previously done POQ with item specified",
              "$ref": "../Product/ProductOfferingQualificationItemRef.schema.json#ProductOfferingQualificationItemRef"
            },
            "relatedParty": {
              "type": "array",
              "description": "A reference to a party playing a role in this quote item",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "state": {
              "type": "string",
              "description": "State of the quote item : described in the state machine diagram"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QuoteItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteItemRef.schema.json",
      "title": "QuoteItemRef",
      "definitions": {
        "QuoteItemRef": {
          "$id": "#QuoteItemRef",
          "type": "object",
          "description": "It's a Quote item that has been executed previously.",
          "required": [
            "id",
            "quoteId"
          ],
          "properties": {
            "quoteHref": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "quoteId": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "quoteName": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "id": {
              "type": "string",
              "description": "Id of an item of a quote"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "QuoteItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteItemRelationship.schema.json",
      "title": "QuoteItemRelationship",
      "definitions": {
        "QuoteItemRelationship": {
          "$id": "#QuoteItemRelationship",
          "description": "Used to describe relationship between quote item. These relationship could have an impact on pricing and conditions",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID of the related order item (must be in the same quote)"
            },
            "relationshipType": {
              "type": "string",
              "description": "Relationship type as relies on, bundles, etc..."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QuoteItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteItemStateType.schema.json",
      "title": "QuoteItemStateType",
      "definitions": {
        "QuoteItemStateType": {
          "$id": "#QuoteItemStateType",
          "type": "string",
          "description": "Possible values for the state of the quote item",
          "enum": [
            "rejected",
            "pending",
            "inProgress",
            "approved"
          ]
        }
      }
    }
  ],
  "QuotePrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuotePrice.schema.json",
      "title": "QuotePrice",
      "definitions": {
        "QuotePrice": {
          "$id": "#QuotePrice",
          "description": "Description of price and discount awarded",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the quote/quote item price"
            },
            "name": {
              "type": "string",
              "description": "Name of the quote /quote item price"
            },
            "productOfferingPrice": {
              "$ref": "../Product/ProductOfferingPriceRef.schema.json#ProductOfferingPriceRef",
              "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time."
            },
            "priceType": {
              "type": "string",
              "description": "indicate if the price is for recurrent or no-recurrent charge"
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Used for recurring charge to indicate period (month, week, etc..)"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..)"
            },
            "priceAlteration": {
              "type": "array",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#PriceAlteration"
              }
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#Price"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "QuoteRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteRef.schema.json",
      "title": "QuoteRef",
      "definitions": {
        "QuoteRef": {
          "$id": "#QuoteRef",
          "type": "object",
          "description": "It's a Quote that has been executed previously",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "QuoteStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteStateType.schema.json",
      "title": "QuoteStateType",
      "definitions": {
        "QuoteStateType": {
          "$id": "#QuoteStateType",
          "type": "string",
          "description": "Possible values for the state of the quote",
          "enum": [
            "rejected",
            "pending",
            "inProgress",
            "cancelled",
            "approved",
            "accepted"
          ]
        }
      }
    }
  ],
  "QuoteTerm": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "QuoteTerm.schema.json",
      "title": "QuoteTerm",
      "definitions": {
        "QuoteTerm": {
          "$id": "#QuoteTerm",
          "description": "Description of  aproduct Term linked to this quoteItem. This represent a commitment with a duration",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the quoteTerm"
            },
            "duration": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "Duration of the Term associated with this item"
            },
            "name": {
              "type": "string",
              "description": "Name of the quoteTerm"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RatedEventAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RatedEventAnalytics.schema.json",
      "title": "RatedEventAnalytics",
      "definitions": {
        "RatedEventAnalytics": {
          "$id": "#RatedEventAnalytics",
          "type": "object",
          "properties": {
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "subscriptionStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "subscriptionCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Subscriber creation date"
            },
            "subscriptionActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "RatedProductUsage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RatedProductUsage.schema.json",
      "title": "RatedProductUsage",
      "definitions": {
        "RatedProductUsage": {
          "$id": "#RatedProductUsage",
          "description": "An occurrence of employing a product for its intended purpose with all rating details",
          "type": "object",
          "properties": {
            "bucketValueConvertedInAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "isBilled": {
              "type": "boolean",
              "description": "Boolean indicating if usage have been billed or not"
            },
            "isTaxExempt": {
              "type": "boolean",
              "description": "Indicates if the rated amount is exempt of tax"
            },
            "offerTariffType": {
              "type": "string",
              "description": "Type of tariff applied"
            },
            "productRef": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "ratingAmountType": {
              "type": "string",
              "description": "Type of amount"
            },
            "ratingDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of usage rating"
            },
            "taxExcludedRatingAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxIncludedRatingAmount": {
              "$ref": "../Common/Money.schema.json#Money"
            },
            "taxRate": {
              "type": "number",
              "format": "float",
              "description": "Tax rate"
            },
            "usageRatingTag": {
              "type": "string",
              "description": "Tag value: [usage]: the usage is always rated outside a usage bundle\n[included usage]: the usage is rated inside a usage bundle\n[non included usage]: the usage bundle is exhausted. The usage is rated outside the usage bundle"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "RatingBillingPostpaidXDRAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RatingBillingPostpaidXDRAnalytics.schema.json",
      "title": "RatingBillingPostpaidXDRAnalytics",
      "definitions": {
        "RatingBillingPostpaidXDRAnalytics": {
          "$id": "#RatingBillingPostpaidXDRAnalytics",
          "type": "object",
          "properties": {
            "eventStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "2015-01-07T15:01:09.000Z"
            },
            "eventEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "2015-01-07T15:12:09.000Z"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": " "
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "RatingBillingPostpaidXDRSa.Analytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RatingBillingPostpaidXDRSa.Analytics.schema.json",
      "title": "RatingBillingPostpaidXDRSa.Analytics",
      "definitions": {
        "RatingBillingPostpaidXDRSa.Analytics": {
          "$id": "#RatingBillingPostpaidXDRSa.Analytics",
          "type": "object",
          "properties": {}
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "RatingBillingPrepaidXDRAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RatingBillingPrepaidXDRAnalytics.schema.json",
      "title": "RatingBillingPrepaidXDRAnalytics",
      "definitions": {
        "RatingBillingPrepaidXDRAnalytics": {
          "$id": "#RatingBillingPrepaidXDRAnalytics",
          "type": "object",
          "properties": {
            "eventEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "2015-01-08T15:04:19.000Z"
            },
            "eventDeliveryTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventAnswerTime": {
              "type": "string",
              "format": "date-time",
              "description": "2015-01-07T15:01:09.000Z"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": " "
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "RealizingResourceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RealizingResourceRef.schema.json",
      "title": "RealizingResourceRef",
      "definitions": {
        "RealizingResourceRef": {
          "$id": "#RealizingResourceRef",
          "type": "object",
          "description": "RealizingResource reference. RealizingResource is a link to the resource that realizes the product.",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Receiver": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Receiver.schema.json",
      "title": "Receiver",
      "definitions": {
        "Receiver": {
          "$id": "#Receiver",
          "description": "Receivers of the communication message.",
          "type": "object",
          "properties": {
            "appUserId": {
              "type": "string",
              "description": "ID of the mobile app user"
            },
            "email": {
              "type": "string",
              "description": "Receiver address of email, if the communication type is email"
            },
            "id": {
              "type": "string",
              "description": "ID of the receiver"
            },
            "ip": {
              "type": "string",
              "description": "IP address of the receiver"
            },
            "name": {
              "type": "string",
              "description": "Name of the receiver"
            },
            "phoneNumber": {
              "type": "string",
              "description": "Phone number of the receiver, if the communication type is SMS."
            },
            "party": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ReceiverRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReceiverRef.schema.json",
      "title": "ReceiverRef",
      "definitions": {
        "ReceiverRef": {
          "$id": "#ReceiverRef",
          "description": "Receiver reference. The receiver is the party role who will receive the settlement note.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the receiver"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the receiver"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Recommendation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Recommendation.schema.json",
      "title": "Recommendation",
      "definitions": {
        "Recommendation": {
          "$id": "#Recommendation",
          "description": "Recommendation API is used to recommend offering quickly based on the history and real-time context of customer. It is a real-time and personalized recommendation API. It is usually provided by e-commerce or BSS, CRM system in omni-channel.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the recommendation"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of recommendation"
            },
            "name": {
              "type": "string",
              "description": "Name of recommendation"
            },
            "recommendationType": {
              "type": "string",
              "description": "The type of recommendation"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period in which the recommendation is valid"
            },
            "order": {
              "$ref": "../Customer/ProductOrderRef.schema.json#ProductOrderRef"
            },
            "location": {
              "$ref": "../Common/GeographicLocationRef.schema.json#GeographicLocationRef",
              "description": "The geographic location which the recommendation is related to"
            },
            "channel": {
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
            },
            "category": {
              "$ref": "../Product/CategoryRef.schema.json#CategoryRef",
              "description": "The category for grouping recommendations"
            },
            "shoppingCart": {
              "$ref": "../Customer/ShoppingCartRef.schema.json#ShoppingCartRef",
              "description": "The shopping cart which the recommendation is related to"
            },
            "party": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "item": {
              "type": "array",
              "items": {
                "$ref": "../Product/RecommendationItem.schema.json#RecommendationItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RecommendationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RecommendationItem.schema.json",
      "title": "RecommendationItem",
      "definitions": {
        "RecommendationItem": {
          "$id": "#RecommendationItem",
          "required": [
            "product"
          ],
          "description": "A list of recommendation items. Every item is a product offering and its rank.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the product"
            },
            "priority": {
              "type": "integer",
              "description": "The rank of the list of recommended offering."
            },
            "product": {
              "$ref": "../Product/ProductRefOrValue.schema.json#ProductRefOrValue",
              "description": "A recommended product."
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Record": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Record.schema.json",
      "title": "Record",
      "definitions": {
        "Record": {
          "$id": "#Record",
          "description": "A record in a worklog.",
          "type": "object",
          "properties": {
            "dateTime": {
              "type": "string",
              "format": "date-time",
              "description": "The date time that a record is generated."
            },
            "description": {
              "type": "string",
              "description": "The detail description in a record."
            },
            "supportPerson": {
              "type": "string",
              "description": "The person who logged that record."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RecurringPeriodType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RecurringPeriodType.schema.json",
      "title": "RecurringPeriodType",
      "definitions": {
        "RecurringPeriodType": {
          "$id": "#RecurringPeriodType",
          "type": "string",
          "description": "Valid values for this type",
          "enum": [
            "weekly",
            "fortnightly",
            "monthly"
          ]
        }
      }
    }
  ],
  "Refund": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Refund.schema.json",
      "title": "Refund",
      "definitions": {
        "Refund": {
          "$id": "#Refund",
          "required": [
            "paymentMethod",
            "account"
          ],
          "description": "The Refund resource represents a performed Refund. It contains both information about the refund and the payment method used to perform it.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of Refund"
            },
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the refund"
            },
            "correlatorId": {
              "type": "string",
              "description": "Unique identifier in the client for the refund in case it is needed to correlate"
            },
            "refundDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the refund was performed"
            },
            "name": {
              "type": "string",
              "description": "Screen name of the refund"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the refund"
            },
            "authorizationCode": {
              "type": "string",
              "description": "Authorization code retrieved from an external payment gateway that could be used for conciliation"
            },
            "status": {
              "type": "string",
              "description": "Status of the refund"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the status was recorded"
            },
            "amount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be refunded (net of taxes)"
            },
            "taxAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Tax applied"
            },
            "totalAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount to be paid (including taxes)"
            },
            "channel": {
              "$ref": "../Customer/ChannelRef.schema.json#ChannelRef"
            },
            "payment": {
              "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
            },
            "requestor": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "paymentMethod": {
              "$ref": "../Customer/PaymentMethodRefOrValue.schema.json#PaymentMethodRefOrValue"
            },
            "account": {
              "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RefundStatusExampleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RefundStatusExampleType.schema.json",
      "title": "RefundStatusExampleType",
      "definitions": {
        "RefundStatusExampleType": {
          "$id": "#RefundStatusExampleType",
          "type": "string",
          "description": "Possible values for the status of a refund",
          "enum": [
            "pendingAuthorization",
            "authorized",
            "captured",
            "failed",
            "canceled",
            "denied",
            "done"
          ]
        }
      }
    }
  ],
  "RelatedChangeRequestRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedChangeRequestRef.schema.json",
      "title": "RelatedChangeRequestRef",
      "definitions": {
        "RelatedChangeRequestRef": {
          "$id": "#RelatedChangeRequestRef",
          "description": "An existing Change Request that has some form of correlation with the given Change Request.",
          "type": "object",
          "properties": {
            "correlation": {
              "type": "string",
              "description": "The correlation between two change requests"
            },
            "description": {
              "type": "string",
              "description": "Description of a change request."
            },
            "href": {
              "type": "string",
              "description": "Hyper link to access a change request."
            },
            "id": {
              "type": "string",
              "description": "Identifier of an Change Request"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedChannel": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedChannel.schema.json",
      "title": "RelatedChannel",
      "definitions": {
        "RelatedChannel": {
          "$id": "#RelatedChannel",
          "type": "object",
          "description": "Related channel to another entity. May be online web, mobile app, social ,etc.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the channel."
            },
            "role": {
              "type": "string",
              "description": "Role playing by the channel."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedEntity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedEntity.schema.json",
      "title": "RelatedEntity",
      "definitions": {
        "RelatedEntity": {
          "$id": "#RelatedEntity",
          "description": "A reference to an entity, where the type of the entity is not known in advance.",
          "type": "object",
          "required": [
            "id",
            "role",
            "@referredType"
          ],
          "properties": {
            "role": {
              "type": "string",
              "description": "The role of an entity."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedEntityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedEntityRef.schema.json",
      "title": "RelatedEntityRef",
      "definitions": {
        "RelatedEntityRef": {
          "$id": "#RelatedEntityRef",
          "description": "A reference to an entity, where the type of the entity is not known in advance.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "The hyperlink to access an entity."
            },
            "id": {
              "type": "string",
              "description": "The identifier of an entity."
            },
            "name": {
              "type": "string",
              "description": "The name of an entity."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedEntityRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedEntityRefOrValue.schema.json",
      "title": "RelatedEntityRefOrValue",
      "definitions": {
        "RelatedEntityRefOrValue": {
          "$id": "#RelatedEntityRefOrValue",
          "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "required": [
            "role"
          ],
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            },
            {
              "$ref": "EntityValue.schema.json#EntityValue"
            }
          ]
        }
      }
    }
  ],
  "RelatedGeographicAddressRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedGeographicAddressRefOrValue.schema.json",
      "title": "RelatedGeographicAddressRefOrValue",
      "definitions": {
        "RelatedGeographicAddressRefOrValue": {
          "$id": "#RelatedGeographicAddressRefOrValue",
          "description": "#TODO",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "required": [
            "role"
          ],
          "allOf": [
            {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          ]
        }
      }
    }
  ],
  "RelatedGeographicLocationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedGeographicLocationRefOrValue.schema.json",
      "title": "RelatedGeographicLocationRefOrValue",
      "definitions": {
        "RelatedGeographicLocationRefOrValue": {
          "$id": "#RelatedGeographicLocationRefOrValue",
          "description": "#TODO",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "required": [
            "role"
          ],
          "allOf": [
            {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          ]
        }
      }
    }
  ],
  "RelatedObject": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedObject.schema.json",
      "title": "RelatedObject",
      "definitions": {
        "RelatedObject": {
          "$id": "#RelatedObject",
          "description": "Defines objects linked with trouble ticket.",
          "type": "object",
          "properties": {
            "involvement": {
              "type": "string",
              "description": "Consequence of the ticket on the related object (for instance disputed, adjusted...)"
            },
            "reference": {
              "type": "string",
              "description": "Reference of object"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedParty": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedParty.schema.json",
      "title": "RelatedParty",
      "definitions": {
        "RelatedParty": {
          "$id": "#RelatedParty",
          "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
          "type": "object",
          "required": [
            "id",
            "@referredType"
          ],
          "properties": {
            "role": {
              "type": "string",
              "description": "Role played by the related party"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedPartyRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedPartyRef.schema.json",
      "title": "RelatedPartyRef",
      "definitions": {
        "RelatedPartyRef": {
          "$id": "#RelatedPartyRef",
          "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of a related party"
            },
            "href": {
              "type": "string",
              "description": "Reference of the related party, could be a party reference or a party role reference"
            },
            "name": {
              "type": "string",
              "description": "Name of the related party"
            },
            "role": {
              "type": "string",
              "description": "Role of the related party."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedPartyRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedPartyRefOrValue.schema.json",
      "title": "RelatedPartyRefOrValue",
      "definitions": {
        "RelatedPartyRefOrValue": {
          "$id": "#RelatedPartyRefOrValue",
          "description": "Entity reference. A related party defines party or party role linked to a specific entity.",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Party.schema.json#Party"
            },
            {
              "$ref": "../EngagedParty/PartyRef.schema.json#PartyRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedPartyWithContactInfo": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedPartyWithContactInfo.schema.json",
      "title": "RelatedPartyWithContactInfo",
      "definitions": {
        "RelatedPartyWithContactInfo": {
          "$id": "#RelatedPartyWithContactInfo",
          "type": "object",
          "description": "Related party specialization that includes contact information",
          "properties": {
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          ]
        }
      }
    }
  ],
  "RelatedPlace": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedPlace.schema.json",
      "title": "RelatedPlace",
      "definitions": {
        "RelatedPlace": {
          "$id": "#RelatedPlace",
          "description": "A  Place and an associated role as installation adress, delivery address, etc....",
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "Role of the place, such as: [home delivery], [shop retrieval])"
            },
            "href": {
              "type": "string",
              "description": "Unique reference of the place"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the place"
            },
            "name": {
              "type": "string",
              "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedPlaceRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedPlaceRefOrValue.schema.json",
      "title": "RelatedPlaceRefOrValue",
      "definitions": {
        "RelatedPlaceRefOrValue": {
          "$id": "#RelatedPlaceRefOrValue",
          "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "required": [
            "role"
          ],
          "allOf": [
            {
              "$ref": "../Common/PlaceRef.schema.json#PlaceRef"
            },
            {
              "$ref": "../Common/Place.schema.json#Place"
            }
          ]
        }
      }
    }
  ],
  "RelatedProductOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedProductOrderItem.schema.json",
      "title": "RelatedProductOrderItem",
      "definitions": {
        "RelatedProductOrderItem": {
          "$id": "#RelatedProductOrderItem",
          "type": "object",
          "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination.",
          "required": [
            "orderItemId",
            "productOrderId"
          ],
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "productOrderHref": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "productOrderId": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "orderItemAction": {
              "type": "string",
              "description": "Action of the order item for this product"
            },
            "orderItemId": {
              "type": "string",
              "description": "Identifier of the order item where the product was managed"
            },
            "role": {
              "type": "string",
              "description": "role of the product order item for this product"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedServiceOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedServiceOrderItem.schema.json",
      "title": "RelatedServiceOrderItem",
      "definitions": {
        "RelatedServiceOrderItem": {
          "type": "object",
          "description": "RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "serviceOrderHref": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "serviceOrderId": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "itemAction": {
              "$ref": "OrderItemActionType.schema.json#/definitions/OrderItemActionType",
              "description": "Action of the order item for this service"
            },
            "itemId": {
              "type": "string",
              "description": "Identifier of the order item where the service was managed"
            },
            "role": {
              "type": "string",
              "description": "role of the service order item for this service"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "RelatedShipment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedShipment.schema.json",
      "title": "RelatedShipment",
      "definitions": {
        "RelatedShipment": {
          "$id": "#RelatedShipment",
          "description": "A related shipment addressable entity",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
            }
          ]
        }
      }
    }
  ],
  "RelatedShippingOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedShippingOrder.schema.json",
      "title": "RelatedShippingOrder",
      "definitions": {
        "RelatedShippingOrder": {
          "$id": "#RelatedShippingOrder",
          "description": "A related shipping order addressable entity",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
            }
          ]
        }
      }
    }
  ],
  "RelatedTopupBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedTopupBalance.schema.json",
      "title": "RelatedTopupBalance",
      "definitions": {
        "RelatedTopupBalance": {
          "$id": "#RelatedTopupBalance",
          "description": "Related Entity reference. A related balance topup defines a relationship via a role to another balance topup. Used in the PrepayBalanceManagement API to track child topups that are related to the parent (initiating balance topup resource). PrepayBalanceManagement defines the child role",
          "type": "object",
          "properties": {
            "role": {
              "type": "string",
              "description": "Role played by the TopupBalance. In the PrepayBalanceManagement API this is parent or child"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RelatedWorkOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RelatedWorkOrderItem.schema.json",
      "title": "RelatedWorkOrderItem",
      "definitions": {
        "RelatedWorkOrderItem": {
          "$id": "#RelatedWorkOrderItem",
          "type": "object",
          "description": "RelatedWorkOrderItem (WorkOrder item). The work order item which triggered this unit of work's creation/change/termination.",
          "required": [
            "workOrderId",
            "orderItemId"
          ],
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "orderItemAction": {
              "type": "string",
              "description": "Action of the order item for this unit of work\r\n"
            },
            "orderItemId": {
              "type": "string",
              "description": "Identifier of the work order item where the unit of work was managed"
            },
            "role": {
              "type": "string",
              "description": "Role of the work order item for this unitof work\r\n"
            },
            "workOrderHref": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "workOrderId": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ReportingPeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReportingPeriod.schema.json",
      "title": "ReportingPeriod",
      "definitions": {
        "ReportingPeriod": {
          "$id": "#ReportingPeriod",
          "type": "string",
          "description": "Possible values for the reporting period",
          "enum": [
            "r_1mn",
            "r_5mn",
            "r_15mn",
            "r_30mn",
            "r_1h",
            "r_24h",
            "na"
          ]
        }
      }
    }
  ],
  "Request": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Request.schema.json",
      "title": "Request",
      "definitions": {
        "Request": {
          "$id": "#Request",
          "type": "object",
          "description": "A response to a request",
          "properties": {
            "body": {
              "description": "The body of the request. For example for an HTTP request might contain content of a form .",
              "type": "string"
            },
            "header": {
              "type": "array",
              "description": "Items included in the header of the request. For example for an HTTP request might contain requested locale, basic authentication.",
              "items": {
                "$ref": "../Common/HeaderItem.schema.json#HeaderItem"
              },
              "title": "header"
            },
            "method": {
              "description": "The protocol of the request, e.g. http",
              "type": "string"
            },
            "to": {
              "description": "The target of the request, e.g. a URL for an HTTP request",
              "type": "string"
            }
          },
          "required": [
            "body",
            "header"
          ]
        }
      }
    }
  ],
  "RequestedPeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RequestedPeriod.schema.json",
      "title": "RequestedPeriod",
      "definitions": {
        "RequestedPeriod": {
          "$id": "#RequestedPeriod",
          "type": "object",
          "description": "The period of time for which user requested to use the resources.\r\nThe user can request on the start date without the end date.",
          "properties": {
            "daysOfWeek": {
              "type": "string",
              "description": "A day or days representing when the schedule is applicable. For example 2, 3 represent Monday and Tuesday."
            },
            "fromToDateTime": {
              "type": "string",
              "format": "date-time",
              "description": "The period of time for which the schedule is applicable. \r\nInstance values are mutually exclusive with daysOfWeek values."
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the from and to DateTime attributes. \r\nPossible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Reservation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Reservation.schema.json",
      "title": "Reservation",
      "definitions": {
        "Reservation": {
          "$id": "#Reservation",
          "type": "object",
          "description": "reservation api resource",
          "properties": {
            "cancellationDate": {
              "type": "string",
              "description": "Date when the reservation is cancelled."
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the reservation is cancelled."
            },
            "channel": {
              "$ref": "../Common/ChannelRef.schema.json#/definitions/ChannelRef"
            },
            "completionDate": {
              "type": "string",
              "description": "Date when the reservation was completed"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the reservation was created"
            },
            "description": {
              "type": "string",
              "description": "A string. free-text description of the reservation."
            },
            "expectedCompletionDate": {
              "type": "string",
              "description": "Expected completion date amended by the provider"
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyRef.schema.json#/definitions/RelatedPartyRef"
              }
            },
            "requestedCompletionDate": {
              "type": "string",
              "description": "Requested completion date from the requestor perspective"
            },
            "requestedStartDate": {
              "type": "string",
              "description": "Reservation fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow the reservation to begin before a specific date. "
            },
            "reservationPeriod": {
              "description": "Period of time for which the target entity is to be in a reserved state",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            },
            "state": {
              "$ref": "../Common/ReservationStateType.schema.json#/definitions/ReservationStateType"
            },
            "stateChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the state changed."
            },
            "stateChangeReason": {
              "type": "string",
              "description": "The reason for changing the state"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ReservationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReservationItem.schema.json",
      "title": "ReservationItem",
      "definitions": {
        "ReservationItem": {
          "$id": "#ReservationItem",
          "type": "object",
          "description": "An identified part of the reservation. A reservation is decomposed into one or more reservation items.",
          "properties": {
            "action": {
              "$ref": "../Common/ReservationItemActionType.schema.json#/definitions/ReservationItemActionType"
            },
            "appliedCapacity": {
              "$ref": "../Common/Capacity.schema.json#/definitions/Capacity"
            },
            "capacityDemand": {
              "$ref": "../Common/Capacity.schema.json#/definitions/Capacity"
            },
            "id": {
              "type": "string",
              "description": "A string. Identifier of the item."
            },
            "quantity": {
              "type": "integer"
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyRef.schema.json#/definitions/RelatedPartyRef"
              }
            },
            "reservationPeriod": {
              "description": "Period of time for which the target entity is to be in a reserved state",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            },
            "state": {
              "$ref": "../Common/ReservationItemStateType.schema.json#/definitions/ReservationItemStateType"
            },
            "stateChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the state changed."
            },
            "stateChangeReason": {
              "type": "string",
              "description": "The reason for changing the state"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ReservationItemActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReservationItemActionType.schema.json",
      "title": "ReservationItemActionType",
      "definitions": {
        "ReservationItemActionType": {
          "$id": "#ReservationItemActionType",
          "type": "string",
          "description": "action to be performed on the entity",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "ReservationItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReservationItemStateType.schema.json",
      "title": "ReservationItemStateType",
      "definitions": {
        "ReservationItemStateType": {
          "$id": "#ReservationItemStateType",
          "type": "string",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ReservationStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReservationStateType.schema.json",
      "title": "ReservationStateType",
      "definitions": {
        "ReservationStateType": {
          "$id": "#ReservationStateType",
          "type": "string",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ReserveBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReserveBalance.schema.json",
      "title": "ReserveBalance",
      "definitions": {
        "ReserveBalance": {
          "$id": "#ReserveBalance",
          "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
          "properties": {
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date on which the reservation will expire, if the amount was not actually used"
            }
          },
          "allOf": [
            {
              "$ref": "BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "ReserveBalanceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReserveBalanceRef.schema.json",
      "title": "ReserveBalanceRef",
      "definitions": {
        "ReserveBalanceRef": {
          "$id": "#ReserveBalanceRef",
          "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Customer/BalanceActionRef.schema.json#BalanceActionRef"
            }
          ]
        }
      }
    }
  ],
  "ReserveProductStock": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReserveProductStock.schema.json",
      "title": "ReserveProductStock",
      "definitions": {
        "ReserveProductStock": {
          "$id": "#ReserveProductStock",
          "description": "ReserveProductStock is used to request a product stock reservation",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the ReserveProductStock",
              "type": "string"
            },
            "href": {
              "description": "Reference of the ReserveProductStock",
              "type": "string"
            },
            "creationDate": {
              "description": "Date when the ReserveProductStock was created (whatever its status).",
              "type": "string",
              "format": "date-time"
            },
            "requiredAvailabilityDate": {
              "description": "Requested product availability date for the reservation.",
              "type": "string",
              "format": "date-time"
            },
            "reserveProductStockState": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the ReserveProductStock (acknowledged, inProgress, failed, done, cancelled)"
            },
            "reserveProductStockItem": {
              "type": "array",
              "description": "A list of product stock item reservation ",
              "items": {
                "$ref": "../Resource/ReserveProductStockItem.schema.json#/definitions/ReserveProductStockItem"
              }
            },
            "relatedEntity": {
              "type": "array",
              "description": "A list of related  entity in relationship with this stock reservation (trouble ticket, quote, product order, etc...) ",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "channel": {
              "type": "array",
              "description": "Channel(s) beneficiary(ies) for this reservation",
              "items": {
                "$ref": "ChannelRef.schema.json#/definitions/ChannelRef"
              }
            },
            "marketSegment": {
              "type": "array",
              "description": "Market segment(s) beneficiary(ies) for this reservation",
              "items": {
                "$ref": "MarketSegmentRef.schema.json#/definitions/MarketSegmentRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Reservation validity period"
            },
            "place": {
              "description": "Used to define a place where the product stock must be reserved",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ReserveProductStockItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReserveProductStockItem.schema.json",
      "title": "ReserveProductStockItem",
      "definitions": {
        "ReserveProductStockItem": {
          "$id": "#ReserveProductStockItem",
          "description": "ReserveProductStockItem is used to request a stock reservation item for a product",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the ReserveProductStockItem.",
              "type": "string"
            },
            "quantityRequested": {
              "$ref": "Quantity.schema.json#/definitions/Quantity",
              "description": "Quantity requested for this Product"
            },
            "quantityReserved": {
              "$ref": "Quantity.schema.json#/definitions/Quantity",
              "description": "Quantity reserved for this Product"
            },
            "reserveProductStockState": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the ReserveProductStockItem (acknowledged, inProgress, failed, done, cancelled)."
            },
            "productStockRequested": {
              "$ref": "ProductStockRef.schema.json#/definitions/ProductStockRef",
              "description": "Identifier of the Product Stock requested for this reservation item."
            },
            "productStockReserved": {
              "$ref": "ProductStockRef.schema.json#/definitions/ProductStockRef",
              "description": "Identifier of the Product Stock used for this reservation item."
            },
            "requestedProduct": {
              "$ref": "../Product/ProductRefOrValue.schema.json#/definitions/ProductRefOrValue",
              "description": "Requested product for reservation - a Product configuration could be passed"
            }
          },
          "allOf": [
            {
              "$ref": "Extensible.schema.json#/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ReserveProductStockRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ReserveProductStockRef.schema.json",
      "title": "ReserveProductStockRef",
      "definitions": {
        "ReserveProductStockRef": {
          "$id": "#ReserveProductStockRef",
          "type": "object",
          "description": "Product Stock Reservation reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Resolution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Resolution.schema.json",
      "title": "Resolution",
      "definitions": {
        "Resolution": {
          "$id": "#Resolution",
          "description": "The way one or more change request has been implementation through a direct remedy or task",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The resolutions code, it can be configured as a multiple level hierarchy"
            },
            "description": {
              "type": "string",
              "description": "The description of the resolution"
            },
            "name": {
              "type": "string",
              "description": "The name of the resolution"
            },
            "task": {
              "type": "array",
              "items": {
                "$ref": "../Common/Task.schema.json#Task"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Resource": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Resource.schema.json",
      "title": "Resource",
      "definitions": {
        "Resource": {
          "type": "object",
          "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
          "properties": {
            "category": {
              "type": "string",
              "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
            },
            "description": {
              "type": "string",
              "description": "free-text description of the resource"
            },
            "endOperatingDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date till the resource is operating"
            },
            "href": {
              "type": "string",
              "description": "The URI for the object itself."
            },
            "id": {
              "type": "string",
              "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
            },
            "administrativeState": {
              "$ref": "../Resource/ResourceAdministrativeStateType.schema.json#ResourceAdministrativeStateType",
              "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
            },
            "operationalState": {
              "$ref": "../Resource/ResourceOperationalStateType.schema.json#ResourceOperationalStateType",
              "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
            },
            "resourceStatus": {
              "$ref": "../Resource/ResourceStatusType.schema.json#ResourceStatusType",
              "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
            },
            "usageState": {
              "$ref": "../Resource/ResourceUsageStateType.schema.json#ResourceUsageStateType",
              "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the resource"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            },
            "place": {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "resourceRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceRelationship.schema.json#/definitions/ResourceRelationship"
              }
            },
            "resourceCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              }
            },
            "resourceSpecification": {
              "$ref": "../Resource/ResourceSpecificationRef.schema.json#/definitions/ResourceSpecificationRef"
            },
            "startOperatingDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date time( DateTime). The date from which the resource is operating"
            },
            "resourceVersion": {
              "type": "string",
              "description": "A field that identifies the specific version of an instance of a resource."
            },
            "activationFeature": {
              "description": "Configuration features",
              "type": "array",
              "items": {
                "$ref": "../Common/Feature.schema.json#/definitions/Feature"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ],
          "required": [
            "id",
            "href"
          ]
        }
      }
    }
  ],
  "ResourceAdministrativeStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceAdministartiveStateType.schema.json",
      "title": "ResourceAdministrativeStateType",
      "definitions": {
        "ResourceAdministrativeStateType": {
          "$id": "#ResourceAdministrativeStateType",
          "type": "string",
          "description": "ResourceAdministrativeStateType enumerations",
          "enum": [
            "locked",
            "unlocked",
            "shutdown"
          ]
        }
      }
    }
  ],
  "ResourceAlarmRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceAlarmRef.schema.json",
      "title": "ResourceAlarmRef",
      "definitions": {
        "ResourceAlarmRef": {
          "$id": "#ResourceAlarmRef",
          "type": "object",
          "description": "A set of alarm ids identifying the alarms that are underlying this problem.",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "changeRequest": {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            },
            "href": {
              "type": "string",
              "description": "Reference of the Alarm"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Alarm"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceCandidate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCandidate.schema.json",
      "title": "ResourceCandidate",
      "definitions": {
        "ResourceCandidate": {
          "$id": "#ResourceCandidate",
          "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of this REST resource"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to this REST resource"
            },
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "version": {
              "type": "string",
              "description": "the version of resource candidate"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of the resource candidate."
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "ResourceCategoryRef.schema.json#ResourceCategoryRef"
              },
              "description": "The categories in which this candidate is exposed"
            },
            "resourceSpecification": {
              "$ref": "ResourceSpecificationRef.schema.json#ResourceSpecificationRef",
              "description": "The detailed specification for this candidate"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceCandidateRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCandidateRef.schema.json",
      "title": "ResourceCandidateRef",
      "definitions": {
        "ResourceCandidateRef": {
          "$id": "#ResourceCandidateRef",
          "description": "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "the version of resource candidate"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceCapacityDemand": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCapacityDemand.schema.json",
      "title": "ResourceCapacityDemand",
      "definitions": {
        "ResourceCapacityDemand": {
          "$id": "#ResourceCapacityDemand",
          "type": "object",
          "description": "the amount of capacity that is planned to be consumed or has been consumed.",
          "properties": {
            "applicableTimePeriod": {
              "$ref": "../Common/ApplicableTimePeriod.schema.json#/definitions/ApplicableTimePeriod"
            },
            "capacityDemandAmount": {
              "type": "string",
              "description": "A value and units that define the CapacityDemand, such as 10000 ea, 10B Mb. \r\nInstance values are mutually exclusive with From and To capacityDemandAmounts and range interval."
            },
            "place": {
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            },
            "resource": {
              "$ref": "../Resource/ResourceRefOrValue.schema.json#/definitions/ResourceRefOrValue"
            },
            "resourcePool": {
              "description": "manages resource capacity with the resource state.",
              "$ref": "../Resource/ResourcePool.schema.json#/definitions/ResourcePool"
            },
            "resourceValueOffset": {
              "type": "integer",
              "description": "A value used to specify the next resource to retrieve or manipulate, for example: for resoruceAvailablityCheck, an offset of 4383942288 will indicate that the search will look for consequent phone numbers of 4383942288."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ResourceCatalog": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCatalog.schema.json",
      "title": "ResourceCatalog",
      "definitions": {
        "ResourceCatalog": {
          "$id": "#ResourceCatalog",
          "description": "The root entity for resource catalog management.\nA resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the Catalog"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Unique reference of the catalog"
            },
            "name": {
              "type": "string",
              "description": "Name of the catalog"
            },
            "description": {
              "type": "string",
              "description": "Description of this catalog"
            },
            "version": {
              "type": "string",
              "description": "Catalog version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the catalog is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "List of parties involved in this catalog"
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "ResourceCategoryRef.schema.json#ResourceCategoryRef"
              },
              "description": "List of root categories contained in this catalog"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceCategory": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCategory.schema.json",
      "title": "ResourceCategory",
      "definitions": {
        "ResourceCategory": {
          "$id": "#ResourceCategory",
          "type": "object",
          "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the category"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the category"
            },
            "name": {
              "type": "string",
              "description": "Name of the category"
            },
            "description": {
              "type": "string",
              "description": "Description of the category"
            },
            "version": {
              "type": "string",
              "description": "Category version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the category is valid"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "parentId": {
              "type": "string",
              "description": "Unique identifier of the parent category"
            },
            "isRoot": {
              "type": "boolean",
              "description": "If true, this Boolean indicates that the category is a root of categories"
            },
            "category": {
              "type": "array",
              "items": {
                "$ref": "ResourceCategoryRef.schema.json#ResourceCategoryRef"
              },
              "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings."
            },
            "resourceCandidate": {
              "type": "array",
              "items": {
                "$ref": "ResourceCandidateRef.schema.json#ResourceCandidateRef"
              },
              "description": "List of resource candidates accessible via this category"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "List of parties involved in this category"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceCategoryRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCategoryRef.schema.json",
      "title": "ResourceCategoryRef",
      "definitions": {
        "ResourceCategoryRef": {
          "$id": "#ResourceCategoryRef",
          "type": "object",
          "description": "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories.",
          "properties": {
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceCharacteristic.schema.json",
      "title": "ResourceCharacteristic",
      "definitions": {
        "ResourceCharacteristic": {
          "$id": "#ResourceCharacteristic",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "name of the characteristic"
            },
            "value": {
              "type": "string",
              "description": "value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceEntity": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceEntity.schema.json",
      "title": "ResourceEntity",
      "definitions": {
        "ResourceEntity": {
          "$id": "#ResourceEntity",
          "type": "object",
          "description": "Base schema for REST Resources",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink to access the test resource",
              "example": "http://myservice.com/resource-path"
            },
            "id": {
              "type": "string",
              "description": "ID created by the implementing service",
              "example": "aac9969d-219d-4ff1-b256-1765dcf9b342"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceFunction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceFunction.schema.json",
      "title": "ResourceFunction",
      "definitions": {
        "ResourceFunction": {
          "$id": "#ResourceFunction",
          "description": "A ResourceFunction is a behavior to transform inputs of any nature into outputs of any nature independently from the way it is provided.",
          "type": "object",
          "properties": {
            "connectionPoint": {
              "description": "External connection points of the resource function. These are the service access points (SAP) where inputs and outputs of the function are available.",
              "type": "array",
              "items": {
                "$ref": "ConnectionPointRef.schema.json#/definitions/ConnectionPointRef"
              }
            },
            "connectivity": {
              "description": "Internal connectivity of contained resource functions.",
              "type": "array",
              "items": {
                "$ref": "ResourceGraph.schema.json#/definitions/ResourceGraph"
              }
            },
            "priority": {
              "description": "Priority of the Resource Function. Decides what happens in a contention scenario.",
              "type": "integer",
              "format": "int64"
            },
            "role": {
              "description": "Role of the Resource Function. Used when Resource Function is a component of a composite Resource Function and the exact role of the service within the composite is not clear from descriptor/location.",
              "type": "string"
            },
            "functionType": {
              "description": "A type of the Resource Function as specified by the provider of the API.",
              "type": "string"
            },
            "autoModification": {
              "description": "List of the kinds of auto-modifications that are applied to a given network service e.g what can be scaled.",
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "schedule": {
              "description": "This is a reference to a schedule. Allows consumers to schedule modifications to the service at certain times.",
              "type": "array",
              "items": {
                "$ref": "ScheduleRef.schema.json#/definitions/ScheduleRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/LogicalResource.schema.json#/definitions/LogicalResource"
            }
          ]
        }
      }
    }
  ],
  "ResourceFunctionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceFunctionRef.schema.json",
      "title": "ResourceFunctionRef",
      "definitions": {
        "ResourceFunctionRef": {
          "$id": "#ResourceFunctionRef",
          "description": "Resource Function reference.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Resource function version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceFunctionSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceFunctionSpecification.schema.json",
      "title": "ResourceFunctionSpecification",
      "definitions": {
        "ResourceFunctionSpecification": {
          "$id": "#ResourceFunctionSpecification",
          "description": "Specifies a function as a behavior to transform inputs of any nature into outputs of any nature independently from the way it is provided, for example a Medium to Large Enterprise Firewall.",
          "type": "object",
          "properties": {
            "connectionPointSpecification": {
              "type": "array",
              "description": "External connection point specifications. These are the service access points (SAP) where inputs and outputs of the function are available.",
              "items": {
                "$ref": "ConnectionPointSpecificationRef.schema.json#/definitions/ConnectionPointSpecificationRef"
              }
            },
            "connectivitySpecification": {
              "type": "array",
              "description": "Internal connectivity potential specifications.",
              "items": {
                "$ref": "ResourceGraphSpecification.schema.json#/definitions/ResourceGraphSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "LogicalResourceSpecification.schema.json#LogicalResourceSpecification"
            }
          ]
        }
      }
    }
  ],
  "ResourceFunctionSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceFunctionSpecificationRef.schema.json",
      "title": "ResourceFunctionSpecificationRef",
      "definitions": {
        "ResourceFunctionSpecificationRef": {
          "$id": "#ResourceFunctionSpecificationRef",
          "description": "ResourceFunctionSpecification reference.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Resource function specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraph": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraph.schema.json",
      "title": "ResourceGraph",
      "definitions": {
        "ResourceGraph": {
          "$id": "#ResourceGraph",
          "description": "Resource graph",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the resource graph.",
              "type": "string"
            },
            "name": {
              "description": "Descriptive name for the resource graph.",
              "type": "string"
            },
            "description": {
              "description": "Description of the resource graph.",
              "type": "string"
            },
            "graphRelationship": {
              "description": "Relationships to other resource graphs.",
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceGraphRelationship.schema.json#/definitions/ResourceGraphRelationship"
              }
            },
            "connection": {
              "description": "Resource graph edges.",
              "type": "array",
              "items": {
                "$ref": "../Resource/Connection.schema.json#/definitions/Connection"
              }
            }
          },
          "required": [
            "connection"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraphRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraphRef.schema.json",
      "title": "ResourceGraphRef",
      "definitions": {
        "ResourceGraphRef": {
          "$id": "#ResourceGraphRef",
          "description": "Resource graph reference.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraphRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraphRelationship.schema.json",
      "title": "ResourceGraphRelationship",
      "definitions": {
        "ResourceGraphRelationship": {
          "$id": "#ResourceGraphRelationship",
          "description": "Describes links between resource graphs.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "description": "Semantic of the relationship.",
              "type": "string",
              "enum": [
                "adjacency",
                "connectivity"
              ]
            },
            "resourceGraph": {
              "description": "A reference to the related resource graph.",
              "$ref": "../Resource/ResourceGraphRef.schema.json#/definitions/ResourceGraphRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraphSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraphSpecification.schema.json",
      "title": "ResourceGraphSpecification",
      "definitions": {
        "ResourceGraphSpecification": {
          "$id": "#ResourceGraphSpecification",
          "description": "Resource graph specification.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the resource graph specification.",
              "type": "string"
            },
            "name": {
              "description": "Descriptive name for the resource graph specification.",
              "type": "string"
            },
            "description": {
              "description": "Description of the resource graph specification.",
              "type": "string"
            },
            "graphSpecificationRelationship": {
              "description": "Relationships to other resource graph specifications.",
              "type": "array",
              "items": {
                "$ref": "ResourceGraphSpecificationRelationship.schema.json#/definitions/ResourceGraphSpecificationRelationship"
              }
            },
            "connectionSpecification": {
              "description": "Resource graph edge specifications.",
              "type": "array",
              "items": {
                "$ref": "ConnectionSpecification.schema.json#/definitions/ConnectionSpecification"
              }
            }
          },
          "required": [
            "connectionSpecification"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraphSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraphSpecificationRef.schema.json",
      "title": "ResourceGraphSpecificationRef",
      "definitions": {
        "ResourceGraphSpecificationRef": {
          "$id": "#ResourceGraphSpecificationRef",
          "description": "Resource graph specification reference.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceGraphSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceGraphSpecificationRelationship.schema.json",
      "title": "ResourceGraphSpecificationRelationship",
      "definitions": {
        "ResourceGraphSpecificationRelationship": {
          "$id": "#ResourceGraphSpecificationRelationship",
          "description": "Describes link between resource graph specifications.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "description": "Semantic of the relationship.",
              "type": "string",
              "enum": [
                "adjacency",
                "connectivity"
              ]
            },
            "resourceGraph": {
              "description": "A reference to the related resource graph specification.",
              "$ref": "ResourceGraphSpecificationRef.schema.json#/definitions/ResourceGraphSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOperationalStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOperationalStateType.schema.json",
      "title": "ResourceOperationalStateType",
      "definitions": {
        "ResourceOperationalStateType": {
          "$id": "#ResourceOperationalStateType",
          "type": "string",
          "description": "ResourceOperationalStateType enumerations",
          "enum": [
            "enable",
            "disable"
          ]
        }
      }
    }
  ],
  "ResourceOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrder.schema.json",
      "title": "ResourceOrder",
      "definitions": {
        "ResourceOrder": {
          "type": "object",
          "description": "A Resource Order is a request to provision a set of Resources (logical and physical) triggered by the request to provision a Service through a Service Order",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of an instance of the Resource Order. Required to be unique within the resource type.",
              "examples": [
                "9ba1047c38ce"
              ]
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the order",
              "format": "uri",
              "examples": [
                "http://host/resourceOrder/9ba1047c38ce"
              ]
            },
            "cancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled - if cancelled, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2021-11-20T10:19:46+0000"
              ]
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled - if cancelled",
              "examples": [
                "Cables no longer required by customer"
              ]
            },
            "externalId": {
              "type": "string",
              "description": "DEPRECATED: Use externalReference Instead. ID given by the consumer (to facilitate searches afterwards)",
              "examples": [
                "Customer Ref: 577e6b2be5e5"
              ]
            },
            "externalReference": {
              "type": "array",
              "items": {
                "$ref": "ExternalReference.schema.json#/definitions/ExternalReference"
              }
            },
            "state": {
              "$ref": "ResourceOrderStateType.schema.json#/definitions/ResourceOrderStateType"
            },
            "name": {
              "type": "string",
              "description": "A string used to give a name to the Resource Order",
              "examples": [
                "7km of Optical Cable for Acme Inc"
              ]
            },
            "description": {
              "type": "string",
              "description": "Free-text description of the Resource Order",
              "examples": [
                "7km of 6-fiber, double jacketed Optical Cable for Acme Inc"
              ]
            },
            "priority": {
              "description": "A way that can be used by consumers to prioritize orders in OM system (such as: 0 is the highest priority, and 4 the lowest)",
              "type": "integer",
              "examples": [
                0,
                4
              ]
            },
            "orderType": {
              "type": "string",
              "description": "Name of the Resource Order type"
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the order from a business perspective that can be useful for the order management system",
              "examples": [
                "Premium",
                "Enterprise"
              ]
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was created, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2020-11-20T10:19:46+0000"
              ]
            },
            "requestedStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Order start date wished by the requestor, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2020-11-20T10:19:46+0000"
              ]
            },
            "requestedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Requested delivery date from the requestor perspective, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2021-07-07T10:19:46+0000"
              ]
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was actually started, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2020-11-20T10:19:46+0000"
              ]
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was actually completed, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2021-07-07T10:19:46+0000"
              ]
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is expected to be completed, in RFC3339 (subset of ISO8601) format",
              "examples": [
                "2021-07-07T10:19:46+0000"
              ]
            },
            "orderItem": {
              "type": "array",
              "items": {
                "$ref": "ResourceOrderItem.schema.json#/definitions/ResourceOrderItem"
              }
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "Note.schema.json#/definitions/Note"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "RelatedParty.schema.json#/definitions/RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderItem.schema.json",
      "title": "ResourceOrderItem",
      "definitions": {
        "ResourceOrderItem": {
          "type": "object",
          "description": "An identified part of the order. A resource order is decomposed into one or more order items.",
          "properties": {
            "action": {
              "$ref": "OrderItemActionType.schema.json#/definitions/OrderItemActionType"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the line item (such as a sequence number 01, 02, 03)",
              "examples": [
                "01",
                "02"
              ]
            },
            "orderItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "ResourceOrderItemRelationship.schema.json#/definitions/ResourceOrderItemRelationship"
              }
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity ordered",
              "minItems": 0,
              "examples": [
                7000,
                1
              ]
            },
            "resourceSpecification": {
              "$comment": "Deprecated: Can be accessed from the resource",
              "$ref": "ResourceSpecificationRef.schema.json#/definitions/ResourceSpecificationRef"
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#/definitions/AppointmentRef"
            },
            "resource": {
              "$ref": "../Resource/ResourceReforValue.schema.json#/definitions/ResourceRefOrValue"
            },
            "state": {
              "$ref": "../Resource/ResourceOrderItemStateType.schema.json#/definitions/ResourceOrderItemStateType"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderItemRef.schema.json",
      "title": "ResourceOrderItemRef",
      "definitions": {
        "ResourceOrderItemRef": {
          "$id": "#ResourceOrderItemRef",
          "type": "object",
          "properties": {
            "itemId": {
              "type": "string",
              "description": "Identifier of the line item",
              "examples": [
                "01",
                "02"
              ]
            },
            "resourceOrderId": {
              "type": "string",
              "description": "Identifier of the resource order that this item belongs to",
              "examples": [
                "4b22f7cad22d"
              ]
            },
            "resourceOrderHref": {
              "type": "string",
              "description": "Link to the order to which this item belongs to",
              "format": "uri",
              "examples": [
                "http://host/resourceOrder/4b22f7cad22d"
              ]
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation",
              "examples": [
                "PhysicalResource"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderItemRelationship.schema.json",
      "title": "ResourceOrderItemRelationship",
      "definitions": {
        "ResourceOrderItemRelationship": {
          "$id": "#ResourceOrderItemRelationship",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the order item relationship",
              "examples": [
                "dependency"
              ]
            },
            "orderItem": {
              "$ref": "../Resource/ResourceOrderItemRef.schema.json#ResourceOrderItemRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderItemStateType.schema.json",
      "title": "ResourceOrderItemStateType",
      "definitions": {
        "ResourceOrderItemStateType": {
          "$id": "#ResourceOrderItemStateType",
          "type": "string",
          "description": "Possible values for the state of the order item",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ResourceOrderRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderRef.schema.json",
      "title": "ResourceOrderRef",
      "definitions": {
        "ResourceOrderRef": {
          "$id": "#ResourceOrderRef",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the related resource order",
              "examples": [
                "fde8c6a47450"
              ]
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the related Resource Order",
              "examples": [
                "http://host/resourceOrder/fde8c6a47450"
              ]
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderRelationship.schema.json",
      "title": "ResourceOrderRelationship",
      "definitions": {
        "ResourceOrderRelationship": {
          "$id": "#ResourceOrderRelationship",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "The type of related order item, such as [dependency] if the order item needs to be held until another order item is complete; [cross-reference] to keep track of the source order (service order)",
              "examples": [
                "dependency",
                "cross-reference"
              ]
            },
            "resourceOrder": {
              "$ref": "../Resource/ResourceOrderRef.schema.json#ResourceOrderRef"
            },
            "serviceOrder": {
              "$ref": "../Service/ServiceOrderRef.schema.json#ServiceOrderRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceOrderStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceOrderStateType.schema.json",
      "title": "ResourceOrderStateType",
      "definitions": {
        "ResourceOrderStateType": {
          "$id": "#ResourceOrderStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ResourceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceRef.schema.json",
      "title": "ResourceRef",
      "definitions": {
        "ResourceRef": {
          "$id": "#ResourceRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceRefOrValue.schema.json",
      "title": "ResourceRefOrValue",
      "definitions": {
        "ResourceRefOrValue": {
          "$id": "#ResourceRefOrValue",
          "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the related ResourceRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "ResourceRef.schema.json#ResourceRef"
            },
            {
              "$ref": "Resource.schema.json#Resource"
            }
          ]
        }
      }
    }
  ],
  "ResourceRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceRelationship.schema.json",
      "title": "ResourceRelationship",
      "definitions": {
        "ResourceRelationship": {
          "$id": "#ResourceRelationship",
          "description": "Linked resources to the one instantiate, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (e.g. an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
          "type": "object",
          "required": [
            "relationshipType",
            "resource"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the resource relationship, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (eg: an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
              "examples": [
                "bundled",
                "reliesOn",
                "targets"
              ]
            },
            "resource": {
              "$ref": "ResourceRefOrValue.schema.json#ResourceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ResourceReservation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceReservation.schema.json",
      "title": "ResourceReservation",
      "definitions": {
        "ResourceReservation": {
          "$id": "#ResourceReservation",
          "type": "object",
          "properties": {
            "reservationItem": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceReservationItem.schema.json#/definitions/ResourceReservationItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Reservation.schema.json#/definitions/Reservation"
            }
          ]
        }
      }
    }
  ],
  "ResourceReservationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceReservationItem.schema.json",
      "title": "ResourceReservationItem",
      "definitions": {
        "ResourceReservationItem": {
          "$id": "#ResourceReservationItem",
          "type": "object",
          "properties": {
            "reservationItem": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceReservationItem.schema.json#/definitions/ResourceReservationItem"
              }
            },
            "resource": {
              "$ref": "../Resource/ResourceRefOrValue.schema.json#/definitions/ResourceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ReservationItem.schema.json#/definitions/ReservationItem"
            }
          ]
        }
      }
    }
  ],
  "ResourceReservationItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceReservationItemRef.schema.json",
      "title": "ResourceReservationItemRef",
      "definitions": {
        "ResourceReservationItemRef": {
          "$id": "#ResourceReservationItemRef",
          "type": "object",
          "description": "Reference to a reservation item that can typically be queried with another API.",
          "properties": {
            "resourceReservationId": {
              "type": "string",
              "description": "Identifier of the reservation of which the item is a part of"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceReservationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceReservationRef.schema.json",
      "title": "ResourceReservationRef",
      "definitions": {
        "ResourceReservationRef": {
          "$id": "#ResourceReservationRef",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceSpecification.schema.json",
      "title": "ResourceSpecification",
      "definitions": {
        "ResourceSpecification": {
          "$id": "#ResourceSpecification",
          "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is a base class that represents a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of this REST resource",
              "examples": [
                "6c088cf7f1bc"
              ]
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to this REST resource",
              "examples": [
                "http://host/resourceSpecification/6c088cf7f1bc"
              ]
            },
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "version": {
              "type": "string",
              "description": "Resource Specification version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of the resource specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
            },
            "category": {
              "type": "string",
              "description": "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
            },
            "targetResourceSchema": {
              "description": "A target resource schema reference. The reference object to the schema and type of target resource which is described by resource specification.",
              "$ref": "TargetResourceSchema.schema.json#TargetResourceSchema"
            },
            "featureSpecification": {
              "type": "array",
              "description": "A list of Features for this specification.",
              "items": {
                "$ref": "../Common/FeatureSpecification.schema.json#FeatureSpecification"
              }
            },
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              },
              "description": "Complements the description of an element (for instance a resource) through video, pictures ..."
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A related party defines party or party role linked to a specific entity."
            },
            "resourceSpecCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "ResourceSpecificationCharacteristic.schema.json#ResourceSpecificationCharacteristic"
              },
              "description": "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
            },
            "resourceSpecRelationship": {
              "type": "array",
              "items": {
                "$ref": "ResourceSpecificationRelationship.schema.json#ResourceSpecificationRelationship"
              },
              "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            },
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            }
          ]
        }
      }
    }
  ],
  "ResourceSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceSpecificationCharacteristic.schema.json",
      "title": "ResourceSpecificationCharacteristic",
      "definitions": {
        "ResourceSpecificationCharacteristic": {
          "$id": "#ResourceSpecificationCharacteristic",
          "description": "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and\nrelationships, which distinguish a resource specification from other resource specifications.",
          "type": "object",
          "properties": {
            "resourceSpecCharRelationship": {
              "type": "array",
              "items": {
                "$ref": "ResourceSpecificationCharacteristicRelationship.schema.json#ResourceSpecificationCharacteristicRelationship"
              },
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
            },
            "resourceSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ResourceSpecificationCharacteristic object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding ResourceSpecificationCharacteristic object can take on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ]
        }
      }
    }
  ],
  "ResourceSpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceSpecificationCharacteristicRelationship.schema.json",
      "title": "ResourceSpecificationCharacteristicRelationship",
      "definitions": {
        "ResourceSpecificationCharacteristicRelationship": {
          "$id": "#ResourceSpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among ResourceSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "name": {
              "type": "string",
              "description": "Name of the target characteristic within the specification"
            },
            "characteristicSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the characteristic within the specification"
            },
            "resourceSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the resource specification containing the target characteristic"
            },
            "resourceSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the resource specification containing the target characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the object is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ResourceSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceSpecificationRef.schema.json",
      "title": "ResourceSpecificationRef",
      "definitions": {
        "ResourceSpecificationRef": {
          "$id": "#ResourceSpecificationRef",
          "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Resource Specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ResourceSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceSpecificationRelationship.schema.json",
      "title": "ResourceSpecificationRelationship",
      "definitions": {
        "ResourceSpecificationRelationship": {
          "$id": "#ResourceSpecificationRelationship",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this resource specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of target ResourceSpecification"
            },
            "href": {
              "type": "string",
              "format": "uri",
              "description": "Reference of the target ResourceSpecification"
            },
            "name": {
              "type": "string",
              "description": "The name given to the target resource specification instance"
            },
            "defaultQuantity": {
              "type": "integer",
              "description": "The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more."
            },
            "maximumQuantity": {
              "type": "integer",
              "description": "The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards"
            },
            "minimumQuantity": {
              "type": "integer",
              "description": "The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "ResourceSpecificationCharacteristic.schema.json#ResourceSpecificationCharacteristic"
              },
              "description": "A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the ResourceSpecRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ResourceStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceStatusType.schema.json",
      "title": "ResourceStatusType",
      "definitions": {
        "ResourceStatusType": {
          "$id": "#ResourceStatusType",
          "type": "string",
          "description": "ResourceStatusType enumerations",
          "enum": [
            "standby",
            "alarm",
            "available",
            "reserved",
            "unknown",
            "suspended"
          ]
        }
      }
    }
  ],
  "ResourceUsageStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResourceUsageStateType.schema.json",
      "title": "ResourceUsageStateType",
      "definitions": {
        "ResourceUsageStateType": {
          "$id": "#ResourceUsageStateType",
          "type": "string",
          "description": "ResourceUsageStateType enumerations",
          "enum": [
            "idle",
            "active",
            "busy"
          ]
        }
      }
    }
  ],
  "Response": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Response.schema.json",
      "title": "Response",
      "definitions": {
        "Response": {
          "$id": "#Response",
          "type": "object",
          "description": "A response to a request",
          "properties": {
            "body": {
              "description": "The body of the response. For example for an HTTP response might contain HTML for rendering.",
              "type": "string"
            },
            "header": {
              "description": "Items included in the header of the response. For example for an HTTP response might contain negotiated locale.",
              "type": "array",
              "items": {
                "$ref": "../Common/HeaderItem.schema.json#HeaderItem"
              },
              "title": "header"
            },
            "statusCode": {
              "description": "The status of the response. For example for an HTTP response would be codes such as 200, 400, etc.",
              "type": "string"
            }
          },
          "required": [
            "body",
            "header"
          ]
        }
      }
    }
  ],
  "ResponseError": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ResponseError.schema.json",
      "title": "ResponseError",
      "definitions": {
        "ResponseError": {
          "$id": "#ResponseError",
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "HTTP Error code extension",
              "examples": [
                "400-2",
                "500-4"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ErrorMessage.schema.json#/definition/ErrorMessage"
            }
          ]
        }
      }
    }
  ],
  "RetrieveGeographicLocation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RetrieveGeographicLocation.schema.json",
      "title": "RetrieveGeographicLocation",
      "definitions": {
        "RetrieveGeographicLocation": {
          "$id": "#RetrieveGeographicLocation",
          "type": "object",
          "properties": {
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "requestedAccuracy": {
              "type": "number",
              "format": "float"
            },
            "status": {
              "type": "string"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            },
            "geographicLocation": {
              "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
            },
            "thing": {
              "$ref": "../Common/Object.schema.json#Object"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RetrieveLocationRelation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RetrieveLocationRelation.schema.json",
      "title": "RetrieveLocationRelation",
      "definitions": {
        "RetrieveLocationRelation": {
          "$id": "#RetrieveLocationRelation",
          "type": "object",
          "properties": {
            "distance": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            },
            "intersection": {
              "type": "array",
              "items": {
                "$ref": "../Common/GeographicLocation.schema.json#GeographicLocation"
              }
            },
            "location": {
              "$ref": "../Common/GeographicLocationRef.schema.json#GeographicLocationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RiskAssessment.schema.json",
      "title": "RiskAssessment",
      "definitions": {
        "RiskAssessment": {
          "$id": "#RiskAssessment",
          "description": "This is a generalized task resource allowing assessment of risks - it is expected that the resource will be specialized to reflect specific risks, such as risks associated with a party, or with an order, etc.",
          "type": "object",
          "properties": {
            "place": {
              "$ref": "../Common/RelatedPlace.schema.json#RelatedPlace",
              "description": "The place for which the risk is assessed, this is optional input to the task"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "Additional characteristics for which the risk might be assessed, optional input to the task"
            },
            "status": {
              "type": "string",
              "description": "The status of the risk assessment, such as Succeeded, In Progress, Failed, output from the task"
            },
            "riskAssessmentResult": {
              "$ref": "RiskAssessmentResult.schema.json#RiskAssessmentResult",
              "description": "The result of the risk assessment, output from the task"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "RiskAssessmentResult": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RiskAssessmentResult.schema.json",
      "title": "RiskAssessmentResult",
      "definitions": {
        "RiskAssessmentResult": {
          "$id": "#RiskAssessmentResult",
          "description": "This resource reflects the risk assessment",
          "type": "object",
          "properties": {
            "overallScore": {
              "type": "number",
              "format": "float",
              "description": "An overall assessment of the risk, composed from the individual scores",
              "minItems": 1
            },
            "score": {
              "type": "array",
              "items": {
                "$ref": "RiskScore.schema.json#RiskScore"
              },
              "description": "Additional characteristics for which the risk might be assessed, optional input to the task"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Period for which this result is considered valid and not stale"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "RiskScore": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RiskScore.schema.json",
      "title": "RiskScore",
      "definitions": {
        "RiskScore": {
          "$id": "#RiskScore",
          "description": "This resource reflects a score for a specific risk",
          "type": "object",
          "properties": {
            "score": {
              "type": "number",
              "format": "float",
              "description": "The risk score"
            },
            "riskName": {
              "$ref": "RiskType.schema.json#RiskType",
              "description": "The name of the risk"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "RiskType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RiskType.schema.json",
      "title": "RiskType",
      "definitions": {
        "RiskType": {
          "$id": "#RiskType",
          "description": "Types of risk that can be assessed",
          "type": "string",
          "enum": [
            "FraudRisk",
            "BadPaymentRisk",
            "CreditGamingRisk",
            "IDConfidenceRisk",
            "PaymentMethodRisk"
          ]
        }
      }
    }
  ],
  "Road": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/Transportation/Road/schema.json",
      "title": "FIWARE - Transportation / Road",
      "description": "This entity contains a harmonised geographic and contextual description of a road. Roads are made up of one or more RoadSegment entities. Road segments are usually used to model the different carriageways of highways, for instance. The presence of dedicated bicycle lanes should be modelled using road segments as well. Road segments also play an important role when modelling roads with heterogeneous segments, for instance segments on which speed limits are different. This entity is primarily associated with the Automotive and Smart City vertical segments and related IoT applications. This data model has been developed in cooperation with mobile operators and the GSMA.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Road"
              ],
              "description": "NGSI Entity type"
            },
            "roadClass": {
              "type": "string",
              "enum": [
                "motorway",
                "trunk",
                "primary",
                "secondary",
                "tertiary",
                "unclassified",
                "residential",
                "service"
              ]
            },
            "refRoadSegment": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              }
            },
            "length": {
              "type": "number",
              "minimum": 0
            },
            "responsible": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "required": [
                "id",
                "name",
                "type",
                "roadClass"
              ]
            },
            {
              "oneOf": [
                {
                  "required": [
                    "refRoadSegment"
                  ]
                },
                {
                  "required": [
                    "location"
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "RoadSegment": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://github.com/Fiware/dataModels/tree/master/Transportation/RoadSegment/schema.json",
      "title": "FIWARE - Transportation / Road Segment",
      "description": "This entity contains a harmonised geographic and contextual description of a road segment. A collection of road segments are used to describe a Road. Road segments can include several lanes. This data model allows to convey road segments made up of heterogeneous lanes (different in their usage, speed, height, etc.). Lanes are identified by using integer numbers between 1 and n, being number 1 the lane to the right when going forwards. The forward direction is the direction denoted by the vector which goes from the segment\"s start point to the segment\"s end point. This is the same convention as the one used by OpenStreetMap. This entity is primarily associated with the Automotive and Smart City vertical segments and related IoT applications. This data model has been developed in cooperation with mobile operators and the GSMA.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "RoadSegment"
              ],
              "description": "NGSI Entity type"
            },
            "refRoad": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "startPoint": {
              "$ref": "http://json-schema.org/geojson/geometry.json#",
              "description": "The start point of this road segment encoded as a GeoJSON point"
            },
            "endPoint": {
              "$ref": "http://json-schema.org/geojson/geometry.json#",
              "description": "The end point of this road segment encoded as a GeoJSON point"
            },
            "startKilometer": {
              "type": "number",
              "minimum": 0
            },
            "endKilometer": {
              "type": "number",
              "minimum": 0
            },
            "allowedVehicleType": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "agriculturalVehicle",
                  "bicycle",
                  "bus",
                  "car",
                  "caravan",
                  "carWithCaravan",
                  "carWithTrailer",
                  "constructionOrMaintenanceVehicle",
                  "lorry",
                  "moped",
                  "motorcycle",
                  "motorcycleWithSideCar",
                  "motorscooter",
                  "tanker",
                  "trailer",
                  "van",
                  "anyVehicle"
                ]
              }
            },
            "totalLaneNumber": {
              "type": "number",
              "minimum": 1
            },
            "length": {
              "type": "number",
              "minimum": 0
            },
            "maximumAllowedSpeed": {
              "type": "number",
              "minimum": 0
            },
            "minimumAllowedSpeed": {
              "type": "number",
              "minimum": 0
            },
            "maximumAllowedHeight": {
              "type": "number",
              "minimum": 0
            },
            "maximumAllowedWeight": {
              "type": "number",
              "minimum": 0
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "laneUsage": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "forward",
                  "backward"
                ]
              }
            },
            "category": {
              "type": "string",
              "enum": [
                "oneway",
                "toll",
                "link"
              ]
            }
          }
        }
      ],
      "required": [
        "id",
        "name",
        "type",
        "refRoad",
        "startPoint",
        "endPoint",
        "allowedVehicleType",
        "totalLaneNumber",
        "laneUsage"
      ]
    }
  ],
  "RoleSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RoleSpecification.schema.json",
      "title": "RoleSpecification",
      "definitions": {
        "RoleSpecification": {
          "$id": "#RoleSpecification",
          "description": "A RoleSpecification represents a specification of a role.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text documenting the role specification"
            },
            "name": {
              "type": "string",
              "description": "The name of the role specification. This name uniquely identifies the role specification"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RoleType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RoleType.schema.json",
      "title": "RoleType",
      "definitions": {
        "RoleType": {
          "$id": "#RoleType",
          "description": "A RoleType represents the type of a PartyRole, defined in the context of a given type of partnership, such as Buyer, Seller.",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "description": {
              "type": "string",
              "description": "An explanatory text documenting the role type"
            },
            "name": {
              "type": "string",
              "description": "The name of the role type."
            },
            "requiresBilling": {
              "type": "boolean",
              "description": "Indicates whether billing operations will be associated to parties playing the role"
            },
            "requiresSettlement": {
              "type": "boolean",
              "description": "Indicates whether settlement operations will be associated to parties playing the role"
            },
            "agreementSpecification": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementSpecificationRef.schema.json#AgreementSpecificationRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RoleTypeRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RoleTypeRef.schema.json",
      "title": "RoleTypeRef",
      "definitions": {
        "RoleTypeRef": {
          "$id": "#RoleTypeRef",
          "description": "RoleType reference.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the role type. It uniquely identifies the role type within the partnership type."
            },
            "partnershipHref": {
              "type": "string",
              "description": "Reference url of the partnership type containing the role type"
            },
            "partnershipId": {
              "type": "string",
              "description": "The identifier of the partnership type containing the role type"
            },
            "partnershipName": {
              "type": "string",
              "description": "The name of the partnership type defining this role type"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Route": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Route/schema.json",
      "title": "NGSI GTFS Schema - Route",
      "description": "GTFS Route",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Route"
              ],
              "description": "NGSI Entity type"
            },
            "name": {
              "type": "string"
            },
            "page": {
              "type": "string"
            },
            "routeColor": {
              "type": "string"
            },
            "routeTextColor": {
              "type": "string"
            },
            "routeType": {
              "type": "string",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
              ]
            },
            "routeSortOrder": {
              "type": "integer",
              "minimum": 0
            },
            "operatedBy": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "shortName",
        "name",
        "routeType",
        "operatedBy"
      ]
    }
  ],
  "Rule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Rule.schema.json",
      "title": "Rule",
      "definitions": {
        "Rule": {
          "type": "object",
          "$id": "#Rule",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the rule."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "RuleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RuleRef.schema.json",
      "title": "RuleRef",
      "definitions": {
        "RuleRef": {
          "$id": "#RuleRef",
          "description": "Rule reference. Rule is a common pattern or Template for the SLA parameters, metrics, and thresholds",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "RuleRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "RuleRefOrValue.schema.json",
      "title": "RuleRefOrValue",
      "definitions": {
        "RuleRefOrValue": {
          "$id": "#RuleRefOrValue",
          "description": "",
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Rule.schema.json#Rule"
            },
            {
              "$ref": "../EngagedParty/RuleRef.schema.json#RuleRef"
            }
          ]
        }
      }
    }
  ],
  "SLA": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SLA.schema.json",
      "title": "SLA",
      "definitions": {
        "SLA": {
          "$id": "#SLA",
          "description": "Part of a business agreement between a Service Provider and a Customer, quantitatively specifying the service performance level the Service Provider commits to deliver.",
          "type": "object",
          "properties": {
            "approvalDate": {
              "type": "string",
              "format": "date-time"
            },
            "approved": {
              "type": "boolean"
            },
            "description": {
              "type": "string",
              "description": "Description of the Service Level Agreement (SLA)"
            },
            "href": {
              "type": "string",
              "description": "Reference of the Service Level Agreement (SLA)"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Service Level Agreement (SLA)"
            },
            "name": {
              "type": "string",
              "description": "Name of the Service Level Agreement (SLA)"
            },
            "state": {
              "type": "string",
              "description": "State of the Service Level Agreement (SLA)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Period where the clauses of the SLA are applicable"
            },
            "version": {
              "type": "string",
              "description": "Version of the Service Level Agreement (SLA)"
            },
            "rule": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/Rule.schema.json#Rule"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "template": {
              "$ref": "../EngagedParty/TemplateRef.schema.json#TemplateRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SLARef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SLARef.schema.json",
      "title": "SLARef",
      "definitions": {
        "SLARef": {
          "$id": "#SLARef",
          "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the service level agreement"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of service level agreement"
            },
            "name": {
              "type": "string",
              "description": "Name of the service level agreement"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SLAViolation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SLAViolation.schema.json",
      "title": "SLAViolation",
      "definitions": {
        "SLAViolation": {
          "$id": "#SLAViolation",
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "violation": {
              "$ref": "../EngagedParty/Violation.schema.json#Violation"
            },
            "sla": {
              "$ref": "../EngagedParty/SLARef.schema.json#SLARef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SLAViolationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SLAViolationRef.schema.json",
      "title": "SLAViolationRef",
      "definitions": {
        "SLAViolationRef": {
          "$id": "#SLAViolationRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "SMSCXDRAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SMSCXDRAnalytics.schema.json",
      "title": "SMSCXDRAnalytics",
      "definitions": {
        "SMSCXDRAnalytics": {
          "$id": "#SMSCXDRAnalytics",
          "type": "object",
          "properties": {
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "SalesLead": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SalesLead.schema.json",
      "title": "SalesLead",
      "definitions": {
        "SalesLead": {
          "$id": "#SalesLead",
          "description": "A Sales Lead is the identification of a person or organization that has an interest in the goods and/or services provided in the prospect of them becoming Customers with one or more Subscriptions.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the salesLead"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the salesLead"
            },
            "name": {
              "type": "string",
              "description": "Name of the salesLead"
            },
            "description": {
              "type": "string",
              "description": "Unique description of the salesLead"
            },
            "status": {
              "$ref": "../MarketingSales/SalesLeadStateType.schema.json#SalesLeadStateType"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the salesLead creation"
            },
            "referredDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the prospect information was received (for example, from a trade show)."
            },
            "statusChangeReason": {
              "type": "string",
              "description": "Reason why the status has changed"
            },
            "type": {
              "type": "string",
              "description": "Indicates the nature of the salesLead"
            },
            "rating": {
              "type": "string",
              "description": "Identifies the potential of a salesLead for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
            },
            "priority": {
              "$ref": "../MarketingSales/SalesLeadPriorityType.schema.json#SalesLeadPriorityType"
            },
            "estimatedRevenue": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Estimation of the revenue if the salesLead turns into a sale."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the salesLead is valid"
            },
            "marketingCampaign": {
              "$ref": "../MarketingSales/MarketingCampaignRef.schema.json#MarketingCampaignRef",
              "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
            },
            "marketSegment": {
              "$ref": "../MarketingSales/MarketSegmentRef.schema.json#MarketSegmentRef",
              "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
            },
            "channel": {
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
            },
            "productOffering": {
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "prospectContact": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "productSpecification": {
              "$ref": "../Product/ProductSpecificationRef.schema.json#ProductSpecificationRef"
            },
            "category": {
              "$ref": "../Product/CategoryRef.schema.json#CategoryRef"
            },
            "salesOpportunity": {
              "$ref": "../MarketingSales/SalesOpportunityRef.schema.json#SalesOpportunityRef"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SalesLeadPriorityType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SalesLeadPriorityType.schema.json",
      "title": "SalesLeadPriorityType",
      "definitions": {
        "SalesLeadPriorityType": {
          "$id": "#SalesLeadPriorityType",
          "type": "string",
          "description": "Urgency of working this salesLead",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        }
      }
    }
  ],
  "SalesLeadStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SalesLeadStateType.schema.json",
      "title": "SalesLeadStateType",
      "definitions": {
        "SalesLeadStateType": {
          "$id": "#SalesLeadStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of a salesLead resource",
          "enum": [
            "accepted",
            "acknowledged",
            "cancelled",
            "inProgress",
            "pending",
            "rejected"
          ]
        }
      }
    }
  ],
  "SalesOpportunityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SalesOpportunityRef.schema.json",
      "title": "SalesOpportunityRef",
      "definitions": {
        "SalesOpportunityRef": {
          "$id": "#SalesOpportunityRef",
          "description": "Sales Opportunity is an 'opportunity' to generate revenue from a Sales Account or Sales Lead. Opportunities are the pending deals that need to be tracked and on which Sales Team plans and executes Sales Activities (Events and Tasks). ",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Scale": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Scale.schema.json",
      "title": "Scale",
      "definitions": {
        "Scale": {
          "$id": "#Scale",
          "description": "Task Resource used to request scaling of a Resource Function",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique identifier of the Scale task resource",
              "type": "string"
            },
            "href": {
              "description": "Reference to the Scale task resource",
              "type": "string"
            },
            "name": {
              "description": "Name of the Scale task resource",
              "type": "string"
            },
            "resourceFunction": {
              "description": "Reference to the Resource Function that needs to be scaled",
              "$ref": "../Resource/ResourceFunctionRef.schema.json#/definitions/ResourceFunctionRef"
            },
            "scaleType": {
              "description": "Type of scaling requested",
              "type": "string",
              "enum": [
                "Scale Out",
                "Scale Up",
                "Scale In",
                "Scale Down"
              ]
            },
            "aspectId": {
              "description": "Scaling aspect is the dimension along which the Resource Function needs to be scaled. The id of the aspect is provided here",
              "type": "string"
            },
            "numberOfSteps": {
              "description": "Number of scaling steps in the direction indicated by type of scale",
              "type": "integer",
              "format": "int64",
              "example": 2
            },
            "schedule": {
              "description": "Schedule for the scale. If not provided then needs to be actioned immediately",
              "type": "array",
              "items": {
                "$ref": "../Resource/ScheduleRef.schema.json#/definitions/ScheduleRef"
              }
            },
            "state": {
              "description": "Tracks the lifecycle status of the migrate request.",
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            }
          },
          "required": [
            "resourceFunction",
            "scaleType",
            "numberOfSteps"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ScheduleDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ScheduleDefinition.schema.json",
      "title": "ScheduleDefinition",
      "definitions": {
        "ScheduleDefinition": {
          "$id": "#ScheduleDefinition",
          "description": "The schedule definition for running jobs.",
          "type": "object",
          "properties": {
            "scheduleDefinitionStartTime": {
              "description": "The Start time of the Schedule Definition",
              "type": "string",
              "format": "date-time"
            },
            "scheduleDefinitionEndTime": {
              "description": "The Endtime of the Schedule Definition. If the attribute is empty the Schedule run forever, not having a time constraint.",
              "type": "string",
              "format": "date-time"
            },
            "recurringFrequency": {
              "description": "A recurring frequency to run a job within day that is included in schedule definition, for example: every 5 minutes, 15 minute, 30 minutes, 1 hour",
              "type": "string"
            },
            "excludedDate": {
              "description": "A list of specific dates that should be excluded from the Schedule Definition.",
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "scheduleDefinitionHourRange": {
              "description": "A list of time ranges within a specific day that the schedule will be active on, for example 08:00-12:00, 16:00-19:00.",
              "type": "string"
            },
            "WeeklyScheduledDefinition": {
              "description": "The weekly schedule is used to define a schedule that is based on the days of the week, e.g. a schedule that will be active only on Monday and Tuesday.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DayOfWeekRecurrence"
              }
            },
            "monthlyScheduleDayOfMonthDefinition": {
              "description": "The schedule definition for running the threshold job",
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "MonthlyScheduleDayOfWeekDefinition": {
              "$ref": "#/definitions/MonthlyScheduleDayOfWeekDefinition"
            },
            "dateScheduleDefintion": {
              "description": "The date schedule is used to define a schedule that is based on specific dates, such as December 31st 2015, Feberaury 28th 2013",
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ScheduleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ScheduleRef.schema.json",
      "title": "ScheduleRef",
      "definitions": {
        "ScheduleRef": {
          "$id": "#ScheduleRef",
          "description": "Schedule reference.",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "SearchTimeSlot": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SearchTimeSlot.schema.json",
      "title": "SearchTimeSlot",
      "definitions": {
        "SearchTimeSlot": {
          "$id": "#SearchTimeSlot",
          "type": "object",
          "description": "This task resource is used to retrieve available time slots. One of this available time slot is after used to create or reschedule an appointment",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the search time slot request"
            },
            "href": {
              "type": "string",
              "description": "Reference to access the search time slot resource"
            },
            "status": {
              "type": "string",
              "$ref": "../Customer/SearchTimeSlotStateType.schema.json#SearchTimeSlotStateType"
            },
            "searchDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the search time slot is performed"
            },
            "searchResult": {
              "type": "string",
              "description": "Result of the search time slot (success or fail for example)"
            },
            "requestedTimeSlot": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TimeSlot.schema.json#TimeSlot"
              }
            },
            "availableTimeSlot": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TimeSlot.schema.json#TimeSlot"
              }
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity."
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
              }
            },
            "relatedPlace": {
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue",
              "description": "Related place defines (by reference or value) the place where the appointment will take place."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SearchTimeSlotStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SearchTimeSlotStateType.schema.json",
      "title": "SearchTimeSlotStateType",
      "definitions": {
        "SearchTimeSlotStateType": {
          "$id": "#SearchTimeSlotStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the searchTimeSlot",
          "enum": [
            "inProgress",
            "done",
            "rejected",
            "terminatedWithError"
          ]
        }
      }
    }
  ],
  "Sender": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Sender.schema.json",
      "title": "Sender",
      "definitions": {
        "Sender": {
          "$id": "#Sender",
          "description": "Sender of the communication message.",
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Sender address of email, if the communication type is email"
            },
            "id": {
              "type": "string",
              "description": "ID of the sender"
            },
            "name": {
              "type": "string",
              "description": "Name of the sender"
            },
            "phoneNumber": {
              "type": "string",
              "description": "Phone number of the sender, if the communication type is SMS."
            },
            "party": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SensorAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SensorAnalytics.schema.json",
      "title": "SensorAnalytics",
      "definitions": {
        "SensorAnalytics": {
          "$id": "#SensorAnalytics",
          "type": "object",
          "properties": {
            "activationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date the sensor was first used"
            },
            "deactivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date the sensor was deactivated"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "Service-ProductOfferAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Service-ProductOfferAnalytics.schema.json",
      "title": "Service-ProductOfferAnalytics",
      "definitions": {
        "Service-ProductOfferAnalytics": {
          "$id": "#Service-ProductOfferAnalytics",
          "type": "object",
          "properties": {
            "offerActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date of Offer"
            },
            "offerOcAmount": {
              "type": "number",
              "format": "integer",
              "description": "Offering One time amount"
            },
            "offerRcAmount": {
              "type": "number",
              "format": "integer",
              "description": "Offering Recurrent amount"
            },
            "offerUsageAmount": {
              "type": "number",
              "format": "integer",
              "description": "Offering Usage amount"
            },
            "offerUnitValue": {
              "type": "number",
              "format": "integer",
              "description": "Offering Chargeable unit"
            },
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "accountStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "accountCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Account creation Date"
            },
            "subscriptionStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Status last change date"
            },
            "subscriptionCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Subscriber creation date"
            },
            "subscriptionActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date"
            },
            "planActivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Activation date of billing plan"
            },
            "contractStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Contract start date"
            },
            "contractEndDate": {
              "type": "string",
              "format": "date-time",
              "description": "Contract end date"
            },
            "contractMinimumPeriodDays": {
              "type": "number",
              "format": "integer",
              "description": "Minimal contract duration specified with number of days"
            },
            "priceChargeAmount": {
              "type": "number",
              "format": "integer",
              "description": "Amount corresponding to the charge type"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "Service": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Service.schema.json",
      "title": "Service",
      "definitions": {
        "Service": {
          "$id": "#Service",
          "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
          "type": "object",
          "properties": {
            "description": {
              "description": "Free-text description of the service",
              "type": "string"
            },
            "isServiceEnabled": {
              "type": "boolean",
              "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
            },
            "hasStarted": {
              "type": "boolean",
              "description": "If TRUE, this Service has already been started"
            },
            "startMode": {
              "type": "string",
              "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
            },
            "isStateful": {
              "type": "boolean",
              "description": "If TRUE, this Service can be changed without affecting any other services"
            },
            "serviceDate": {
              "description": "Date when the service was created (whatever its status).",
              "type": "string"
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the service starts"
            },
            "endDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the service ends"
            },
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of service order items related to this service",
              "items": {
                "$ref": "../Service/RelatedServiceOrderItem.schema.json#/definitions/RelatedServiceOrderItem"
              }
            },
            "note": {
              "type": "array",
              "description": "A list of notes made on this service",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            },
            "id": {
              "description": "Unique identifier of the service",
              "type": "string"
            },
            "href": {
              "description": "Reference of the service",
              "type": "string"
            },
            "serviceType": {
              "description": "Business type of the service",
              "type": "string"
            },
            "isBundle": {
              "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf).",
              "type": "boolean"
            },
            "name": {
              "description": "Name of the service",
              "type": "string"
            },
            "state": {
              "description": "The life cycle state of the service, such as designed, reserved, active, etc...",
              "$ref": "../Service/ServiceStateType.schema.json#/definitions/ServiceStateType"
            },
            "category": {
              "type": "string",
              "description": "Is it a customer facing or resource facing service"
            },
            "serviceSpecification": {
              "description": "The specification from which this service was instantiated",
              "$ref": "../Service/ServiceSpecificationRef.schema.json#/definitions/ServiceSpecificationRef"
            },
            "feature": {
              "type": "array",
              "description": "A list of feature associated with this service ",
              "items": {
                "$ref": "../Common/Feature.schema.json#/definitions/Feature"
              }
            },
            "relatedEntity": {
              "type": "array",
              "description": "A list of related  entity in relationship with this service ",
              "items": {
                "$ref": "../Common/RelatedEntityRefOrValue.schema.json#/definitions/RelatedEntityRefOrValue"
              }
            },
            "serviceCharacteristic": {
              "type": "array",
              "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "serviceRelationship": {
              "type": "array",
              "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory.",
              "items": {
                "$ref": "../Service/ServiceRelationship.schema.json#/definitions/ServiceRelationship"
              }
            },
            "supportingService": {
              "type": "array",
              "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
              "items": {
                "$ref": "../Service/ServiceReforValue.schema.json#/definitions/ServiceRefOrValue"
              }
            },
            "supportingResource": {
              "type": "array",
              "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "place": {
              "type": "array",
              "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceCandidate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCandidate.schema.json",
      "title": "ServiceCandidate",
      "definitions": {
        "ServiceCandidate": {
          "$id": "#ServiceCandidate",
          "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "version": {
              "type": "string",
              "description": "the version of service candidate"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of the service candidate."
            },
            "category": {
              "type": "array",
              "description": "List of categories for this candidate",
              "items": {
                "$ref": "../Service/ServiceCategoryRef.schema.json#/definitions/ServiceCategoryRef"
              }
            },
            "serviceSpecification": {
              "description": "The service specification implied by this candidate",
              "$ref": "../Service/ServiceSpecificationRef.schema.json#/definitions/ServiceSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceCandidateRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCandidateRef.schema.json",
      "title": "ServiceCandidateRef",
      "definitions": {
        "ServiceCandidateRef": {
          "$id": "#ServiceCandidateRef",
          "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Version of the service candidate"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceCatalog": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCatalog.schema.json",
      "title": "ServiceCatalog",
      "definitions": {
        "ServiceCatalog": {
          "$id": "#ServiceCatalog",
          "type": "object",
          "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.",
          "properties": {
            "category": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceCategoryRef.schema.json#/definitions/ServiceCategoryRef"
              },
              "description": "List of service categories associated with this catalog"
            },
            "description": {
              "type": "string",
              "description": "Description of this catalog"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "name": {
              "type": "string",
              "description": "Name of the service catalog"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              },
              "description": "List of parties or party roles related to this category"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the service catalog is valid"
            },
            "version": {
              "type": "string",
              "description": "ServiceCatalog version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceCategory": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCategory.schema.json",
      "title": "ServiceCategory",
      "definitions": {
        "ServiceCategory": {
          "$id": "#ServiceCategory",
          "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the category"
            },
            "description": {
              "type": "string",
              "description": "Description of the category"
            },
            "version": {
              "type": "string",
              "description": "ServiceCategory version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the category is valid"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update"
            },
            "parentId": {
              "type": "string",
              "description": "Unique identifier of the parent category"
            },
            "isRoot": {
              "type": "boolean",
              "description": "If true, this Boolean indicates that the category is a root of categories"
            },
            "serviceCandidate": {
              "type": "array",
              "description": "List of service candidates associated with this category",
              "items": {
                "$ref": "../Service/ServiceCandidateRef.schema.json#/definitions/ServiceCandidateRef"
              }
            },
            "category": {
              "type": "array",
              "description": "List of child categories in the tree for in this category",
              "items": {
                "$ref": "../Service/ServiceCategoryRef.schema.json#/definitions/ServiceCategoryRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceCategoryRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCategoryRef.schema.json",
      "title": "ServiceCategoryRef",
      "definitions": {
        "ServiceCategoryRef": {
          "$id": "#ServiceCategoryRef",
          "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Category version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceCharacteristic.schema.json",
      "title": "ServiceCharacteristic",
      "definitions": {
        "ServiceCharacteristic": {
          "$id": "#ServiceCharacteristic",
          "description": "is a list of name value pairs that define the service characteristics",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the characteristic"
            },
            "valueType": {
              "type": "string",
              "description": "Data type of the characteristic"
            },
            "value": {
              "description": "Actual value of the characteristio",
              "$ref": "../Common/Value.schema.json#Value"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceEligibilityUnavailabilityReason": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceEligibilityUnavailabilityReason.schema.json",
      "title": "ServiceEligibilityUnavailabilityReason",
      "definitions": {
        "ServiceEligibilityUnavailabilityReason": {
          "$id": "#ServiceEligibilityUnavailabilityReason",
          "description": "Reason for eligibility result if the ServiceQualification result is no (meaning the Service is not available)",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Unavailability reason code"
            },
            "label": {
              "type": "string",
              "description": "Unavailability reason label"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceFeatureSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceFeatureSpecification.schema.json",
      "title": "ServiceFeatureSpecification",
      "definitions": {
        "ServiceFeatureSpecification": {
          "$id": "#ServiceFeatureSpecification",
          "description": "Specification for service features",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec."
            },
            "version": {
              "type": "string",
              "description": "Version of the feature specification"
            },
            "name": {
              "type": "string",
              "description": "Unique name given to the feature specification"
            },
            "isBundle": {
              "type": "boolean",
              "description": "A flag indicating if this is a feature group (true) or not (false)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this feature specification is valid"
            },
            "featureSpecRelationship": {
              "description": "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
              "type": "array",
              "items": {
                "$ref": "../Common/FeatureSpecificationRelationship.schema.json#FeatureSpecificationRelationship"
              }
            },
            "constraint": {
              "description": "A list of feature constraints/rules",
              "type": "array",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#ConstraintRef"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "A flag indicating if the feature is enabled (true) or not (false)"
            },
            "featureSpecCharacteristic": {
              "description": "This is a list of characteristics for a particular feature",
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicSpecification.schema.json#/definitions/CharacteristicSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelAgreement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelAgreement.schema.json",
      "title": "ServiceLevelAgreement",
      "definitions": {
        "ServiceLevelAgreement": {
          "$id": "#ServiceLevelAgreement",
          "description": "Service Level Agreement",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "verbal description of the SLA"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the SLA definition"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier created by SLA Management system"
            },
            "name": {
              "type": "string",
              "description": "name associated with the SLA"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../RelatedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "rule": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RuleRefOrValue.schema.json#/definitions/RuleRefOrValue"
              }
            },
            "template": {
              "$ref": "Template.schema.json#/definitions/Template"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the SLA is valid  (A period of time, either as a deadline (endDateTime only) a startDateTime only, or both)"
            },
            "version": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelAgreementRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelAgreementRef.schema.json",
      "title": "ServiceLevelAgreementRef",
      "definitions": {
        "ServiceLevelAgreementRef": {
          "$id": "#ServiceLevelAgreementRef",
          "description": "SLA reference: SLA(s) requested in a customer order",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelAgreementViolation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelAgreementViolation.schema.json",
      "title": "ServiceLevelAgreementViolation",
      "definitions": {
        "ServiceLevelAgreementViolation": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../RelatedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "serviceLevelAgreement": {
              "$ref": "ServiceLevelAgreementRef.schema.json#/definitions/ServiceLevelAgreementRef"
            },
            "violation": {
              "$ref": "Violation.schema.json#/definitions/Violation"
            }
          }
        }
      }
    }
  ],
  "ServiceLevelObjective": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelObjective.schema.json",
      "title": "ServiceLevelObjective",
      "definitions": {
        "ServiceLevelObjective": {
          "$id": "#ServiceLevelObjective",
          "description": "Service level objectives are defined in terms of parameters and metrics, thresholds, and tolerances \nassociated with the parameters.",
          "type": "object",
          "properties": {
            "conformanceComparator": {
              "type": "string",
              "description": "An operator that specifies whether a Service Level Objective is \nviolated above or below the conformanceTarget."
            },
            "conformancePeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "An interval of time during which the Conformance Target must be measured."
            },
            "conformanceTarget": {
              "type": "string",
              "description": "A value used to determine if Service Level Objective is met. \nThe data type should be adjusted case by case."
            },
            "graceTimes": {
              "type": "string",
              "description": "The number of times an objective can remain un-updated without \na violation of a Service Level Agreement in reference to a measurement period and/or Service Level Agreement reporting period."
            },
            "href": {
              "type": "string",
              "description": "The hyperlink to access a service level objective."
            },
            "id": {
              "type": "string",
              "description": "The identifier of a service level objectives."
            },
            "name": {
              "type": "string",
              "description": "The name of the service level objectives."
            },
            "thresholdTarget": {
              "type": "string",
              "description": "A value that used to specify when a warning should be used \nthat indicates an objective is danger of not being met. Notice, the data type should be adjusted case by case."
            },
            "tolerancePeriod": {
              "description": "A value that specifies the allowable time variation of a conformance",
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "toleranceTarget": {
              "type": "string",
              "description": "A value that specifies the allowable variation of a conformance \nTarget. The data type should be adjusted case by case."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A valid duration of a thing."
            },
            "serviceLevelSpecParameter": {
              "description": "A parameter for this objective",
              "$ref": "../Service/ServiceLevelSpecParameter.schema.json#ServiceLevelSpecParameter"
            },
            "serviceLevelSpecConsequence": {
              "type": "array",
              "description": "A list of consequences for this objective.",
              "items": {
                "$ref": "../Service/ServiceLevelSpecConsequence.schema.json#ServiceLevelSpecConsequence"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelObjectiveRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelObjectiveRef.schema.json",
      "title": "ServiceLevelObjectiveRef",
      "definitions": {
        "ServiceLevelObjectiveRef": {
          "$id": "#ServiceLevelObjectiveRef",
          "description": "A set of Service Level Objectives that are contained in the Service Level Specification.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "The hyperlink to access a service level object."
            },
            "id": {
              "type": "string",
              "description": "The identifier of a service level object."
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelSpecConsequence": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelSpecConsequence.schema.json",
      "title": "ServiceLevelSpecConsequence",
      "definitions": {
        "ServiceLevelSpecConsequence": {
          "$id": "#ServiceLevelSpecConsequence",
          "description": "Some consequences for the provider of the Service are resulted when the service level objective\ndoes not meet.",
          "type": "object",
          "properties": {
            "prescribedAction": {
              "type": "string",
              "description": "Recommended remedy for a violated Service Level Objective. \nThis could be a hyperlink to the recommended action."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A valid duration of a thing."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelSpecParameter": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelSpecParameter.schema.json",
      "title": "ServiceLevelSpecParameter",
      "definitions": {
        "ServiceLevelSpecParameter": {
          "$id": "#ServiceLevelSpecParameter",
          "description": "Service Level Specification parameters can be one of two types. A Key Quality Indicator (KQI) \nprovides a measurement of a specific aspect of the performance of a Product (i.e., Product \nSpecification, Product Offering, or Product) or a Service (i.e., Service Specification or Service).",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter"
            },
            "serviceParmCategory": {
              "type": "string",
              "description": "A string that specifies whether the Service Level Specification Parameter is technology specific, service specific, or technology/service independent"
            },
            "serviceParmPerspective": {
              "type": "string",
              "description": "A string that specifies whether the Service Level Specification Parameter represents a single user instance parameter or a parameter that represents an aggregation"
            },
            "transformationAlgorithmOfKQI": {
              "type": "string",
              "description": "The description of a logical step-by-step procedure used to calculate the value of a KQI"
            },
            "parameterType": {
              "type": "string",
              "description": "Types of Service Level Specification parameters are KQI or KPI"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A valid duration of a thing"
            },
            "relatedEntity": {
              "type": "array",
              "description": "A list of entities related to this parameter",
              "items": {
                "$ref": "../Common/RelatedEntityRef.schema.json#RelatedEntityRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelSpecification.schema.json",
      "title": "ServiceLevelSpecification",
      "definitions": {
        "ServiceLevelSpecification": {
          "$id": "#ServiceLevelSpecification",
          "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A brief introduction of a service level specification."
            },
            "href": {
              "type": "string",
              "description": "The hyperlink to access a service level specification."
            },
            "id": {
              "type": "string",
              "description": "The identifier to a service level specification."
            },
            "name": {
              "type": "string",
              "description": "The name of Service Level Specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "A valid duration of a thing."
            },
            "relatedServiceLevelObjective": {
              "type": "array",
              "description": "A list of objectives related to this service level specification",
              "items": {
                "$ref": "../Service/ServiceLevelObjectiveRef.schema.json#ServiceLevelObjectiveRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceLevelSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceLevelSpecificationRef.schema.json",
      "title": "ServiceLevelSpecificationRef",
      "definitions": {
        "ServiceLevelSpecificationRef": {
          "$id": "#ServiceLevelSpecificationRef",
          "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceOfferingQualificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOfferingQualificationRef.schema.json",
      "title": "ServiceOfferingQualificationRef",
      "definitions": {
        "ServiceOfferingQualificationRef": {
          "$id": "#ServiceOfferingQualificationRef",
          "description": "It could be a serviceQualification or a productOfferingQualification that has been executed previously and captured in the productOrder to provide eligibility information",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "href of the qualification"
            },
            "id": {
              "type": "string",
              "description": "Identifier of a pre-existing qualification"
            },
            "qualificationItemId": {
              "type": "string",
              "description": "Id of an item of a qualification"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrder.schema.json",
      "title": "ServiceOrder",
      "definitions": {
        "ServiceOrder": {
          "$id": "#ServiceOrder",
          "type": "object",
          "properties": {
            "cancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled. This is used when order is cancelled. "
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled. This is used when order is cancelled. "
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the order, useful for the OM system, such as: Broadband, TVOption"
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Effective delivery date amended by the provider"
            },
            "description": {
              "type": "string",
              "description": "A free-text description of the service order"
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expected delivery date amended by the provider"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer to facilitate searches"
            },
            "externalReference": {
              "type": "array",
              "description": "",
              "items": {
                "$ref": "../Common/ExternalReference.schema.json#/definitions/ExternalReference"
              }
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the order"
            },
            "id": {
              "type": "string",
              "description": "ID created on repository side"
            },
            "note": {
              "type": "array",
              "description": "Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            },
            "notificationContact": {
              "type": "string",
              "description": "Contact attached to the order to send back information regarding this order"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time"
            },
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of service order items to be processed by this order",
              "items": {
                "$ref": "../Service/ServiceOrderItem.schema.json#/definitions/ServiceOrderItem"
              }
            },
            "orderRelationship": {
              "type": "array",
              "description": "A list of service orders related to this order (e.g. prerequisite, dependent on)",
              "items": {
                "$ref": "ServiceOrderRelationship.schema.json#/definitions/ServiceOrderRelationship"
              }
            },
            "priority": {
              "type": "string",
              "description": "Can be used by consumers to prioritize orders in a Service Order Management system"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of parties which are involved in this order and the role they are playing",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "requestedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Requested delivery date from the requestors perspective"
            },
            "requestedStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Order start date wished by the requestor"
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was started for processing"
            },
            "state": {
              "description": "State of the order: described in the state-machine diagram",
              "$ref": "../Service/ServiceOrderStateType.schema.json#/definitions/ServiceOrderStateType"
            },
            "milestone": {
              "type": "array",
              "description": "A list of milestones related to this order",
              "items": {
                "$ref": "../Service/ServiceOrderMilestone.schema.json#/definitions/ServiceOrderMilestone"
              }
            },
            "jeopardyAlert": {
              "type": "array",
              "description": "A list of jeopardy alerts related to this order",
              "items": {
                "$ref": "../Service/ServiceOrderJeopardyAlert.schema.json#/definitions/ServiceOrderJeopardyAlert"
              }
            },
            "errorMessage": {
              "description": "the error message if the order closed by an error",
              "$ref": "../Service/ServiceOrderErrorMessage.schema.json#/definitions/ServiceOrderErrorMessage"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderActionType.schema.json",
      "title": "ServiceOrderActionType",
      "definitions": {
        "ServiceOrderActionType": {
          "$id": "#ServiceOrderActionType",
          "description": "string",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "ServiceOrderErrorMessage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderErrorMessage.schema.json",
      "title": "ServiceOrderErrorMessage",
      "definitions": {
        "ServiceOrderErrorMessage": {
          "$id": "#ServiceOrderErrorMessage",
          "description": "A ServiceOrderErrorMessage represents an error that causes a status change in a service order.",
          "type": "object",
          "properties": {
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of order items corresponded to this error",
              "items": {
                "$ref": "../Service/ServiceOrderItem.schema.json#/definitions/ServiceOrderItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ErrorMessage.schema.json#/definitions/ErrorMessage"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderItem.schema.json",
      "title": "ServiceOrderItem",
      "definitions": {
        "ServiceOrderItem": {
          "$id": "#ServiceOrderItem",
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the individual line item"
            },
            "action": {
              "description": "The action to be carried out on the Service. Can be: add, modify, delete, noChange",
              "$ref": "../Customer/OrderItemActionType.schema.json#/definitions/OrderItemActionType"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity ordered",
              "minItems": 0
            },
            "state": {
              "description": "State of the order item: described in the state machine diagram. This is the requested state.",
              "$ref": "../Service/ServiceOrderItemStateType.schema.json#/definitions/ServiceOrderItemStateType"
            },
            "service": {
              "description": "The Service to be acted on by the order item",
              "$ref": "../Service/ServiceRefOrValue.schema.json#/definitions/ServiceRefOrValue"
            },
            "appointment": {
              "description": "An appointment that was set up with a related party for this order item",
              "$ref": "../Customer/AppointmentRef.schema.json#/definitions/AppointmentRef"
            },
            "serviceOrderItemRelationship": {
              "type": "array",
              "description": "A list of order items related to this order item",
              "items": {
                "$ref": "../Service/ServiceOrderItemRelationship.schema.json#/definitions/ServiceOrderItemRelationship"
              }
            },
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of order items embedded to this order item",
              "items": {
                "$ref": "../Service/ServiceOrderItem.schema.json#/definitions/ServiceOrderItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderItemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderItemRef.schema.json",
      "title": "ServiceOrderItemRef",
      "definitions": {
        "ServiceOrderItemRef": {
          "$id": "#ServiceOrderItemRef",
          "type": "object",
          "properties": {
            "itemId": {
              "type": "string",
              "description": "Identifier of the line item"
            },
            "serviceOrderId": {
              "type": "string",
              "description": "Identifier of the order that this item belongs to"
            },
            "serviceOrderHref": {
              "type": "string",
              "description": "Link to the order to which this item belongs to",
              "format": "uri"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderItemRelationship.schema.json",
      "title": "ServiceOrderItemRelationship",
      "definitions": {
        "ServiceOrderItemRelationship": {
          "$id": "#ServiceOrderItemRelationship",
          "type": "object",
          "description": "Linked service order item to the one containing this attribute",
          "properties": {
            "orderItem": {
              "description": "A service order item in relationship with this order item",
              "$ref": "../Service/ServiceOrderItemRef.schema.json#/definitions/ServiceOrderItemRef"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of related order item, can be: dependency if the order item needs to be not started until another order item is complete"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderItemStateType.schema.json",
      "title": "ServiceOrderItemStateType",
      "definitions": {
        "ServiceOrderItemStateType": {
          "$id": "#ServiceOrderItemStateType",
          "type": "string",
          "description": "Possible values for the state of the order item",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "assessingCancellation",
            "pendingCancellation",
            "partial"
          ]
        }
      }
    }
  ],
  "ServiceOrderJeopardyAlert": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderJeopardyAlert.schema.json",
      "title": "ServiceOrderJeopardyAlert",
      "definitions": {
        "ServiceOrderJeopardyAlert": {
          "$id": "#ServiceOrderJeopardyAlert",
          "description": "A ServiceOrderJeopardyAlert represents a predicted exception during a service order processing that would brings risk to complete successfully the ordetr.",
          "type": "object",
          "properties": {
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of order items corresponded to this alert",
              "items": {
                "$ref": "../Service/ServiceOrderItem.schema.json#/definitions/ServiceOrderItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/JeopardyAlert.schema.json#/definitions/JeopardyAlert"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderMilestone": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderMilestone.schema.json",
      "title": "ServiceOrderMilestone",
      "definitions": {
        "ServiceOrderMilestone": {
          "$id": "#ServiceOrderMilestone",
          "description": "ServiceOrderMilestone represents an action or event marking a significant change or stage in processing of a service order.",
          "type": "object",
          "properties": {
            "serviceOrderItem": {
              "type": "array",
              "description": "A list of order items corresponded to this milestone",
              "items": {
                "$ref": "../Service/ServiceOrderItem.schema.json#/definitions/ServiceOrderItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Milestone.schema.json#/definitions/Milestone"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderRef.schema.json",
      "title": "ServiceOrderRef",
      "definitions": {
        "ServiceOrderRef": {
          "$id": "#ServiceOrderRef",
          "description": "Service Order reference. Useful to understand the which was the Service order through which the service was instantiated in the service inventory",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the related service order"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderRelationship.schema.json",
      "title": "ServiceOrderRelationship",
      "definitions": {
        "ServiceOrderRelationship": {
          "$id": "#ServiceOrderRelationship",
          "type": "object",
          "description": "Linked service order to the one containing this attribute",
          "required": [
            "id",
            "relationshipType"
          ],
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The entity type of the related order"
            },
            "href": {
              "type": "string",
              "description": "A hyperlink to the related order"
            },
            "id": {
              "type": "string",
              "description": "The id of the related order"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of related order, such as: [dependency] if the order needs to be [not started] until another order item is complete (a service order in this case) or [cross-ref] to keep track of the source order (a productOrder)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceOrderStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceOrderStateType.schema.json",
      "title": "ServiceOrderStateType",
      "definitions": {
        "ServiceOrderStateType": {
          "$id": "#ServiceOrderStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "ServiceProblem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceProblem.schema.json",
      "title": "ServiceProblem",
      "definitions": {
        "ServiceProblem": {
          "$id": "#ServiceProblem",
          "type": "object",
          "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B",
          "properties": {
            "affectedLocation": {
              "type": "array",
              "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.",
              "items": {
                "$ref": "../Common/RelatedPlace.schema.json#/definitions/RelatedPlace"
              }
            },
            "affectedNumberOfServices": {
              "type": "integer",
              "description": "Number of affected services"
            },
            "affectedResource": {
              "type": "array",
              "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present.",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
              }
            },
            "affectedService": {
              "type": "array",
              "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present.",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#/definitions/ServiceRef"
              }
            },
            "category": {
              "type": "string",
              "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated",
              "example": [
                "serviceProvider.declarer",
                "supplier.originated",
                "system.originated"
              ]
            },
            "note": {
              "type": "array",
              "description": "A list of comments or notes made on the problem",
              "items": {
                "$ref": "../Common/Note.schema.json#/definitions/Note"
              }
            },
            "externalIdentifier": {
              "type": "array",
              "items": {
                "$ref": "../Common/ExternalIdentifier.schema.json#/definitions/ExternalIdentifier"
              }
            },
            "name": {
              "type": "string",
              "description": "Name of the Service Problem"
            },
            "description": {
              "type": "string",
              "description": "Free form text describing the Service Problem"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "firstAlert": {
              "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert",
              "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
            },
            "impactImportanceFactor": {
              "type": "string",
              "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
            },
            "impactPattern": {
              "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes.",
              "$ref": "../Service/ImpactPattern.schema.json#/definitions/ImpactPattern"
            },
            "originatingSystem": {
              "type": "string",
              "description": "Indicates where the problem was generated"
            },
            "parentProblem": {
              "type": "array",
              "description": "The parent problem to which this problem is attached.",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#/definitions/ServiceProblemRef"
              }
            },
            "priority": {
              "type": "integer",
              "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem.",
              "example": [
                1,
                10
              ]
            },
            "problemEscalation": {
              "type": "string",
              "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
            },
            "reason": {
              "type": "string",
              "description": "Free text or optionally structured text. It can be Unknown."
            },
            "relatedEvent": {
              "type": "array",
              "description": "List of events associated to this problem",
              "items": {
                "$ref": "../Common/EventRef.schema.json#/definitions/EventRef"
              }
            },
            "relatedEntity": {
              "type": "array",
              "description": "List of entities associated with this problem",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "originatorParty": {
              "description": "Individual or organization that created the problem",
              "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
            },
            "responsibleParty": {
              "description": "Individual or organization responsible for handling this problem",
              "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
            },
            "relatedParty": {
              "type": "array",
              "description": "List of parties or party roles playing a role within the service problem",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "rootCauseResource": {
              "type": "array",
              "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable).",
              "items": {
                "$ref": "../Resource/ResourceRef.schema.json#/definitions/ResourceRef"
              }
            },
            "rootCauseService": {
              "type": "array",
              "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)",
              "items": {
                "$ref": "../Service/ServiceRef.schema.json#/definitions/ServiceRef"
              }
            },
            "resolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was resolved"
            },
            "status": {
              "$ref": "ServiceProblemStateType.schema.json#/definitions/ServiceProblemStateType"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was last status changed"
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason of state change"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was last changed"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Time the problem was created"
            },
            "trackingRecord": {
              "type": "array",
              "description": "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records",
              "items": {
                "$ref": "../Service/TrackingRecord.schema.json#/definitions/TrackingRecord"
              }
            },
            "underlyingAlarm": {
              "type": "array",
              "description": "A list of alarms underlying this problem.",
              "items": {
                "$ref": "../Resource/ResourceAlarmRef.schema.json#/definitions/ResourceAlarmRef"
              }
            },
            "slaViolation": {
              "type": "array",
              "description": "A List of SLA violations associated with this problem.",
              "items": {
                "$ref": "../EngagedParty/SLAViolationRef.schema.json#/definitions/SLAViolationRef"
              }
            },
            "troubleTicket": {
              "type": "array",
              "description": "A list of trouble tickets associated with this problem.",
              "items": {
                "$ref": "../Common/TroubleTicketRef.schema.json#/definitions/TroubleTicketRef"
              }
            },
            "underlyingProblem": {
              "type": "array",
              "description": "A list of underlying problems. Relevant only if this problem is derived from other problems.",
              "items": {
                "$ref": "../Service/ServiceProblemRef.schema.json#/definitions/ServiceProblemRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceProblemEventRecord": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceProblemEventRecord.schema.json",
      "title": "ServiceProblemEventRecord",
      "definitions": {
        "ServiceProblemEventRecord": {
          "$id": "#ServiceProblemEventRecord",
          "type": "object",
          "description": "A record of an event (related to a service problem) received from another system",
          "properties": {
            "eventTime": {
              "description": "Time at which the event occurred",
              "type": "string",
              "format": "date-time"
            },
            "eventType": {
              "description": "Type of the recorded event",
              "type": "string"
            },
            "href": {
              "description": "reference to this resource",
              "type": "string"
            },
            "id": {
              "description": "Identifier of the service problem event record.",
              "type": "string"
            },
            "recordTime": {
              "description": "Time at which the record was created",
              "type": "string",
              "format": "date-time"
            },
            "serviceProblem": {
              "description": "The service problem to which this record applies",
              "$ref": "../Service/ServiceProblemRef.schema.json#ServiceProblemRef"
            },
            "notification": {
              "description": "A notification from the possible notifications for Service Problem (such as creation, status change, information required, change)",
              "$ref": "../Common/Any.schema.json#Any"
            }
          }
        }
      }
    }
  ],
  "ServiceProblemRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceProblemRef.schema.json",
      "title": "ServiceProblemRef",
      "definitions": {
        "ServiceProblemRef": {
          "$id": "#ServiceProblemRef",
          "type": "object",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceProblemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceProblemStateType.schema.json",
      "title": "ServiceProblemStateType",
      "definitions": {
        "ServiceProblemStateType": {
          "$id": "#ServiceProblemStateType",
          "type": "string",
          "description": "Possible values for the state of the ServiceProblem",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "resolved",
            "cancelled",
            "closed"
          ]
        }
      }
    }
  ],
  "ServiceQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceQualification.schema.json",
      "title": "ServiceQualification",
      "definitions": {
        "ServiceQualification": {
          "$id": "#ServiceQualification",
          "type": "object",
          "description": "ServiceQualification is used to perform a technical eligibility. It allows to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics, ...).",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink to access the serviceQualification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the serviceQualification resource"
            },
            "description": {
              "type": "string",
              "description": "Description of the serviceQualification"
            },
            "effectiveQualificationDate": {
              "type": "string",
              "description": "Effective date to serviceQualification completion",
              "format": "date-time"
            },
            "instantSyncQualification": {
              "type": "boolean",
              "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
            },
            "estimatedResponseDate": {
              "type": "string",
              "description": "Date when the requester expect to provide an answer for the qualification request.",
              "format": "date-time"
            },
            "expectedQualificationDate": {
              "type": "string",
              "description": "A date (DateTime). Deadline date when the requester expected a qualification answer.",
              "format": "date-time"
            },
            "expirationDate": {
              "type": "string",
              "description": "Date when the qualification response expires",
              "format": "date-time"
            },
            "state": {
              "$ref": "TaskStateType.schema.json#/definitions/TaskStateType",
              "description": "State of the serviceQualification (acknowledged, inProgress, terminatedWithError, done)"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references, defines party or party role linked to this request.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "externalId": {
              "description": "Identifier provided by the requester",
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceQualificationItem.schema.json",
      "title": "ServiceQualificationItem",
      "definitions": {
        "ServiceQualificationItem": {
          "$id": "#ServiceQualificationItem",
          "description": "A ServiceQualificationItem relates to a specific service being checked in a qualification operation.",
          "type": "object",
          "properties": {
            "expectedActivationDate": {
              "type": "string",
              "description": "The date when the service is expected to be activated",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "Id of the Service Qualification Item"
            },
            "service": {
              "description": "Configure the service characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the service that needs to be modified/deleted.",
              "$ref": "ServiceRefOrValue.schema.json#/definitions/ServiceRefOrValue"
            },
            "expectedServiceAvailabilityDate": {
              "description": "Date when the requester looks for service availability",
              "type": "string",
              "format": "date-time"
            },
            "expirationDate": {
              "description": "Date when the qualification item response expires",
              "type": "string",
              "format": "date-time"
            },
            "category": {
              "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
              "$ref": "ServiceCategoryRef.schema.json#ServiceCategoryRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceQualificationItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceQualificationItemRelationship.schema.json",
      "title": "ServiceQualificationItemRelationship",
      "definitions": {
        "ServiceQualificationItemRelationship": {
          "$id": "#ServiceQualificationItemRelationship",
          "description": "Structure used to describe relationship between serviceQualification items from the same serviceQualification.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the serviceQualificationItem (from the same serviceQualificationItem)."
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceQualificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceQualificationRelationship.schema.json",
      "title": "ServiceQualificationRelationship",
      "definitions": {
        "ServiceQualificationRelationship": {
          "$id": "#ServiceQualificationRelationship",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the target qualification pointed to by this relationship"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceRef.schema.json",
      "title": "ServiceRef",
      "definitions": {
        "ServiceRef": {
          "$id": "#ServiceRef",
          "description": "Service reference, for when Service is used by other entities",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceRefOrValue.schema.json",
      "title": "ServiceRefOrValue",
      "definitions": {
        "ServiceRefOrValue": {
          "$id": "#ServiceRefOrValue",
          "description": "A Service to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the RelatedServiceRefOrValue class itself",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "ServiceRef.schema.json#ServiceRef"
            },
            {
              "$ref": "Service.schema.json#Service"
            }
          ]
        }
      }
    }
  ],
  "ServiceRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceRelationship.schema.json",
      "title": "ServiceRelationship",
      "definitions": {
        "ServiceRelationship": {
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string"
            },
            "serviceRelationshipCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "service": {
              "$ref": "../Service/ServiceRefOrValue.schema.json#ServiceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ],
          "required": [
            "relationshipType"
          ]
        }
      }
    }
  ],
  "ServiceRelationshipType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceRelationshipType.schema.json",
      "title": "ServiceRelationshipType",
      "definitions": {
        "ServiceRelationshipType": {
          "$id": "#ServiceRelationshipType",
          "type": "string",
          "description": "Possible values for service relationship type",
          "enum": [
            "migratesTo",
            "migratesFrom",
            "reliesOn",
            "bundles",
            "bundledBy",
            "enables",
            "root",
            "dependsOn",
            "hostedOn",
            "connectsOn",
            "attachesTo",
            "routesTo"
          ]
        }
      }
    }
  ],
  "ServiceSpecCharRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecCharRelationship.schema.json",
      "title": "ServiceSpecCharRelationship",
      "definitions": {
        "ServiceSpecCharRelationship": {
          "$id": "#ServiceSpecCharRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among serviceSpecCharacteristics.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this service specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the target specification"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target specification"
            },
            "name": {
              "type": "string",
              "description": "Name of the target  characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the serviceSpecCharRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceSpecCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecCharacteristic.schema.json",
      "title": "ServiceSpecCharacteristic",
      "definitions": {
        "ServiceSpecCharacteristic": {
          "$id": "#ServiceSpecCharacteristic",
          "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the serviceSpecCharacteristic is"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "configurable": {
              "type": "boolean",
              "description": "If true, the Boolean indicates that the serviceSpecCharacteristic is configurable"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the serviceSpecCharacteristic is valid"
            },
            "@valueSchemaLocation": {
              "type": "string",
              "description": "This (optional) field provides a link to the schema describing the value type."
            },
            "minCardinality": {
              "type": "integer",
              "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
            },
            "maxCardinality": {
              "type": "integer",
              "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
            },
            "isUnique": {
              "type": "boolean",
              "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
            },
            "regex": {
              "type": "string",
              "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
            },
            "extensible": {
              "type": "boolean",
              "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
            },
            "serviceSpecCharacteristicValue": {
              "type": "array",
              "description": "A list of service spec characteristic values (ServiceSpecCharacteristicValue [*]). A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
              "items": {
                "$ref": "../Service/ServiceSpecCharacteristicValue.schema.json#ServiceSpecCharacteristicValue"
              }
            },
            "serviceSpecCharRelationship": {
              "type": "array",
              "description": "A list of service spec char relationships (ServiceSpecCharRelationship [*]). An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics.",
              "items": {
                "$ref": "../Service/ServiceSpecCharRelationship.schema.json#ServiceSpecCharRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceSpecCharacteristicValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecCharacteristicValue.schema.json",
      "title": "ServiceSpecCharacteristicValue",
      "definitions": {
        "ServiceSpecCharacteristicValue": {
          "$id": "#ServiceSpecCharacteristicValue",
          "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
          "type": "object",
          "properties": {
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
            },
            "isDefault": {
              "type": "boolean",
              "description": "Indicates if the value is the default value for a characteristic"
            },
            "value": {
              "$ref": "../Common/Any.schema.json#Any",
              "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which a value is applicable"
            },
            "valueFrom": {
              "type": "integer",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "integer",
              "description": "The upper range value that a characteristic can take on"
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "regex": {
              "type": "string",
              "description": "A regular expression constraint for given value"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceSpecRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecRelationship.schema.json",
      "title": "ServiceSpecRelationship",
      "definitions": {
        "ServiceSpecRelationship": {
          "$id": "#ServiceSpecRelationship",
          "description": "A dependency, substitution or exclusivity relationship between/among service specifications.",
          "type": "object",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as dependency, substitution or exclusivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this service specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the serviceSpecRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecification.schema.json",
      "title": "ServiceSpecification",
      "definitions": {
        "ServiceSpecification": {
          "type": "object",
          "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.",
          "properties": {
            "resourceSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ResourceSpecificationRef.schema.json#/definitions/ResourceSpecificationRef"
              },
              "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
            },
            "serviceLevelSpecification": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceLevelSpecificationRef.schema.json#/definitions/ServiceLevelSpecificationRef"
              },
              "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
            },
            "serviceSpecRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceSpecRelationship.schema.json#/definitions/ServiceSpecRelationship"
              },
              "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
            },
            "featureSpecification": {
              "type": "array",
              "description": "A list of Features for this specification.",
              "items": {
                "$ref": "../Service/ServiceFeatureSpecification.schema.json#/definitions/ServiceFeatureSpecification"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntitySpecification.schema.json#/definitions/EntitySpecification"
            }
          ]
        }
      }
    }
  ],
  "ServiceSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceSpecificationRef.schema.json",
      "title": "ServiceSpecificationRef",
      "definitions": {
        "ServiceSpecificationRef": {
          "$id": "#ServiceSpecificationRef",
          "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
          "type": "object",
          "properties": {
            "version": {
              "type": "string",
              "description": "Service specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceStateType.schema.json",
      "title": "ServiceStateType",
      "definitions": {
        "ServiceStateType": {
          "$id": "#ServiceStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the service",
          "enum": [
            "feasibilityChecked",
            "designed",
            "reserved",
            "inactive",
            "active",
            "terminated"
          ]
        }
      }
    }
  ],
  "ServiceTest": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceTest.schema.json",
      "title": "ServiceTest",
      "definitions": {
        "ServiceTest": {
          "$id": "#ServiceTest",
          "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.",
          "type": "object",
          "properties": {
            "characteristic": {
              "type": "array",
              "description": "List of characteristics with values that define the test run",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "description": {
              "type": "string",
              "description": "Description of the service test"
            },
            "endDateTime": {
              "type": "string",
              "format": "date-time",
              "description": "The end date and time of the service test"
            },
            "mode": {
              "type": "string",
              "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The validity time for the test results"
            },
            "name": {
              "type": "string",
              "description": "The name of the service test"
            },
            "relatedService": {
              "description": "The actual service being tested",
              "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
            },
            "relatedParty": {
              "type": "array",
              "description": "Party related to the test",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "startDateTime": {
              "type": "string",
              "format": "date-time",
              "description": "The start date and time of the service test."
            },
            "state": {
              "type": "string",
              "description": "The actual state the service test is in"
            },
            "testMeasure": {
              "type": "array",
              "description": "The results of the test in terms of the measured metrics",
              "items": {
                "$ref": "../Service/TestMeasure.schema.json#TestMeasure"
              }
            },
            "testSpecification": {
              "description": "The specification for this test",
              "$ref": "../Service/ServiceTestSpecificationRef.schema.json#ServiceTestSpecificationRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            },
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            }
          ]
        }
      }
    }
  ],
  "ServiceTestCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceTestCharacteristic.schema.json",
      "title": "ServiceTestCharacteristic",
      "definitions": {
        "ServiceTestCharacteristic": {
          "$id": "#ServiceTestCharacteristic",
          "description": "The configuration of the service test is set by the service test characteristic.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the characteristic."
            },
            "value": {
              "type": "string",
              "description": "The value of characteristic."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ServiceTestSpecRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceTestSpecRelationship.schema.json",
      "title": "ServiceTestSpecRelationship",
      "definitions": {
        "ServiceTestSpecRelationship": {
          "$id": "#ServiceTestSpecRelationship",
          "description": "A substitution, dependency or exclusivity relationship between/among service specifications.",
          "type": "object",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as substitution, dependency, exclusivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this service test specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the serviceTestSpecRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ServiceTestSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceTestSpecification.schema.json",
      "title": "ServiceTestSpecification",
      "definitions": {
        "ServiceTestSpecification": {
          "$id": "#ServiceTestSpecification",
          "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of a service test specification."
            },
            "testMeasureDefinition": {
              "type": "array",
              "description": "A list of definitions for the measurements for the test defined by this specification",
              "items": {
                "$ref": "../Service/TestMeasureDefinition.schema.json#TestMeasureDefinition"
              }
            },
            "relatedServiceSpecification": {
              "type": "array",
              "description": "The related service specification may relate to more than one service specification.",
              "items": {
                "$ref": "../Service/ServiceSpecificationRef.schema.json#ServiceSpecificationRef"
              }
            },
            "serviceTestSpecRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Service/ServiceTestSpecRelationship.schema.json#ServiceTestSpecRelationship"
              },
              "description": "A list of service test specifications related to this specification e.g. dependency, substitution"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntitySpecification.schema.json#EntitySpecification"
            }
          ]
        }
      }
    }
  ],
  "ServiceTestSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ServiceTestSpecificationRef.schema.json",
      "title": "ServiceTestSpecificationRef",
      "definitions": {
        "ServiceTestSpecificationRef": {
          "$id": "#ServiceTestSpecificationRef",
          "type": "object",
          "description": "The service test specification used by the service test.",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access a service test specification."
            },
            "id": {
              "type": "string",
              "description": "Identifier of a service test specification."
            },
            "version": {
              "type": "string",
              "description": "Version of a service test specification "
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "SettlementAccount": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SettlementAccount.schema.json",
      "title": "SettlementAccount",
      "definitions": {
        "SettlementAccount": {
          "$id": "#SettlementAccount",
          "description": "A party account used for settlement purposes. It includes a description of the bill structure (frequency, presentation media, format and so on). It is a specialization of entity PartyAccount.",
          "type": "object",
          "required": [
            "name",
            "relatedParty"
          ],
          "properties": {},
          "allOf": [
            {
              "$ref": "../EngagedParty/PartyAccount.schema.json#PartyAccount"
            }
          ]
        }
      }
    }
  ],
  "SettlementMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SettlementMethod.schema.json",
      "title": "SettlementMethod",
      "definitions": {
        "SettlementMethod": {
          "$id": "#SettlementMethod",
          "description": "Is the way in which the CSP provides the payment",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Code of the settlement method"
            },
            "label": {
              "type": "string",
              "description": "A word, term or phrase by which a settlement method is known and distinguished from other settlement method"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SettlementNoteAdvice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SettlementNoteAdvice.schema.json",
      "title": "SettlementNoteAdvice",
      "definitions": {
        "SettlementNoteAdvice": {
          "$id": "#SettlementNoteAdvice",
          "description": "The settlement is about transferring money receiving by a CSP to a partner. The settlement is notified to the partner with a settlement note advice containing details in settlement lines.",
          "type": "object",
          "properties": {
            "currencyCode": {
              "type": "string",
              "description": "A string used as a code for specifying the currency associated to the given amounts. The ISO4217 norm uses 3 letters to define the currency (for example USD for US dollar or EUR for Euro)."
            },
            "date": {
              "type": "string",
              "format": "date-time",
              "description": "Creation date of the settlement note advice"
            },
            "description": {
              "type": "string",
              "description": "A free description text"
            },
            "href": {
              "type": "string",
              "description": "Reference of the settlement note advice"
            },
            "id": {
              "type": "string",
              "description": "A unique identifier for the settlement note advice"
            },
            "issuerTaxRegistration": {
              "type": "string",
              "description": "Tax registration number of the issuer"
            },
            "paymentDueDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the due amount should have been paid to the partner"
            },
            "receiverTaxRegistration": {
              "type": "string",
              "description": "Tax registration number of the receiver"
            },
            "taxDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of the tax"
            },
            "taxExcludedAmount": {
              "type": "number",
              "format": "float",
              "description": "All taxes excluded amount (expressed in the given currency)"
            },
            "taxIncludedAmount": {
              "type": "number",
              "format": "float",
              "description": "All taxes included amount (expressed in the given currency)"
            },
            "settlementMethod": {
              "$ref": "../Customer/SettlementMethod.schema.json#SettlementMethod"
            },
            "settlementNoteImage": {
              "$ref": "../Customer/SettlementNoteImage.schema.json#SettlementNoteImage"
            },
            "receiver": {
              "$ref": "../EngagedParty/PartyRef.schema.json#PartyRef"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              }
            },
            "issuer": {
              "$ref": "../EngagedParty/PartyRef.schema.json#PartyRef"
            },
            "settlementNoteItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/SettlementNoteItem.schema.json#SettlementNoteItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SettlementNoteImage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SettlementNoteImage.schema.json",
      "title": "SettlementNoteImage",
      "definitions": {
        "SettlementNoteImage": {
          "$id": "#SettlementNoteImage",
          "description": "Is the image of the settlement note",
          "type": "object",
          "properties": {
            "imageFileName": {
              "type": "string",
              "description": "The name of the file in which the settlement note image is saved."
            },
            "imageFileURL": {
              "type": "string",
              "description": "The URL of the settlement note image"
            },
            "imageFormat": {
              "type": "string",
              "description": "The format of the settlement note image (csv, pdf, xls, txt...)"
            },
            "imageSize": {
              "type": "integer",
              "description": "The size of the settlement note image (in bytes)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SettlementNoteItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SettlementNoteItem.schema.json",
      "title": "SettlementNoteItem",
      "definitions": {
        "SettlementNoteItem": {
          "$id": "#SettlementNoteItem",
          "description": "Concerns a product identified by its catalogue reference. It could also follow a period delimited by a start and an end date.",
          "type": "object",
          "properties": {
            "itemId": {
              "type": "string",
              "description": "Unique identifier of the settlement note item"
            },
            "itemLabel": {
              "type": "string",
              "description": "A free description text for the settlement note item"
            },
            "itemNumber": {
              "type": "string",
              "description": "Unique number assigned to the settlement note item"
            },
            "period": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            },
            "quantity": {
              "type": "integer",
              "description": "Quantity"
            },
            "taxExcludedAmount": {
              "type": "number",
              "format": "float",
              "description": "Tax excluded amount equal to quantity * taxExcludedUnitPrice"
            },
            "taxExcludedUnitPrice": {
              "type": "number",
              "format": "float",
              "description": "Tax excluded unit price to be applied on the given quantity"
            },
            "taxIncludedAmount": {
              "type": "number",
              "format": "float",
              "description": "All taxes included amount equal to taxExcludedAmount + taxAmount"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TaxItem.schema.json#TaxItem"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Shipment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Shipment.schema.json",
      "title": "Shipment",
      "definitions": {
        "Shipment": {
          "$id": "#Shipment",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the shipment",
              "example": "4aafacbd-11ff-4dc8-b445-305f2215715f456"
            },
            "href": {
              "type": "string",
              "description": "Reference of the shipment",
              "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
            },
            "description": {
              "type": "string",
              "description": "Description of the shipment. It could be the same as the description of the shipment specification.",
              "example": "Cartridges for Ink Ltd"
            },
            "name": {
              "type": "string",
              "description": "Name of the shipment. It could be the same as the name of the shipment specification.",
              "example": "Shipment"
            },
            "state": {
              "type": "string",
              "description": "The current status of the shipment.",
              "examples": [
                "labelPrinted",
                "attemptedDelivery",
                "readyForPickup",
                "confirmed",
                "inTransit",
                "outForDelivery",
                "delivered",
                "failure"
              ]
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Effective delivery date amended by the provider",
              "example": "2020-11-20T08:00:00Z"
            },
            "deliveryDate": {
              "type": "string",
              "description": "Is the date at which the shipment was completed (customer has taken ownership of the package)",
              "format": "date-time",
              "example": "2020-11-20T08:00:00Z"
            },
            "collectionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date the package was collected from the carrier (Collection scenario)",
              "example": "2020-11-18T08:00:00Z"
            },
            "expectedDeliveryDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date that the shipment will be delivered",
              "example": "2020-11-20T08:00:00Z"
            },
            "requestedDeliveryDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date requester by the sender for shipment delivery",
              "example": "2020-11-20T08:00:00Z"
            },
            "weight": {
              "description": "Weight of the shipping package/parcel",
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "shippingInstruction": {
              "description": "Shipping instructions, usually relevant for the carrier.",
              "$ref": "../EngagedParty/ShippingInstruction.schema.json#ShippingInstruction"
            },
            "shipmentCharacteristic": {
              "type": "array",
              "description": "List of characteristics with values",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "shipmentItem": {
              "type": "array",
              "description": "List of items that are part of the shipment (parcel/package)",
              "items": {
                "$ref": "../EngagedParty/ShipmentItem.schema.json#ShipmentItem"
              }
            },
            "shipmentPrice": {
              "description": "Shipment price",
              "$ref": "../Product/ProductPrice.schema.json#ProductPrice"
            },
            "note": {
              "type": "array",
              "description": "A list of notes made on this shipment",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "shipmentTracking": {
              "description": "A reference number usually provided by the delivery partner(carrier) used to identify and track shipments across the delivery network",
              "$ref": "../EngagedParty/ShipmentTrackingRef.schema.json#/definitions/ShipmentTrackingRef"
            },
            "placeFrom": {
              "description": "Source location of the package. E.g. warehouse or shop location",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            },
            "placeTo": {
              "description": "Destination of the package. E.g. customer home address",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            },
            "relatedShipment": {
              "type": "array",
              "description": "A list of existing shipments that has some form of correlation with the given shipment",
              "items": {
                "$ref": "../EngagedParty/RelatedShipment.schema.json#RelatedShipment"
              }
            },
            "paymentMethod": {
              "description": "Payment method to be used when delivering the package(e.g.: cash, credit card, ). Structure including at least attribute name. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value.",
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "externalIdentifier": {
              "type": "array",
              "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
              "items": {
                "$ref": "../Common/ExternalIdentifier.schema.json#/definitions/ExternalIdentifier"
              }
            },
            "shipmentSpecification": {
              "description": "A set of characteristics to describe the shipment",
              "$ref": "../EngagedParty/ShipmentSpecificationRefOrValue.schema.json#/definitions/ShipmentSpecificationRefOrValue"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of parties which are involved in this shipment and the role they are playing",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyWithContactInfo.schema.json#RelatedPartyWithContactInfo"
              }
            },
            "attachment": {
              "type": "array",
              "description": "Attachments that may be of relevance to this shipment, such as shippingLabels, Signature or photos of the delivery\r\n",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ShipmentEligibilityUnavailabilityReason": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentEligibilityUnavailabilityReason.schema.json",
      "title": "ShipmentEligibilityUnavailabilityReason",
      "definitions": {
        "ShipmentEligibilityUnavailabilityReason": {
          "$id": "#ShipmentEligibilityUnavailabilityReason",
          "type": "object",
          "description": "Reason for eligibility result if the ShipmentQualification result is no (meaning the Shipment is not valid)",
          "properties": {
            "code": {
              "type": "string",
              "description": "Unavailability reason code"
            },
            "label": {
              "type": "string",
              "description": "Unavailability reason label"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ShipmentItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentItem.schema.json",
      "title": "ShipmentItem",
      "definitions": {
        "ShipmentItem": {
          "$id": "#ShipmentItem",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the individual shipment line item",
              "example": "4aafacbd-11ff-4dc8-b445-305f2215715f789"
            },
            "action": {
              "$ref": "../EngagedParty/ShipmentItemActionType.schema.json#ShipmentItemActionType",
              "description": "The action to be carried out on the shipment item. Can be: add, modify, delete, noChange"
            },
            "quantity": {
              "type": "string",
              "description": "Quantity the individual shipment line item",
              "example": "10 units"
            },
            "sku": {
              "type": "string",
              "description": "SKU (Stock Keeping Unit) is a unique code that you use to identify every inventory item in your warehouse",
              "example": "UGG-BB-PUR-06"
            },
            "weight": {
              "description": "Weight of the shipping item package/parcel",
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "productReservationRef": {
              "$ref": "../Resource/ReserveProductStockRef.schema.json#ReserveProductStockRef"
            },
            "productStockRef": {
              "$ref": "../Resource/ProductStockRef.schema.json#ProductStockRef"
            },
            "externalIdentifier": {
              "type": "array",
              "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
              "items": {
                "$ref": "../Common/ExternalIdentifier.schema.json#/definitions/ExternalIdentifier"
              }
            },
            "shipmentItemPrice": {
              "description": "Item price details",
              "$ref": "../Customer/Price.schema.json#Price"
            },
            "characteristic": {
              "type": "array",
              "description": "List of characteristics with values that define the test run",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "product": {
              "description": "This data structure captures the product information.",
              "$ref": "../Product/ProductRefOrValue.schema.json#/definitions/ProductRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ShipmentItemActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentItemActionType.schema.json",
      "title": "ShipmentItemActionType",
      "definitions": {
        "ShipmentItemActionType": {
          "$id": "#ShipmentItemActionType",
          "description": "action to be performed on the shipment item",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "ShipmentQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentQualification.schema.json",
      "title": "ShipmentQualification",
      "definitions": {
        "ShipmentQualification": {
          "$id": "#ShipmentQualification",
          "type": "object",
          "description": "ShipmentQualification is used to perform a validation on shipment parameters and options, in relation to a specific carrier.",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the qualification"
            },
            "effectiveQualificationDate": {
              "type": "string",
              "description": "Effective date to qualification completion",
              "format": "date-time"
            },
            "estimatedResponseDate": {
              "type": "string",
              "description": "Date when the requester expect to provide an answer for the qualification request.",
              "format": "date-time"
            },
            "expectedQualificationDate": {
              "type": "string",
              "description": "A date (DateTime). Deadline date when the requester expected a qualification answer.",
              "format": "date-time"
            },
            "expirationDate": {
              "type": "string",
              "description": "Date when the qualification response expires",
              "format": "date-time"
            },
            "externalId": {
              "type": "string",
              "description": "Identifier provided by the requester"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references, defines party or party role linked to this request.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "state": {
              "description": "State of the shipmentQualification (acknowledged, inProgress, terminatedWithError, done)",
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            },
            "placeFrom": {
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            },
            "placeTo": {
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ShipmentQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentQualificationItem.schema.json",
      "title": "ShipmentQualificationItem",
      "definitions": {
        "ShipmentQualificationItem": {
          "$id": "#ShipmentQualificationItem",
          "type": "object",
          "description": "A ShipmentQualificationItem relates to a specific shipment being checked in a qualification operation.",
          "properties": {
            "expectedDeliveryDate": {
              "type": "string",
              "description": "The date when the shipment is expected to be delivered",
              "format": "date-time"
            },
            "id": {
              "type": "string",
              "description": "Id of the Shipment Qualification Item"
            },
            "expirationDate": {
              "type": "string",
              "description": "Date when the qualification item response expires",
              "format": "date-time"
            },
            "shipment": {
              "description": "Shipment structure that allows to identify the Shipment's composition, the Shipment Specification and the Shipment Characteristics.",
              "$ref": "../EngagedParty/ShipmentRefOrValue.schema.json#/definitions/ShipmentRefOrValue"
            },
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "items": {
                "$ref": "../Product/EligibilityUnavailabilityReason.schema.json#/definitions/EligibilityUnavailabilityReason"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ShipmentQualificationItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentQualificationItemRelationship.schema.json",
      "title": "ShipmentQualificationItemRelationship",
      "definitions": {
        "ShipmentQualificationItemRelationship": {
          "$id": "#ShipmentQualificationItemRelationship",
          "type": "object",
          "description": "Structure used to describe relationship between shipmentQualification items from the same shipmentQualification .",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the shipmentQualificationItem (from the same shipmentQualificationItem )."
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "ShipmentRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentRef.schema.json",
      "title": "ShipmentRef",
      "definitions": {
        "ShipmentRef": {
          "$id": "#ShipmentRef",
          "type": "object",
          "description": "Shipment reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ShipmentRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentRefOrValue.schema.json",
      "title": "ShipmentRefOrValue",
      "definitions": {
        "ShipmentRefOrValue": {
          "$id": "#ShipmentRefOrValue",
          "type": "object",
          "description": "A shipment defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation &amp; @referredType are related to the shipment entity and not the related ShipmentRefOrValue class itself",
          "allOf": [
            {
              "$ref": "../EngagedParty/Shipment.schema.json#/definitions/Shipment"
            },
            {
              "$ref": "../EngagedParty/ShipmentRef.schema.json#/definitions/ShipmentRef"
            }
          ]
        }
      }
    }
  ],
  "ShipmentSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentSpecification.schema.json",
      "title": "ShipmentSpecification",
      "definitions": {
        "ShipmentSpecification": {
          "$id": "#ShipmentSpecification",
          "type": "object",
          "description": "Definition of the nature of a Shipment. For example, could be a standard ground delivery, overnight express with signature required by an adult, etc.",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of this REST resource",
              "example": "Airmail delivery"
            },
            "lastUpdate": {
              "type": "string",
              "description": "Date and time of the last update of this REST resource",
              "format": "date-time",
              "example": "2020-11-20T08:00:00Z"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of this catalog item",
              "example": "active"
            },
            "name": {
              "type": "string",
              "description": "Name given to this REST resource",
              "example": "Shipment Spec"
            },
            "isBundle": {
              "type": "boolean",
              "description": "isBundle determines whether an ShipmentSpecification represents a single ShipmentSpecification (false), or a bundle of ShipmentSpecification (true).",
              "example": true
            },
            "version": {
              "type": "string",
              "description": "Entity specification version",
              "example": "4.0.1"
            },
            "constraint": {
              "type": "array",
              "description": "This is a list of constraint references applied to this specification\r\n",
              "items": {
                "$ref": "../Common/ConstraintRef.schema.json#/definitions/ConstraintRef"
              }
            },
            "targetShipmentSchema": {
              "description": "Pointer to a schema that defines the target shipment",
              "$ref": "../EngagedParty/TargetShipmentSchema.schema.json#/definitions/TargetShipmentSchema"
            },
            "attachment": {
              "type": "array",
              "description": "Attachments that may be of relevance to this specification, such as picture, document, media\r\n",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#/definitions/AttachmentRefOrValue"
              }
            },
            "shipmentSpecificationCharacteristic": {
              "type": "array",
              "description": "List of characteristics that the shipment can take",
              "items": {
                "$ref": "../Common/CharacteristicSpecification.schema.json#/definitions/CharacteristicSpecification"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "Parties who manage or otherwise have an interest in this shipment specification",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "validFor": {
              "description": "The period for which this REST resource is valid",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            },
            "shipmentSpecRelationship": {
              "type": "array",
              "description": "Relationship to another shipment specification, might be dependency, substitution, etc.\r\n",
              "items": {
                "$ref": "../EngagedParty/ShipmentSpecificationRelationship.schema.json#/definitions/ShipmentSpecificationRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ShipmentSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentSpecificationRef.schema.json",
      "title": "ShipmentSpecificationRef",
      "definitions": {
        "ShipmentSpecificationRef": {
          "$id": "#ShipmentSpecificationRef",
          "type": "object",
          "description": "Shipment specification reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ShipmentSpecificationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentSpecificationRefOrValue.schema.json",
      "title": "ShipmentSpecificationRefOrValue",
      "definitions": {
        "ShipmentSpecificationRefOrValue": {
          "$id": "#ShipmentSpecificationRefOrValue",
          "type": "object",
          "description": "A shipment specification defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation &amp; @referredType are related to the shipment specification entity and not the related ShipmentSpecificationRefOrValue class itself",
          "allOf": [
            {
              "$ref": "../EngagedParty/ShipmentSpecification.schema.json#/definitions/ShipmentSpecification"
            },
            {
              "$ref": "../EngagedParty/ShipmentSpecificationRef.schema.json#/definitions/ShipmentSpecificationRef"
            }
          ]
        }
      }
    }
  ],
  "ShipmentSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentSpecificationRelationship.schema.json",
      "title": "ShipmentSpecificationRelationship",
      "definitions": {
        "ShipmentSpecificationRelationship": {
          "$id": "#ShipmentSpecificationRelationship",
          "type": "object",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name given to the target entity specification instance"
            },
            "role": {
              "type": "string",
              "description": "The association role for this entity specification"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "associationSpec": {
              "description": "A specification for an association used by this relationship\r\n",
              "$ref": "../Common/AssociationSpecificationRef.schema.json#/definitions/AssociationSpecificationRef"
            },
            "validFor": {
              "description": "The period for which this REST resource is valid",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "ShipmentTrackingRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShipmentTrackingRef.schema.json",
      "title": "ShipmentTrackingRef",
      "definitions": {
        "ShipmentTrackingRef": {
          "$id": "#ShipmentTrackingRef",
          "type": "object",
          "description": "ShipmentTracking reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ShippingInstruction": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShippingInstruction.schema.json",
      "title": "ShippingInstruction",
      "definitions": {
        "ShippingInstruction": {
          "$id": "#ShippingInstruction",
          "description": "Instructions and details for the carrier",
          "type": "object",
          "properties": {
            "shippingType": {
              "type": "string",
              "description": "The shipping type, e.g. thick_envelope, small_flat_rate_box, large_package, etc.",
              "example": "large_package"
            },
            "carrierId": {
              "type": "string",
              "description": "The carrier identifier",
              "example": "1010123"
            },
            "carrierName": {
              "type": "string",
              "description": "The carrier name",
              "example": "On Time Deliveries Ltd"
            },
            "carrierServiceCode": {
              "type": "string",
              "description": "The service code used by the carrier to ship the package, royal mail ground, royal mail first class, etc",
              "example": "XH545554533GB"
            },
            "deliverySpeed": {
              "type": "string",
              "description": "Shipping delivery speed, same day, next day, next business day, etc",
              "example": "SameDay"
            },
            "deliveryAttempts": {
              "type": "integer",
              "description": "Shipping delivery attempts that should be performed",
              "example": 3
            },
            "deliveryTimeSlot": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Shipping delivery time slot",
              "example": "12-4pm"
            },
            "insuredValue": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Shipping delivery value"
            },
            "labelMessage": {
              "type": "string",
              "description": "Shipping delivery message label",
              "example": "FAO Ink Industries"
            },
            "packageType": {
              "type": "string",
              "description": "The type of packaging",
              "example": "Bottle, gas"
            },
            "instructionCharacteristic": {
              "type": "array",
              "description": "Additional shipping characteristics that maybe specific to one or another carrier",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "warehouseId": {
              "type": "string",
              "description": "The identification of the warehouse that the shipment is being shipped from.",
              "example": "wh12345"
            },
            "receiptConfirmation": {
              "type": "string",
              "description": "Delivery confirmation required for the shipment (none, signature, over18Signature)",
              "example": "signature"
            },
            "note": {
              "type": "array",
              "description": "A list of notes made on this shipment item",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "signatureRequired": {
              "type": "boolean",
              "example": "true"
            },
            "signatureRequiredBy": {
              "$ref": "../EngagedParty/SignatureRequiredByType.schema.json#/definitions/SignatureRequiredByType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ShippingOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShippingOrder.schema.json",
      "title": "ShippingOrder",
      "definitions": {
        "ShippingOrder": {
          "$id": "#ShippingOrder",
          "type": "object",
          "description": "A Shipping Order is a document used by a business to specify what items are to be transferred from a storage location or warehouse to which person and to which new location. A Shipping Order can typically be sent along with a shipment of goods so that the person receiving them can verify that the document correctly reflects the items that they actually received.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the Shipping Order",
              "example": "4aafacbd-11ff-4dc8-b445-305f2215715f123"
            },
            "href": {
              "type": "string",
              "description": "Shipping Order unique reference",
              "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of the Shipping Order",
              "example": "2020-11-10T08:00:00Z"
            },
            "lastUpdateDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of the Shipping Order",
              "example": "2020-11-10T08:00:00Z"
            },
            "relatedParty": {
              "type": "array",
              "description": "An existing related party that has some form of correlation with the given shipping order. It can be recipient, payer, etc.",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyWithContactInfo.schema.json#RelatedPartyWithContactInfo"
              }
            },
            "relatedShippingOrder": {
              "$ref": "../EngagedParty/RelatedShippingOrder.schema.json#RelatedShippingOrder",
              "description": "An existing shipping order that has some form of correlation with the given shipping order"
            },
            "productOrder": {
              "$ref": "../Customer/ProductOrderRef.schema.json#ProductOrderRef",
              "description": "The product order for which the shipping order is created, if supplied as input the attribute id must be populated"
            },
            "shippingInstruction": {
              "$ref": "../EngagedParty/ShippingInstruction.schema.json#ShippingInstruction",
              "description": "The product order for which the shipping order is created, if supplied as input the attribute id must be populated"
            },
            "shippingOrderItem": {
              "type": "array",
              "description": "A list of shipping order items. Each shipping order item has a corresponding Shipment(e.g. parcel) which has one or multiple products in it",
              "items": {
                "$ref": "../EngagedParty/ShippingOrderItem.schema.json#ShippingOrderItem"
              }
            },
            "shippingOrderCharacteristic": {
              "type": "array",
              "description": "List of characteristics with values",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              }
            },
            "note": {
              "type": "array",
              "description": "A list of notes made on this shipping shipment",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "shippingOrderPrice": {
              "description": "Shipping Order price",
              "$ref": "../Product/ProductPrice.schema.json#ProductPrice"
            },
            "shippingOrderOffering": {
              "description": "Shipping order can have a corresponding entry in the product catalog (product offering)",
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "status": {
              "type": "string",
              "description": "status of shipping order e.g \"active\" , \"savedForLater\"",
              "example": "active"
            },
            "placeFrom": {
              "description": "Source location of the item. E.g. warehouse or shop location. The location can be specified at the shipping order level or at the shipping order item level if multiple sources are specified part of the same shipping order.",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            },
            "placeTo": {
              "description": "Destination of the item. E.g. customer home address. The location can be specified at the shipping order level or at the shipping order item level if multiple destinations are specified part of the same shipping order.",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ShippingOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShippingOrderItem.schema.json",
      "title": "ShippingOrderItem",
      "definitions": {
        "ShippingOrderItem": {
          "$id": "#ShippingOrderItem",
          "description": "A list of shipping order items",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the Shipping Order Item",
              "example": "4aafacbd-11ff-4dc8-b445-305f2215715f"
            },
            "action": {
              "$ref": "../EngagedParty/ShippingOrderItemActionType.schema.json#ShippingOrderItemActionType",
              "description": "The action to be carried out on the Product. Can be: add, modify, delete, noChange"
            },
            "productOrderItem": {
              "$ref": "../Customer/ProductOrderItemRef.schema.json#ProductOrderItemRef",
              "description": "The product order item for which the shipping order is created, if supplied as input the attribute id must be populated"
            },
            "product": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef",
              "description": "The product for which the shipping order is created, if supplied as input the attribute id must be populated"
            },
            "relatedParty": {
              "type": "array",
              "description": "A party which is involved in this shipment and the role they are playing and address. In case of shipping to addresses where a geo location is needed than then PlaceTo,PlaceFrom can be used.",
              "items": {
                "$ref": "../EngagedParty/RelatedPartyWithContactInfo.schema.json#RelatedPartyWithContactInfo"
              }
            },
            "quantity": {
              "type": "string",
              "description": "Quantity the individual shipment line item",
              "example": "10 units"
            },
            "status": {
              "type": "string",
              "description": "status of shipping order item. e.g \"active\" , \"savedForLater\"",
              "example": "active"
            },
            "shippingInstruction": {
              "description": "Shipping instructions, usually relevant for the carrier.",
              "$ref": "../EngagedParty/ShippingInstruction.schema.json#ShippingInstruction"
            },
            "shippingOrderItemOffering": {
              "description": "Each shipping order item can have a corresponding product offer in the product catalog.",
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "productOffering": {
              "description": "Item has a corresponding offering in the product catalog.",
              "$ref": "../Product/ProductOfferingRef.schema.json#ProductOfferingRef"
            },
            "shipment": {
              "description": "A set of goods to be shipped",
              "$ref": "../EngagedParty/ShipmentRefOrValue.schema.json#ShipmentRefOrValue"
            },
            "shippingOrderItemPrice": {
              "description": "Shipping Order Item price. The price of shipping this item. It depends if there is a ShippingOrder level price or per each individual item.",
              "$ref": "../Product/ProductPrice.schema.json#ProductPrice"
            },
            "placeFrom": {
              "description": "Source location of the item. E.g. warehouse or shop location",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            },
            "placeTo": {
              "description": "Destination of the item. E.g. customer home address. ",
              "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#RelatedPlaceRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ShippingOrderItemActionType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShippingOrderItemActionType.schema.json",
      "title": "ShippingOrderItemActionType",
      "definitions": {
        "ShippingOrderItemActionType": {
          "$id": "#ShippingOrderItemActionType",
          "description": "action to be performed on the shipping order item",
          "type": "string",
          "enum": [
            "add",
            "modify",
            "delete",
            "noChange"
          ]
        }
      }
    }
  ],
  "ShippingOrderProduct": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShippingOrderProduct.schema.json",
      "title": "ShippingOrderProduct",
      "definitions": {
        "ShippingOrderProduct": {
          "$id": "#ShippingOrderProduct",
          "description": "The product order item",
          "type": "object",
          "properties": {
            "productOrderItem": {
              "$ref": "../Customer/ProductOrderItemRef.schema.json#ProductOrderItemRef"
            },
            "productCharacteristic": {
              "type": "array",
              "description": "",
              "items": {
                "$ref": "../Product/Characteristic.schema.json#Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            }
          ]
        }
      }
    }
  ],
  "ShoppingCart": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShoppingCart.schema.json",
      "title": "ShoppingCart",
      "definitions": {
        "ShoppingCart": {
          "$id": "#ShoppingCart",
          "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink to access the shopping cart"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier created on provider side (e.g. Order Capture system)"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "$ref": "../Common/ContactMedium.schema.json#ContactMedium"
              }
            },
            "cartTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartPrice.schema.json#CartPrice"
              },
              "description": "Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)"
            },
            "cartItem": {
              "type": "array",
              "items": {
                "$ref": "../Customer/CartItem.schema.json#CartItem"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ShoppingCartRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShoppingCartRef.schema.json",
      "title": "ShoppingCartRef",
      "definitions": {
        "ShoppingCartRef": {
          "$id": "#ShoppingCartRef",
          "description": "ShoppingCart (ShoppingCartRef) . The shopping cart which the recommendation is related with.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the shopping cart."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of shopping cart"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ShoppingCartRiskAssessment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ShoppingCartRiskAssessment.schema.json",
      "title": "ShoppingCartRiskAssessment",
      "definitions": {
        "ShoppingCartRiskAssessment": {
          "$id": "#ShoppingCartRiskAssessment",
          "description": "This is a task resource allowing assessment of the risks associated with a shopping cart - presumably created by a party role and containing one or more product offerings",
          "type": "object",
          "required": [
            "shoppingCart"
          ],
          "properties": {
            "shoppingCart": {
              "$ref": "../Customer/ShoppingCartRef.schema.json#ShoppingCartRef",
              "description": "The shopping cart for which the assessment is to be carried out, must be supplied as input to the task, with the attribute id populated"
            }
          },
          "allOf": [
            {
              "$ref": "RiskAssessment.schema.json#RiskAssessment"
            }
          ]
        }
      }
    }
  ],
  "SignatureRequiredByType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SignatureRequiredByType.schema.json",
      "title": "SignatureRequiredByType",
      "definitions": {
        "SignatureRequiredByType": {
          "$id": "#SignatureRequiredByType",
          "type": "string",
          "description": "Possible values for the signature requirement upon receiving the shipment",
          "enum": [
            "adult",
            "receiver"
          ]
        }
      }
    }
  ],
  "SimpleThresholdRule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SimpleThresholdRule.schema.json",
      "title": "SimpleThresholdRule",
      "definitions": {
        "SimpleThresholdRule": {
          "type": "object",
          "description": "A threshold rule that is based on explicit definition of attributes that represent a Boolean expression",
          "properties": {
            "conformanceComparatorLower": {
              "type": "integer",
              "format": "int64",
              "description": "An operator that when applied on a value (of conformanceTargetLower) specifies whether a Performance threshold rule is crossed or ceased to be crossed."
            },
            "conformanceComparatorUpper": {
              "type": "string",
              "description": "An operator that when applied on a value (of conformanceTargetUpper) specifies whether a Performance threshold rule is crossed or ceased to be crossed."
            },
            "conformancePeriod": {
              "$ref": "#/definitions/TimePeriod"
            },
            "conformanceTargetLower": {
              "type": "integer",
              "format": "int64",
              "description": "A value used to determine if the Performance threshold is crossed or ceased to be crossed, serving as an lower value"
            },
            "conformanceTargetUpper": {
              "type": "integer",
              "format": "int64",
              "description": "A value used to determine if the Performance threshold is crossed or ceased to be crossed, serving as an upper value"
            },
            "gracePeriods": {
              "type": "integer",
              "format": "int32",
              "description": "The number of times an objective can remain un-updated in reference to the conformancePeriod without a Performance threshold Consequence being initiated"
            },
            "thresholdTarget": {
              "type": "integer",
              "format": "int64",
              "description": "A percent that is used to specify when a warning should be used that indicates a Performance threshold is in danger of not being met."
            },
            "tolerancePeriod": {
              "$ref": "#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ThresholdRule.schema.json#ThresholdRule"
            }
          ]
        }
      }
    }
  ],
  "SiteRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SiteRelationship.schema.json",
      "title": "SiteRelationship",
      "definitions": {
        "SiteRelationship": {
          "$id": "#SiteRelationship",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the related site"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the related site entity within the server"
            },
            "role": {
              "type": "string",
              "description": "Role of the related site in the relationship"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity for the relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Skill": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Skill.schema.json",
      "title": "Skill",
      "definitions": {
        "Skill": {
          "$id": "#Skill",
          "type": "object",
          "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).",
          "properties": {
            "skillCode": {
              "type": "string",
              "description": "Code of the skill"
            },
            "skillName": {
              "type": "string",
              "description": "Name of the skill such as Java language,…"
            },
            "evaluatedLevel": {
              "type": "string",
              "description": "Level of expertise in a skill evaluated for an individual"
            },
            "comment": {
              "type": "string",
              "description": "A free text comment linked to the evaluation done"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SmartPointOfInteraction": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/PointOfInteraction/SmartPointOfInteraction/doc/schema.json",
      "title": "FIWARE - Smart Point of Interaction",
      "description": "FIWARE Smart Point of Interaction entity schema intended for validation tools",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SmartPointOfInteraction"
              ],
              "description": "NGSI Entity type"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "information",
                  "entertainment",
                  "infotainment",
                  "co-creation"
                ]
              },
              "minItems": 1,
              "uniqueItems": true,
              "description": "Defines the type of interaction"
            },
            "areaCovered": {
              "$ref": "http://json-schema.org/geojson/geometry.json#",
              "description": "Defines the area covered by the Smart Point of Interaction using geoJSON format"
            },
            "applicationUrl": {
              "type": "string",
              "format": "uri",
              "description": "This field specifies the real URL containing the solution or application"
            },
            "availability": {
              "type": "string",
              "description": "Specifies the functionality intervals in which the announcements will be sent"
            },
            "refRelatedEntity": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true,
              "description": "List of entities improved with this Smart Point of Interaction. The entity type could be any such as a “Parking”, “Point of Interest”, etc"
            },
            "refSmartSpot": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true,
              "description": "Reference to one or more entity of type SmartSpot"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "category",
        "applicationUrl",
        "availability"
      ]
    }
  ],
  "SmartSpot": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/PointOfInteraction/SmartSpot/doc/schema.json",
      "title": "FIWARE - Smart Spot",
      "description": "FIWARE Smart Spot entity schema intended for validation tools",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "SmartSpot"
              ],
              "description": "NGSI Entity type"
            },
            "announcedUrl": {
              "type": "string",
              "format": "uri",
              "description": "URL broadcasted by the device"
            },
            "signalStrength": {
              "type": "string",
              "enum": [
                "lowest",
                "medium",
                "highest"
              ],
              "description": "Signal strength to adjust the announcement range"
            },
            "bluetoothChannel": {
              "type": "string",
              "enum": [
                "37",
                "38",
                "39",
                "37,38",
                "38,39",
                "37,39",
                "37,38,39"
              ],
              "description": "Bluetooth channels where to transmit the announcement"
            },
            "coverageRadius": {
              "type": "integer",
              "minimum": 1,
              "description": "Radius of the spot coverage area in meters"
            },
            "announcementPeriod": {
              "type": "integer",
              "minimum": 100,
              "maximum": 4000,
              "description": "Period between announcements in milliseconds"
            },
            "availability": {
              "type": "string",
              "description": "Specifies the time intervals in which this interactive service is available, but this is a general information while Smart Spots have their own real availability in order to allow advanced configurations"
            },
            "refSmartPointOfInteraction": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType",
              "description": "Reference to the Smart Point of Interaction which includes this Smart Spot"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "announcedUrl",
        "signalStrength",
        "bluetoothChannel",
        "announcementPeriod",
        "availability"
      ]
    }
  ],
  "SocialMediaAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SocialMediaAnalytics.schema.json",
      "title": "SocialMediaAnalytics",
      "definitions": {
        "SocialMediaAnalytics": {
          "$id": "#SocialMediaAnalytics",
          "type": "object",
          "properties": {
            "startTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The beginning of the measurement interval \r\nSTART_TIMESTAMP to END_TIME_STAMP defines define the period for which the measurement is done"
            },
            "endTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The beginning of the measurement interval \r\nSTART_TIMESTAMP to END_TIME_STAMP defines define the period for which the measurement is done"
            },
            "twitterFollowers": {
              "type": "number",
              "format": "integer",
              "description": "Total followers at the end of the period"
            },
            "twitterFollowersGrowth": {
              "type": "number",
              "format": "integer",
              "description": "Difference in followers between beginning of period and end of period"
            },
            "twitterTweets": {
              "type": "number",
              "format": "integer",
              "description": "Total own tweets in period"
            },
            "twitterRetweets": {
              "type": "number",
              "format": "integer",
              "description": "Total retweets to own tweets in period"
            },
            "twitterReplies": {
              "type": "number",
              "format": "integer",
              "description": "Total replies to own tweets in period"
            },
            "twitterLike": {
              "type": "number",
              "format": "integer",
              "description": "Total likes to own tweets in period"
            },
            "facebookPosts": {
              "type": "number",
              "format": "integer",
              "description": "Total facebook posts in period"
            },
            "facebookReactions": {
              "type": "number",
              "format": "integer",
              "description": "Total facebook reactions to own posts in period"
            },
            "facebookShares": {
              "type": "number",
              "format": "integer",
              "description": "Total facebook shares to own posts in period"
            },
            "facebookComments": {
              "type": "number",
              "format": "integer",
              "description": "Total facebook comments to own posts in period"
            },
            "facebookFans": {
              "type": "number",
              "format": "integer",
              "description": "Total facebook fans / friends at the end of period"
            },
            "facebookFansGrowth": {
              "type": "number",
              "format": "integer",
              "description": "Difference in fans / friends count between beginning of period and end of period"
            },
            "youtubeVideos": {
              "type": "number",
              "format": "integer",
              "description": "Total own youtube videos in period"
            },
            "youtubeVisualizations": {
              "type": "number",
              "format": "integer",
              "description": "Total youtube visualizations to own videos in period"
            },
            "youtubeLikes": {
              "type": "number",
              "format": "integer",
              "description": "Total youtube likes to own videos in period"
            },
            "youtubeDislikes": {
              "type": "number",
              "format": "integer",
              "description": "Total youtube dislikes to own videos in period"
            },
            "youtubeComments": {
              "type": "number",
              "format": "integer",
              "description": "Total youtube comments to own videos in period"
            },
            "youtubeSubscribers": {
              "type": "number",
              "format": "integer",
              "description": "Total youtube subscribers at the end of the period"
            },
            "youtubeSubscribersGrowth": {
              "type": "number",
              "format": "integer",
              "description": "Difference in subscribers count between beginning of period and end of period"
            },
            "instagramPosts": {
              "type": "number",
              "format": "integer",
              "description": "Total own instagram posts in period"
            },
            "instagramLikes": {
              "type": "number",
              "format": "integer",
              "description": "Total instagram likes to own posts in period"
            },
            "instagramComments": {
              "type": "number",
              "format": "integer",
              "description": "Total instagram comments to own posts in period"
            },
            "instagramFollowers": {
              "type": "number",
              "format": "integer",
              "description": "Total instagram followers  at the end of the period"
            },
            "instagramFollowersGrowth": {
              "type": "number",
              "format": "integer",
              "description": "Difference in followers count between beginning of period and end of period"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "SoftwareRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SoftwareRef.schema.json",
      "title": "SoftwareRef",
      "definitions": {
        "SoftwareRef": {
          "$id": "#SoftwareRef",
          "description": "Software Ref",
          "type": "object",
          "properties": {
            "version": {
              "description": "Descriptive name for the resource graph.",
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "SpecCharRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecCharRelationship.schema.json",
      "title": "SpecCharRelationship",
      "definitions": {
        "SpecCharRelationship": {
          "$id": "#SpecCharRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecCharacteristics.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target entity specification"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the target entity specification"
            },
            "name": {
              "type": "string",
              "description": "Name of the target specCharacteristic"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the SpecCharRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SpecCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecCharacteristic.schema.json",
      "title": "SpecCharacteristic",
      "definitions": {
        "SpecCharacteristic": {
          "$id": "#SpecCharacteristic",
          "description": "A characteristic quality or distinctive feature of a Specification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "type": "object",
          "properties": {
            "configurable": {
              "type": "boolean",
              "description": "If true, the Boolean indicates that the SpecCharacteristic is configurable"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the SpecCharacteristic is"
            },
            "name": {
              "type": "string",
              "description": "Name of the SpecCharacteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productSpecCharacteristic is valid"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "specCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/SpecCharacteristicValue.schema.json#SpecCharacteristicValue"
              }
            },
            "specCharRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/SpecCharRelationship.schema.json#SpecCharRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SpecCharacteristicValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecCharacteristicValue.schema.json",
      "title": "SpecCharacteristicValue",
      "definitions": {
        "SpecCharacteristicValue": {
          "$id": "#SpecCharacteristicValue",
          "description": "A number or text that can be assigned to a SpecCharacteristic",
          "type": "object",
          "properties": {
            "isDefault": {
              "type": "boolean",
              "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "regex": {
              "type": "string",
              "description": "A regular expression constraint for given value"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "unit of measure for the valueCould be minutes, GB, etc"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this object is valid"
            },
            "value": {
              "$ref": "../Common/Object.schema.json#Object",
              "description": "the  value that the characteristic can take on."
            },
            "valueFrom": {
              "type": "integer",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "integer",
              "description": "The upper range value that a characteristic can take on"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecificationCharacteristic.schema.json",
      "title": "SpecificationCharacteristic",
      "definitions": {
        "SpecificationCharacteristic": {
          "$id": "#SpecificationCharacteristic",
          "description": "A characteristic quality or distinctive feature of a Specification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
          "type": "object",
          "properties": {
            "configurable": {
              "type": "boolean",
              "description": "If true, the Boolean indicates that the SpecificationCharacteristic is configurable"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the SpecificationCharacteristic is"
            },
            "name": {
              "type": "string",
              "description": "Name of the SpecificationCharacteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the productSpecificationCharacteristic is valid"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
            },
            "specCharacteristicValue": {
              "type": "array",
              "description": "The value or values that this characteristic can take on",
              "items": {
                "$ref": "../Common/SpecificationCharacteristicValue.schema.json#SpecificationCharacteristicValue"
              }
            },
            "specCharRelationship": {
              "type": "array",
              "description": "Relationship to other characteristics, such as dependency (the value that this characteristic can take may be limited by the value of the related characteristic)",
              "items": {
                "$ref": "../Common/SpecificationCharacteristicRelationship.schema.json#SpecificationCharacteristicRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecificationCharacteristicRelationship.schema.json",
      "title": "SpecificationCharacteristicRelationship",
      "definitions": {
        "SpecificationCharacteristicRelationship": {
          "$id": "#SpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecCharacteristics.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink reference to the target SpecificationCharacteristic"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the target SpecificationCharacteristic"
            },
            "name": {
              "type": "string",
              "description": "Name of the target SpecificationCharacteristic"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the SpecificationCharacteristicRelationship is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SpecificationCharacteristicValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SpecificationCharacteristicValue.schema.json",
      "title": "SpecificationCharacteristicValue",
      "definitions": {
        "SpecificationCharacteristicValue": {
          "$id": "#SpecificationCharacteristicValue",
          "description": "A number or text that can be assigned to a SpecificationCharacteristic",
          "type": "object",
          "properties": {
            "isDefault": {
              "type": "boolean",
              "description": "If true, the Boolean Indicates if the value is the default value for a characteristic"
            },
            "rangeInterval": {
              "type": "string",
              "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
            },
            "regex": {
              "type": "string",
              "description": "A regular expression constraint for given value"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "unit of measure for the valueCould be minutes, GB, etc"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this object is valid"
            },
            "value": {
              "$ref": "../Common/Any.schema.json#Any",
              "description": "the  value that the characteristic can take on."
            },
            "valueFrom": {
              "type": "integer",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "integer",
              "description": "The upper range value that a characteristic can take on"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Station": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Station/schema.json",
      "title": "NGSI GTFS Schema - Station",
      "description": "GTFS Station",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/UrbanMobility/gtfs-schema.json#/definitions/GTFS-Stop-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Station"
              ],
              "description": "NGSI Entity type"
            },
            "hasStop": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            },
            "hasAccessPoint": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name",
        "location",
        "hasStop"
      ]
    }
  ],
  "StatusChange": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StatusChange.schema.json",
      "title": "StatusChange",
      "definitions": {
        "StatusChange": {
          "$id": "#StatusChange",
          "type": "object",
          "description": "Holds the status notification reasons and associated date the status changed, populated by the server",
          "properties": {
            "changeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the status changed."
            },
            "changeReason": {
              "type": "string",
              "description": "The reason why the status changed."
            },
            "status": {
              "type": "string",
              "description": "The status of the trouble ticket"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Stop": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Stop/schema.json",
      "title": "NGSI GTFS Schema",
      "description": "GTFS Stop",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/UrbanMobility/gtfs-schema.json#/definitions/GTFS-Stop-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Stop"
              ],
              "description": "NGSI Entity type"
            },
            "operatedBy": {
              "type": "string",
              "format": "uri"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name",
        "location",
        "operatedBy"
      ]
    }
  ],
  "StopTime": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/StopTime/schema.json",
      "title": "NGSI GTFS Schema - StopTime",
      "description": "GTFS Stop Time",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:StopTime"
              ],
              "description": "NGSI Entity type"
            },
            "hasStop": {
              "type": "string",
              "format": "uri"
            },
            "hasTrip": {
              "type": "string",
              "format": "uri"
            },
            "arrivalTime": {
              "type": "string",
              "pattern": "^([0][0-9]|1[0-9]|4[0-7]):[0-5][0-9]:[0-5][0-9]"
            },
            "departureTime": {
              "type": "string",
              "pattern": "^([0][0-9]|1[0-9]|4[0-7]):[0-5][0-9]:[0-5][0-9]"
            },
            "stopSequence": {
              "type": "integer",
              "minValue": 1
            },
            "distanceTravelled": {
              "type": "number",
              "minValue": 0
            },
            "pickupType": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3"
              ]
            },
            "dropOffType": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "2",
                "3"
              ]
            },
            "timepoint": {
              "type": "string",
              "default": "1",
              "enum": [
                "0",
                "1"
              ]
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "arrivalTime",
        "departureTime",
        "hasStop",
        "hasTrip",
        "stopSequence"
      ]
    }
  ],
  "Stream": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Stream.schema.json",
      "title": "Stream",
      "definitions": {
        "Stream": {
          "$id": "Stream",
          "description": "",
          "type": "object",
          "properties": {
            "consumingApplicationId": {
              "type": "string"
            },
            "producingApplicationId": {
              "type": "string"
            },
            "granulatiry": {
              "$ref": "#/definitions/Granularity"
            },
            "outputFormat": {
              "type": "string"
            },
            "collectionPeriod": {
              "$ref": "#/definitions/TimePeriod"
            },
            "performanceIndicatorSpecification": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PerformanceIndicatorSpecification"
              },
              "minItems": 0
            },
            "monitoredInstancesCriteria": {
              "$ref": "#/definitions/MonitoredInstancesCriteria"
            },
            "monitoredClassCriteria": {
              "$ref": "#/definitions/MonitoredClassCriteria"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Addressable.schema.json#/definitions/Addressable"
            },
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "Street": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Street.schema.json",
      "title": "Street",
      "definitions": {
        "Street": {
          "$id": "#Street",
          "description": "A street is a road in a city or locality that has buildings that are usually close together along one or both sides",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the Street"
            },
            "name": {
              "type": "string",
              "description": "The defined name of the street"
            },
            "streetType": {
              "type": "string",
              "description": "Alley, avenue, etc."
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/LocationCharacteristic.schema.json#LocationCharacteristic"
              }
            },
            "address": {
              "type": "array",
              "items": {
                "$ref": "../Common/AddressRef.schema.json#AddressRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "StreetSegment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StreetSegment.schema.json",
      "title": "StreetSegment",
      "definitions": {
        "StreetSegment": {
          "$id": "#StreetSegment",
          "description": "StreetSegment corresponds to a part of a street referenced by a number or a set of number. Sometimes a suffix is added.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the Street Segment"
            },
            "number": {
              "type": "string",
              "description": "number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
            },
            "numberLast": {
              "type": "string",
              "description": "the last number in a range of street numbers allocated to a property"
            },
            "numberLastSuffix": {
              "type": "string",
              "description": "the last street number suffix for a ranged address"
            },
            "numberSuffix": {
              "type": "string",
              "description": "the first street number suffix"
            },
            "address": {
              "$ref": "../Common/AddressRef.schema.json#AddressRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Streetlight": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/StreetLighting/Streetlight/schema.json",
      "title": "FIWARE - Street Lighting / Streetlight",
      "description": "A Street light",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Streetlight"
              ]
            },
            "areaServed": {
              "type": "string"
            },
            "circuit": {
              "type": "string"
            },
            "refStreetlightModel": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refStreetlightControlCabinet": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "status": {
              "type": "string",
              "enum": [
                "ok",
                "defectiveLamp",
                "columnIssue",
                "brokenLantern"
              ]
            },
            "powerState": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "low",
                "bootingUp"
              ]
            },
            "refDevice": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "refStreetlightGroup": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "dateLastLampChange": {
              "type": "string",
              "format": "date-time"
            },
            "dateLastSwitchingOn": {
              "type": "string",
              "format": "date-time"
            },
            "dateLastSwitchingOff": {
              "type": "string",
              "format": "date-time"
            },
            "controllingMethod": {
              "type": "string",
              "enum": [
                "group",
                "individual"
              ]
            },
            "dateServiceStarted": {
              "type": "string",
              "format": "date-time"
            },
            "image": {
              "type": "string",
              "format": "uri"
            },
            "description": {
              "type": "string"
            },
            "annotations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "locationCategory": {
              "type": "string",
              "enum": [
                "façade",
                "sidewalk",
                "pedestrianPath",
                "road",
                "playground",
                "park",
                "garden",
                "bridge",
                "tunnel",
                "parking",
                "centralIsland"
              ]
            },
            "laternHeight": {
              "type": "number",
              "minimum": 0
            },
            "illuminanceLevel": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "status"
      ]
    }
  ],
  "StreetlightControlCabinet": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/StreetLighting/StreetlightControlCabinet/schema.json",
      "title": "FIWARE - Street Lighting / Streetlight Control Cabinet",
      "description": "A Streetlight control cabinet",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StreetlightControlCabinet"
              ]
            },
            "areaServed": {
              "type": "string"
            },
            "serialNumber": {
              "type": "string"
            },
            "refStreetlightGroup": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "brandName": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            },
            "manufacturerName": {
              "type": "string"
            },
            "cupboardMadeOf": {
              "type": "string",
              "enum": [
                "plastic",
                "metal",
                "concrete",
                "other"
              ]
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "astronomicalClock",
                  "individualControl"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "compliantWith": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "annotations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "refDevice": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "dateServiceStarted": {
              "type": "string",
              "format": "date-time"
            },
            "dateLastProgramming": {
              "type": "string",
              "format": "date-time"
            },
            "nextActuationDeadline": {
              "type": "string",
              "format": "date-time"
            },
            "responsible": {
              "type": "string"
            },
            "workingMode": {
              "type": "string",
              "enum": [
                "automatic",
                "manual",
                "semiautomatic"
              ]
            },
            "description": {
              "type": "string"
            },
            "maximumPowerAvailable": {
              "type": "number",
              "minimum": 0
            },
            "energyConsumed": {
              "type": "number",
              "minimum": 0
            },
            "energyCost": {
              "type": "number",
              "minimum": 0
            },
            "reactiveEnergyConsumed": {
              "type": "number",
              "minimum": 0
            },
            "dateMeteringStarted": {
              "type": "string",
              "format": "date-time"
            },
            "lastMeterReading": {
              "type": "number",
              "minimum": 0
            },
            "meterReadingPeriod": {
              "type": "number",
              "minimum": 0
            },
            "frequency": {
              "type": "number",
              "minimum": 0
            },
            "totalActivePower": {
              "type": "number",
              "minimum": 0
            },
            "totalReactivePower": {
              "type": "number",
              "minimum": 0
            },
            "activePower": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0
                },
                "S": {
                  "type": "number",
                  "minimum": 0
                },
                "T": {
                  "type": "number",
                  "minimum": 0
                }
              }
            },
            "reactivePower": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0
                },
                "S": {
                  "type": "number",
                  "minimum": 0
                },
                "T": {
                  "type": "number",
                  "minimum": 0
                }
              }
            },
            "powerFactor": {
              "type": "number",
              "minimum": -1,
              "maximum": 1
            },
            "cosPhi": {
              "type": "number",
              "minimum": -1,
              "maximum": 1
            },
            "intensity": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0
                },
                "S": {
                  "type": "number",
                  "minimum": 0
                },
                "T": {
                  "type": "number",
                  "minimum": 0
                }
              }
            },
            "voltage": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0
                },
                "S": {
                  "type": "number",
                  "minimum": 0
                },
                "T": {
                  "type": "number",
                  "minimum": 0
                }
              }
            },
            "thdrVoltage": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                "S": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                "T": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            "thdrIntensity": {
              "type": "object",
              "properties": {
                "R": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                "S": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                "T": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location",
        "refStreetlightGroup",
        "workingMode"
      ]
    }
  ],
  "StreetlightGroup": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/StreetLighting/Streetlight/schema.json",
      "title": "FIWARE - Street Lighting / Streetlight Group",
      "description": "A Street light group",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StreetlightGroup"
              ]
            },
            "areaServed": {
              "type": "string"
            },
            "powerState": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "low",
                "bootingUp"
              ]
            },
            "refStreetlightControlCabinet": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "dateLastSwitchingOn": {
              "type": "string",
              "format": "date-time"
            },
            "dateLastSwitchingOff": {
              "type": "string",
              "format": "date-time"
            },
            "switchingOnHours": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "oneOf": [
                      {
                        "format": "date"
                      },
                      {
                        "format": "ext-date-yearless"
                      }
                    ]
                  },
                  "to": {
                    "type": "string",
                    "oneOf": [
                      {
                        "format": "date"
                      },
                      {
                        "format": "ext-date-yearless"
                      }
                    ]
                  },
                  "hours": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "from",
                  "to",
                  "hours"
                ]
              }
            },
            "switchingMode": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "night-ON",
                  "night-OFF",
                  "night-LOW",
                  "always-ON",
                  "day-ON",
                  "day-OFF",
                  "day-LOW"
                ]
              }
            },
            "illuminanceLevel": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "activeProgramId": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "annotations": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "refStreetlight": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "StreetlightModel": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/StreetLighting/Streetlight/schema.json",
      "title": "FIWARE - Street Lighting / Streetlight model",
      "description": "A Street light model",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "StreetlightModel"
              ]
            },
            "name": {
              "type": "string"
            },
            "alternateName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "maxPowerConsumption": {
              "type": "number",
              "minimum": 0
            },
            "minPowerConsumption": {
              "type": "number",
              "minimum": 0
            },
            "columnBrandName": {
              "type": "string"
            },
            "columnModelName": {
              "type": "string"
            },
            "columnManufacturerName": {
              "type": "string"
            },
            "columnMadeOf": {
              "type": "string",
              "enum": [
                "steel",
                "aluminium",
                "wood",
                "other"
              ]
            },
            "columnColor": {
              "type": "string"
            },
            "lanternModelName": {
              "type": "string"
            },
            "lanternBrandName": {
              "type": "string"
            },
            "lanternManufacturerName": {
              "type": "string"
            },
            "lanternWeight": {
              "type": "number",
              "minimum": 0
            },
            "lampModelName": {
              "type": "string"
            },
            "lampBrandName": {
              "type": "string"
            },
            "lampManufacturerName": {
              "type": "string"
            },
            "lampWeight": {
              "type": "string"
            },
            "workingLife": {
              "type": "number",
              "minimum": 0
            },
            "lampTechnology": {
              "type": "string",
              "enum": [
                "LED",
                "LPS",
                "HPS"
              ]
            },
            "colorTemperature": {
              "type": "number",
              "minimum": 0
            },
            "colorRenderingIndex": {
              "type": "number"
            },
            "luminousFlux": {
              "type": "number",
              "minimum": 0
            },
            "powerConsumption": {
              "type": "number",
              "minimum": 0
            },
            "compliantWith": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "image": {
              "type": "string",
              "format": "uri"
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "postTop",
                  "bollard",
                  "lamppost",
                  "lightTower",
                  "flashingBeacon",
                  "sideEntry",
                  "signLight",
                  "ornamentalLantern"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name"
      ]
    }
  ],
  "StringArrayCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StringArrayCharacteristic.schema.json",
      "title": "StringArrayCharacteristic",
      "definitions": {
        "StringArrayCharacteristic": {
          "$id": "#StringArrayCharacteristic",
          "description": "A characteristic which the value is a string array",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "StringArrayCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StringArrayCharacteristicValueSpecification.schema.json",
      "title": "StringArrayCharacteristicValueSpecification",
      "definitions": {
        "StringArrayCharacteristicValueSpecification": {
          "$id": "#StringArrayCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is an array of strings",
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "StringCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StringCharacteristic.schema.json",
      "title": "StringCharacteristic",
      "definitions": {
        "StringCharacteristic": {
          "$id": "#StringCharacteristic",
          "description": "A characteristic which value is a string",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "StringCharacteristicValueSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "StringCharacteristicValueSpecification.schema.json",
      "title": "StringCharacteristicValueSpecification",
      "definitions": {
        "StringCharacteristicValueSpecification": {
          "$id": "#StringCharacteristicValueSpecification",
          "description": "A specification for a characteristic for which the value is a string",
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "Value of the characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
            }
          ]
        }
      }
    }
  ],
  "SubAddress": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SubAddress.schema.json",
      "title": "SubAddress",
      "definitions": {
        "SubAddress": {
          "$id": "#SubAddress",
          "description": "Representation of a SubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
          "type": "object",
          "properties": {
            "buildingName": {
              "type": "string",
              "description": "Allows for buildings that have well-known names"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique ID for this SubAddress"
            },
            "levelNumber": {
              "type": "string",
              "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
            },
            "levelType": {
              "type": "string",
              "description": "Describes level types within a building"
            },
            "name": {
              "type": "string",
              "description": "Name of the subAddress to identify it with a meaningful identification"
            },
            "privateStreetName": {
              "type": "string",
              "description": "Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
            },
            "privateStreetNumber": {
              "type": "string",
              "description": "Private streets numbers internal to a private street"
            },
            "subUnitNumber": {
              "type": "string",
              "description": "The discriminator of the subunit, often just a simple number e.g. FLAT 5, may also be a range"
            },
            "subUnitType": {
              "type": "string",
              "description": "The type of subunit, such as BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF"
            },
            "subAddressType": {
              "type": "string",
              "description": "The type of subaddress : it can be a subunit or a private street"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SupportedLanguages": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SupportedLanguages.schema.json",
      "title": "SupportedLanguages",
      "definitions": {
        "SupportedLanguages": {
          "$id": "#SupportedLanguages",
          "type": "string",
          "description": "Enumeration for the supported languages in JADL multilingual support",
          "enum": [
            "EN",
            "ZH"
          ]
        }
      }
    }
  ],
  "SupportingResource": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SupportingResource.schema.json",
      "title": "SupportingResource",
      "definitions": {
        "SupportingResource": {
          "$id": "#SupportingResource",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the supporting resource"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the supporting resource"
            },
            "name": {
              "type": "string",
              "description": "Name of the resource supporting the service"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SupportingService": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SupportingService.schema.json",
      "title": "SupportingService",
      "definitions": {
        "SupportingService": {
          "$id": "#SupportingService",
          "description": "A collection of services that support this service (links between CFS -> RFS)",
          "type": "object",
          "properties": {
            "category": {
              "type": "string",
              "description": "Category of the supporting service"
            },
            "href": {
              "type": "string",
              "description": "Reference of the supporting service"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the supporting service"
            },
            "name": {
              "type": "string",
              "description": "Name of the supporting service"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "SwitchXDRAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "SwitchXDRAnalytics.schema.json",
      "title": "SwitchXDRAnalytics",
      "definitions": {
        "SwitchXDRAnalytics": {
          "$id": "#SwitchXDRAnalytics",
          "type": "object",
          "properties": {
            "eventStartTime": {
              "type": "string",
              "format": "date-time",
              "description": "Call start charging time\r\nFor SMS - START_TIME = SMS TRANSFER TIME"
            },
            "eventEndTime": {
              "type": "string",
              "format": "date-time",
              "description": "Call end charging time"
            },
            "eventAnswerTime": {
              "type": "string",
              "format": "date-time",
              "description": "Call answer time.\r\nFor SMS - ANSWER_TIME = SMS DELIVERY TIME"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "TargetEntityRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetEntityRef.schema.json",
      "title": "TargetEntityRef",
      "definitions": {
        "TargetEntityRef": {
          "$id": "#TargetEntityRef",
          "description": "The entity which will be changed or configured while the change request is executed.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "The description to the related party."
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the target entity."
            },
            "id": {
              "type": "string",
              "description": "Identifier of target entity"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TargetEntitySchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetEntitySchema.schema.json",
      "title": "TargetEntitySchema",
      "definitions": {
        "TargetEntitySchema": {
          "$id": "#TargetEntitySchema",
          "type": "object",
          "description": "The reference object to the schema and type of target entity which is described by a specification",
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target entity"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "This field provides a link to the schema describing the target entity"
            }
          },
          "required": [
            "@type",
            "@schemaLocation"
          ]
        }
      }
    }
  ],
  "TargetPerformanceIndicatorSpecificationSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetPerformanceIndicatorSpecificationSchema.schema.json",
      "title": "TargetPerformanceIndicatorSpecificationSchema",
      "definitions": {
        "TargetPerformanceIndicatorSpecificationSchema": {
          "$id": "#TargetPerformanceIndicatorSpecificationSchema",
          "type": "object",
          "description": "The reference object to the schema and type of target performance indicator specification which is described by performance indicator specification",
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target product"
            },
            "@schemaLocation": {
              "type": "string",
              "format": "uri",
              "description": "This field provides a link to the schema describing the target performance indicator specification"
            }
          },
          "required": [
            "@type",
            "@schemaLocation"
          ]
        }
      }
    }
  ],
  "TargetProductSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetProductSchema.schema.json",
      "title": "TargetProductSchema",
      "definitions": {
        "TargetProductSchema": {
          "$id": "#TargetProductSchema",
          "type": "object",
          "description": "The reference object to the schema and type of target product which is described by product specification",
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target product"
            },
            "@schemaLocation": {
              "type": "string",
              "format": "uri",
              "description": "This field provides a link to the schema describing the target product"
            }
          },
          "required": [
            "@type",
            "@schemaLocation"
          ]
        }
      }
    }
  ],
  "TargetResourceSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetResourceSchema.schema.json",
      "title": "TargetResourceSchema",
      "definitions": {
        "TargetResourceSchema": {
          "$id": "#TargetResourceSchema",
          "type": "object",
          "description": "The reference object to the schema and type of target resource which is described by resource specification",
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target resource"
            },
            "@schemaLocation": {
              "type": "string",
              "format": "uri",
              "description": "This field provides a link to the schema describing the target resource"
            }
          },
          "required": [
            "@type",
            "@schemaLocation"
          ]
        }
      }
    }
  ],
  "TargetServiceSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetServiceSchema.schema.json",
      "title": "TargetServiceSchema",
      "definitions": {
        "TargetServiceSchema": {
          "$id": "#TargetServiceSchema",
          "type": "object",
          "description": "The reference object to the schema and type of target service which is described by service specification",
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target service"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "This field provides a link to the schema describing the target service"
            }
          },
          "required": [
            "@type",
            "@schemaLocation"
          ]
        }
      }
    }
  ],
  "TargetShipmentSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TargetShipmentSchema.schema.json",
      "title": "TargetShipmentSchema",
      "definitions": {
        "TargetShipmentSchema": {
          "$id": "#TargetShipmentSchema",
          "type": "object",
          "description": "The reference object to the schema and type of target shipment which is described by shipment specification",
          "required": [
            "@type",
            "@schemaLocation"
          ],
          "properties": {
            "@type": {
              "type": "string",
              "description": "Class type of the target shipment"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "This field provides a link to the schema describing the target shipment\r\n"
            }
          }
        }
      }
    }
  ],
  "Task": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Task.schema.json",
      "title": "Task",
      "definitions": {
        "Task": {
          "$id": "#Task",
          "description": "A step or task along in the process of implementation a Change Request.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "The description of the task."
            },
            "name": {
              "type": "string",
              "description": "The name of the task."
            },
            "state": {
              "type": "string",
              "description": "The state of the task."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TaskFlow": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaskFlow.schema.json",
      "title": "TaskFlow",
      "definitions": {
        "TaskFlow": {
          "$id": "#TaskFlow",
          "type": "object",
          "properties": {
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/ChannelRef.schema.json#ChannelRef"
              },
              "description": "A list of channel(s) where this taskFlow is executed"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "A list of characteristic(s) associated to this taskFlow"
            },
            "completionMethod": {
              "type": "string",
              "description": "TaskFlow completion method."
            },
            "href": {
              "type": "string",
              "description": "Reference of the taskFlow"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the taskFlow"
            },
            "isMandatory": {
              "type": "boolean",
              "description": "Indicate mandatory TaskFlow."
            },
            "priority": {
              "type": "integer",
              "description": "TaskFlow priority."
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
              },
              "description": "A list of related entity(ies) to this taskFlow"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A list of related party(ies) to this task"
            },
            "state": {
              "$ref": "../Common/TaskFlowStateType.schema.json#TaskFlowStateType",
              "description": "State of the taskFlow: described in the state machine diagram."
            },
            "taskFlowRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/TaskFlowRelationship.schema.json#TaskFlowRelationship"
              },
              "description": "A list of taskFlows related to this taskFlow"
            },
            "taskFlowSpecification": {
              "type": "string",
              "description": "Specification of the taskFlow."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TaskFlowRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaskFlowRef.schema.json",
      "title": "TaskFlowRef",
      "definitions": {
        "TaskFlowRef": {
          "$id": "#TaskFlowRef",
          "type": "object",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TaskFlowRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaskFlowRelationship.schema.json",
      "title": "TaskFlowRelationship",
      "definitions": {
        "TaskFlowRelationship": {
          "$id": "#TaskFlowRelationship",
          "description": "Describes relationship between taskFlow",
          "type": "object",
          "required": [
            "relationshipType",
            "taskFlow"
          ],
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "The type of taskFlow relationship (requires, triggers, etc.)"
            },
            "taskFlow": {
              "description": "The taskFlow being referred to",
              "$ref": "../Common/TaskFlowRef.schema.json#TaskFlowRef"
            }
          }
        }
      }
    }
  ],
  "TaskFlowStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaskFlowStateType.schema.json",
      "title": "TaskFlowStateType",
      "definitions": {
        "TaskFlowStateType": {
          "$id": "#TaskFlowStateType",
          "type": "string",
          "description": "Valid values for the lifecycle state of the taskFlow",
          "enum": [
            "new",
            "active",
            "hold",
            "cancelled",
            "completed"
          ]
        }
      }
    }
  ],
  "TaskStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaskStateType.schema.json",
      "title": "TaskStateType",
      "definitions": {
        "TaskStateType": {
          "$id": "#TaskStateType",
          "type": "string",
          "description": "Possible values for the state of a task",
          "enum": [
            "accepted",
            "terminatedWithError",
            "inProgress",
            "done"
          ]
        }
      }
    }
  ],
  "TaxDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaxDefinition.schema.json",
      "title": "TaxDefinition",
      "definitions": {
        "TaxDefinition": {
          "$id": "#TaxDefinition",
          "type": "object",
          "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. There are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California,…).",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the tax."
            },
            "name": {
              "type": "string",
              "description": "Tax name."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which the tax applies, might be set for example if it is known that the jurisdiction will cease to apply the tax after a certain date."
            },
            "jurisdictionName": {
              "type": "string",
              "description": "Name of the jurisdiction that levies the tax",
              "examples": [
                "USA",
                "Los Angeles"
              ]
            },
            "jurisdictionLevel": {
              "type": "string",
              "description": "Level of the jurisdiction that levies the tax",
              "examples": [
                "Country",
                "City"
              ]
            },
            "taxType": {
              "type": "string",
              "description": "Type of the tax.",
              "examples": [
                "VAT",
                "Sales Tax"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "TaxExemptionCertificate": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaxExemptionCertificate.schema.json",
      "title": "TaxExemptionCertificate",
      "definitions": {
        "TaxExemptionCertificate": {
          "$id": "#TaxExemptionCertificate",
          "type": "object",
          "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Identifier of the tax exemption within list of the exemptions"
            },
            "taxDefinition": {
              "type": "array",
              "items": {
                "$ref": "../Common/TaxDefinition.schema.json#TaxDefinition"
              },
              "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period of time for which the exemption is valid"
            },
            "certificateNumber": {
              "type": "string",
              "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
            },
            "issuingJurisdiction": {
              "type": "string",
              "description": "Name of the jurisdiction that issued the exemption",
              "examples": [
                "USA",
                "Los Angeles"
              ]
            },
            "reason": {
              "type": "string",
              "description": "Reason for the tax exemption"
            },
            "attachment": {
              "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue",
              "description": "The actual certificate contents, if such is supplied by the issuing jurisdiction"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "TaxItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TaxItem.schema.json",
      "title": "TaxItem",
      "definitions": {
        "TaxItem": {
          "$id": "#TaxItem",
          "description": "A tax item is created for each tax rate and tax type used in the bill.",
          "type": "object",
          "properties": {
            "taxAmount": {
              "$ref": "../Common/Money.schema.json#Money",
              "description": "Amount of tax expressed in the given currency"
            },
            "taxCategory": {
              "type": "string",
              "description": "Tax category"
            },
            "taxRate": {
              "type": "number",
              "format": "float",
              "description": "Applied rate of the tax"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Template": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Template.schema.json",
      "title": "Template",
      "definitions": {
        "Template": {
          "$id": "#Template",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "TemplateRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TemplateRef.schema.json",
      "title": "TemplateRef",
      "definitions": {
        "TemplateRef": {
          "$id": "#TemplateRef",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TerminationError": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TerminationError.schema.json",
      "title": "TerminationError",
      "definitions": {
        "TerminationError": {
          "$id": "#TerminationError",
          "description": "This indicates an error that caused a qualificationItem to be terminated.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the termination error"
            },
            "value": {
              "type": "string",
              "description": "Text to describe the termination error - for example: Unable to proceed to qualification because incomplete information provided"
            }
          }
        }
      }
    }
  ],
  "TestAgreement": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestAgreement.schema.json",
      "title": "TestAgreement",
      "definitions": {
        "TestAgreement": {
          "$id": "#TestAgreement",
          "type": "object",
          "oneOf": [
            {
              "required": [
                "terms"
              ]
            },
            {
              "required": [
                "url"
              ]
            }
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The agreement name",
              "example": "My Agreement"
            },
            "terms": {
              "type": "string",
              "description": "The terms of the agreement",
              "example": "<EULA>"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "The agreement URL",
              "example": "http://myagreement.com"
            }
          }
        }
      }
    }
  ],
  "TestCase": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCase.schema.json",
      "title": "TestCase",
      "definitions": {
        "TestCase": {
          "$id": "#TestCase",
          "type": "object",
          "description": "A managed test case resource",
          "required": [
            "testCaseDefinition"
          ],
          "properties": {
            "testCaseDefinition": {
              "$ref": "../Common/TestCaseDefinition.schema.json#TestCaseDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestCaseDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseDefinition.schema.json",
      "title": "TestCaseDefinition",
      "definitions": {
        "TestCaseDefinition": {
          "$id": "#TestCaseDefinition",
          "type": "object",
          "description": "Test case definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestCaseExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseExecution.schema.json",
      "title": "TestCaseExecution",
      "definitions": {
        "TestCaseExecution": {
          "$id": "#TestCaseExecution",
          "type": "object",
          "description": "REST resource for the test case execution lifecycle",
          "properties": {
            "testCase": {
              "$ref": "../Common/TestCaseRef.schema.json#TestCaseRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/TestExecution.schema.json#TestExecution"
            }
          ]
        }
      }
    }
  ],
  "TestCaseExecutionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseExecutionRef.schema.json",
      "title": "TestCaseExecutionRef",
      "definitions": {
        "TestCaseExecutionRef": {
          "$id": "#TestCaseExecutionRef",
          "type": "object",
          "description": "A reference to a test case execution",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestCaseExecutionRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseExecutionRefOrValue.schema.json",
      "title": "TestCaseExecutionRefOrValue",
      "definitions": {
        "TestCaseExecutionRefOrValue": {
          "$id": "#TestCaseExecutionRefOrValue",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/TestCaseExecution.schema.json#TestCaseExecution"
            },
            {
              "$ref": "../Common/TestCaseExecutionRef.schema.json#TestCaseExecutionRef"
            }
          ]
        }
      }
    }
  ],
  "TestCaseRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseRef.schema.json",
      "title": "TestCaseRef",
      "definitions": {
        "TestCaseRef": {
          "$id": "#TestCaseRef",
          "type": "object",
          "description": "A reference to a managed test case artifact",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestCaseResult": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseResult.schema.json",
      "title": "TestCaseResult",
      "definitions": {
        "TestCaseResult": {
          "$id": "#TestCaseResult",
          "type": "object",
          "description": "A managed test case result resource",
          "required": [
            "testCaseResultDefinition",
            "testExecution"
          ],
          "properties": {
            "testCaseResultDefinition": {
              "$ref": "../Common/TestCaseResultDefinition.schema.json#TestCaseResultDefinition"
            },
            "testExecution": {
              "$ref": "../Common/TestCaseExecutionRefOrValue.schema.json#TestCaseExecutionRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "TestCaseResultDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestCaseResultDefinition.schema.json",
      "title": "TestCaseResultDefinition",
      "definitions": {
        "TestCaseResultDefinition": {
          "$id": "#TestCaseResultDefinition",
          "type": "object",
          "description": "Test case result definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestContact": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestContact.schema.json",
      "title": "TestContact",
      "definitions": {
        "TestContact": {
          "$id": "#TestContact",
          "type": "object",
          "required": [
            "name",
            "email"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the contact",
              "example": "Joe Smith"
            },
            "email": {
              "type": "string",
              "format": "email",
              "description": "The email address of the contact",
              "example": "joe.smith@mycompany.com"
            }
          }
        }
      }
    }
  ],
  "TestDataInstance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataInstance.schema.json",
      "title": "TestDataInstance",
      "definitions": {
        "TestDataInstance": {
          "$id": "#TestDataInstance",
          "type": "object",
          "description": "A managed test data instance resource",
          "required": [
            "testDataInstanceDefinition"
          ],
          "properties": {
            "testDataInstanceDefinition": {
              "$ref": "../Common/TestDataInstanceDefinition.schema.json#TestDataInstanceDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestDataInstanceDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataInstanceDefinition.schema.json",
      "title": "TestDataInstanceDefinition",
      "definitions": {
        "TestDataInstanceDefinition": {
          "$id": "#TestDataInstanceDefinition",
          "type": "object",
          "description": "Test data instance definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestDataInstanceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataInstanceRef.schema.json",
      "title": "TestDataInstanceRef",
      "definitions": {
        "TestDataInstanceRef": {
          "$id": "#TestDataInstanceRef",
          "type": "object",
          "description": "A reference to a managed test data instance resource",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestDataSchema": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataSchema.schema.json",
      "title": "TestDataSchema",
      "definitions": {
        "TestDataSchema": {
          "$id": "#TestDataSchema",
          "type": "object",
          "description": "A managed test data schema resource",
          "required": [
            "testDataSchemaDefinition"
          ],
          "properties": {
            "testDataSchemaDefinition": {
              "$ref": "../Common/TestDataSchemaDefinition.schema.json#TestDataSchemaDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestDataSchemaDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataSchemaDefinition.schema.json",
      "title": "TestDataSchemaDefinition",
      "definitions": {
        "TestDataSchemaDefinition": {
          "$id": "#TestDataSchemaDefinition",
          "type": "object",
          "description": "Test data schema definition",
          "properties": {
            "code": {
              "type": "string",
              "description": "The test data schema code",
              "example": "<definition of valid symbols for test data instances>"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestDataSchemaRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestDataSchemaRef.schema.json",
      "title": "TestDataSchemaRef",
      "definitions": {
        "TestDataSchemaRef": {
          "$id": "#TestDataSchemaRef",
          "type": "object",
          "description": "A reference to a managed test data schema resource",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestEnvironmentAllocationExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestEnvironmentAllocationExecution.schema.json",
      "title": "TestEnvironmentAllocationExecution",
      "definitions": {
        "TestEnvironmentAllocationExecution": {
          "$id": "#TestEnvironmentAllocationExecution",
          "type": "object",
          "description": "REST resource for test environment allocation lifecycle",
          "required": [
            "resourceManagerUrl"
          ],
          "properties": {
            "abstractEnvironment": {
              "$ref": "../Common/AbstractEnvironmentRef.schema.json#AbstractEnvironmentRef"
            },
            "testScenario": {
              "$ref": "../Common/TestScenarioRef.schema.json#TestScenarioRef"
            },
            "concreteResourceMapping": {
              "type": "array",
              "items": {
                "$ref": "../Resource/ConcreteResourceMapping.schema.json#ConcreteResourceMapping"
              }
            },
            "resourceManagerUrl": {
              "type": "string",
              "format": "uri",
              "example": "https://myserver.com/resourceManager"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Execution.schema.json#Execution"
            }
          ]
        }
      }
    }
  ],
  "TestEnvironmentProvisioningExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestEnvironmentProvisioningExecution.schema.json",
      "title": "TestEnvironmentProvisioningExecution",
      "definitions": {
        "TestEnvironmentProvisioningExecution": {
          "$id": "#TestEnvironmentProvisioningExecution",
          "type": "object",
          "description": "REST resource for test environment provisioning lifecycle",
          "required": [
            "testEnvironmentAllocationExecution"
          ],
          "properties": {
            "testEnvironmentAllocationExecution": {
              "$ref": "../Common/TestEnvironmentAllocationExecution.schema.json#TestEnvironmentAllocationExecution"
            },
            "provisioningArtifact": {
              "type": "array",
              "items": {
                "$ref": "../Common/ProvisioningArtifactRef.schema.json#ProvisioningArtifactRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Execution.schema.json#Execution"
            }
          ]
        }
      }
    }
  ],
  "TestExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestExecution.schema.json",
      "title": "TestExecution",
      "definitions": {
        "TestExecution": {
          "$id": "#TestExecution",
          "type": "object",
          "description": "The base for all Test Execution resources",
          "required": [
            "testEnvironmentProvisioningExecution"
          ],
          "properties": {
            "testEnvironmentProvisioningExecution": {
              "$ref": "../Common/TestEnvironmentProvisioningExecution.schema.json#TestEnvironmentProvisioningExecution"
            },
            "testDataInstance": {
              "type": "array",
              "items": {
                "$ref": "../Common/TestDataInstanceRef.schema.json#TestDataInstanceRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Execution.schema.json#Execution"
            }
          ]
        }
      }
    }
  ],
  "TestExecutionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestExecutionRef.schema.json",
      "title": "TestExecutionRef",
      "definitions": {
        "TestExecutionRef": {
          "$id": "#TestExecutionRef",
          "type": "object",
          "description": "A reference to an execution of a test activity",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestInfo": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestInfo.schema.json",
      "definitions": {
        "TestInfo": {
          "$id": "#TestInfo",
          "type": "object",
          "description": "General information about the artifact",
          "required": [
            "description",
            "version"
          ],
          "properties": {
            "description": {
              "$ref": "Multilingual.schema.json#/definitions/Multilingual"
            },
            "version": {
              "properties": {
                "description": {
                  "$ref": "Multilingual.schema.json#/definitions/Multilingual",
                  "description": "A longer description of the artifact. Should be different from the title. GitHub-flavored Markdown is allowed."
                },
                "versionNumber": {
                  "type": "string",
                  "description": "A version number of the artifact"
                }
              }
            },
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "Attribute.schema.json#/definitions/Attribute"
              }
            },
            "termsOfService": {
              "type": "string",
              "description": "The terms of service for the artifact"
            },
            "contact": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "license": {
              "$ref": "License.schema.json#/definitions/License"
            }
          }
        }
      }
    }
  ],
  "TestMeasure": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestMeasure.schema.json",
      "title": "TestMeasure",
      "definitions": {
        "TestMeasure": {
          "$id": "#TestMeasure",
          "description": "A TestMeasure specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status",
          "type": "object",
          "properties": {
            "accuracy": {
              "type": "number",
              "format": "float",
              "description": "The number of digits of accuracy captured for associated Metrics"
            },
            "captureDateTime": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time that the metric was captured"
            },
            "captureMethod": {
              "type": "string",
              "description": "The method used to capture the Metrics (This may be replaced by a set of entities similar to the Performance Monitoring Ref)"
            },
            "metricDescription": {
              "type": "string",
              "description": "Brief description of the metric"
            },
            "metricHref": {
              "type": "string",
              "description": "Hyperlink to access a metric for detail information"
            },
            "metricName": {
              "type": "string",
              "description": "The name of the metric"
            },
            "ruleViolation": {
              "type": "array",
              "description": "A list of rules that were violated in this test measure",
              "items": {
                "$ref": "../Service/MeasureThresholdRuleViolation.schema.json#MeasureThresholdRuleViolation"
              }
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "The unit of measure for the metric values, such as meters, cubic yards, kilograms [ISO 1000]."
            },
            "value": {
              "description": "The value of Metric in the test. This also could be a document to record all values captured during the service test",
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "TestMeasureDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestMeasureDefinition.schema.json",
      "title": "TestMeasureDefinition",
      "definitions": {
        "TestMeasureDefinition": {
          "$id": "#TestMeasureDefinition",
          "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status",
          "type": "object",
          "properties": {
            "captureFrequency": {
              "type": "string",
              "description": "The frequency of capture for the metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
            },
            "captureMethod": {
              "type": "string",
              "description": "The method used to capture the Metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
            },
            "capturePeriod": {
              "$ref": "../Common/Duration.schema.json#Duration",
              "description": "A period of the capture"
            },
            "metricDescription": {
              "type": "string",
              "description": "Brief description of the metric"
            },
            "metricHref": {
              "type": "string",
              "description": "Hyperlink to access a metric for detail information"
            },
            "metricName": {
              "type": "string",
              "description": "The name of a metric that in the test measure"
            },
            "name": {
              "type": "string",
              "description": "The name of the TestMeasureDefinition"
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Name of a service test specification"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The time period for which this definition is valid"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the Metric value can take on, such as numeric, text, and so forth"
            },
            "thresholdRule": {
              "type": "array",
              "description": "The rule(s) associated with the measure threshold",
              "items": {
                "$ref": "../Service/MetricDefMeasureThresholdRule.schema.json#MetricDefMeasureThresholdRule"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "TestResourceAPI": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestResourceAPI.schema.json",
      "title": "TestResourceAPI",
      "definitions": {
        "TestResourceAPI": {
          "$id": "#TestResourceAPI",
          "type": "object",
          "description": "A managed test resource API resource",
          "required": [
            "testResourceAPIDefinition"
          ],
          "properties": {
            "testResourceAPIDefinition": {
              "$ref": "../Common/TestResourceAPIDefinition.schema.json#TestResourceAPIDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestResourceAPIDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestResourceAPIDefinition.schema.json",
      "title": "TestResourceAPIDefinition",
      "definitions": {
        "TestResourceAPIDefinition": {
          "$id": "#TestResourceAPIDefinition",
          "type": "object",
          "description": "Test resource API definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestResourceAPIRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestResourceAPIRef.schema.json",
      "title": "TestResourceAPIRef",
      "definitions": {
        "TestResourceAPIRef": {
          "$id": "#TestResourceAPIRef",
          "type": "object",
          "description": "A reference to a managed test resource API resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestResult": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestResult.schema.json",
      "title": "TestResult",
      "definitions": {
        "TestResult": {
          "$id": "#TestResult",
          "type": "object",
          "description": "Base schema for test results",
          "required": [
            "testExecution"
          ],
          "properties": {
            "testExecution": {
              "$ref": "../Common/TestExecution.schema.json#TestExecution"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "TestScenario": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestScenario.schema.json",
      "title": "TestScenario",
      "definitions": {
        "TestScenario": {
          "$id": "#TestScenario",
          "type": "object",
          "description": "A managed test scenario resource",
          "required": [
            "testScenarioDefinition"
          ],
          "properties": {
            "testScenarioDefinition": {
              "$ref": "../Common/TestScenarioDefinition.schema.json#TestScenarioDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestScenarioDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestScenarioDefinition.schema.json",
      "title": "TestScenarioDefinition",
      "definitions": {
        "TestScenarioDefinition": {
          "$id": "#TestScenarioDefinition",
          "type": "object",
          "description": "Test scenario definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestScenarioRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestScenarioRef.schema.json",
      "title": "TestScenarioRef",
      "definitions": {
        "TestScenarioRef": {
          "$id": "#TestScenarioRef",
          "type": "object",
          "description": "A reference to a managed test scenario resource",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestSuite": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuite.schema.json",
      "title": "TestSuite",
      "definitions": {
        "TestSuite": {
          "$id": "#TestSuite",
          "type": "object",
          "description": "A managed test suite resource",
          "required": [
            "testSuiteDefinition"
          ],
          "properties": {
            "testSuiteDefinition": {
              "$ref": "../Common/TestSuiteDefinition.schema.json#TestSuiteDefinition"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/ManagedArtifact.schema.json#ManagedArtifact"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteDefinition.schema.json",
      "title": "TestSuiteDefinition",
      "definitions": {
        "TestSuiteDefinition": {
          "$id": "#TestSuiteDefinition",
          "type": "object",
          "description": "Test suite definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteExecution": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteExecution.schema.json",
      "title": "TestSuiteExecution",
      "definitions": {
        "TestSuiteExecution": {
          "$id": "#TestSuiteExecution",
          "type": "object",
          "description": "REST resource for the test suite execution lifecycle",
          "properties": {
            "testSuite": {
              "$ref": "../Common/TestSuiteRef.schema.json#TestSuiteRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/TestExecution.schema.json#TestExecution"
            },
            {
              "$ref": "../Common/TestExecutionRef.schema.json#TestExecutionRef"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteExecutionRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteExecutionRef.schema.json",
      "title": "TestSuiteExecutionRef",
      "definitions": {
        "TestSuiteExecutionRef": {
          "$id": "#TestSuiteExecutionRef",
          "type": "object",
          "description": "A reference to a test suite execution",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteExecutionRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteExecutionRefOrValue.schema.json",
      "title": "TestSuiteExecutionRefOrValue",
      "definitions": {
        "TestSuiteExecutionRefOrValue": {
          "$id": "#TestSuiteExecutionRefOrValue",
          "type": "object",
          "allOf": [
            {
              "$ref": "../Common/TestSuiteExecution.schema.json#TestSuiteExecution"
            },
            {
              "$ref": "../Common/TestSuiteExecutionRef.schema.json#TestSuiteExecutionRef"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteRef.schema.json",
      "title": "TestSuiteRef",
      "definitions": {
        "TestSuiteRef": {
          "$id": "#TestSuiteRef",
          "type": "object",
          "description": "A reference to a managed test suite resource",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteResult": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteResult.schema.json",
      "title": "TestSuiteResult",
      "definitions": {
        "TestSuiteResult": {
          "$id": "#TestSuiteResult",
          "type": "object",
          "description": "A managed test case result resource",
          "required": [
            "testSuiteResultDefinition",
            "testExecution"
          ],
          "properties": {
            "testSuiteResultDefinition": {
              "$ref": "../Common/TestSuiteResultDefinition.schema.json#TestSuiteResultDefinition"
            },
            "testExecution": {
              "$ref": "../Common/TestSuiteExecutionRefOrValue.schema.json#TestSuiteExecutionRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Resource/ResourceEntity.schema.json#ResourceEntity"
            }
          ]
        }
      }
    }
  ],
  "TestSuiteResultDefinition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestSuiteResultDefinition.schema.json",
      "title": "TestSuiteResultDefinition",
      "definitions": {
        "TestSuiteResultDefinition": {
          "$id": "#TestSuiteResultDefinition",
          "type": "object",
          "description": "Test suite result definition",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Attachment.schema.json#Attachment"
            }
          ]
        }
      }
    }
  ],
  "TestVersion": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TestVersion.schema.json",
      "title": "TestVersion",
      "definitions": {
        "TestVersion": {
          "$id": "#TestVersion",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "example": "",
              "description": "A longer description of the artifact; should be different from the title; GitHub-flavored Markdown is allowed"
            },
            "versionNumber": {
              "type": "string",
              "description": "A version number of the artifact",
              "example": "1.0.12"
            }
          }
        }
      }
    }
  ],
  "ThingAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThingAnalytics.schema.json",
      "title": "ThingAnalytics",
      "definitions": {
        "ThingAnalytics": {
          "$id": "#ThingAnalytics",
          "type": "object",
          "properties": {
            "activationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date the thing was first used on the network"
            },
            "deactivationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date the thing was deactivated from the network"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "Threshold": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Threshold.schema.json",
      "title": "Threshold",
      "definitions": {
        "Threshold": {
          "type": "object",
          "description": "A threshold base entity containing threshold rules.This entity  is  mandatoryThis entity  is  extendableThis entity   does not generate Object Creation notifications (NA)This entity   generates Object Deletion notificationsThis entity   does not generate Object Discovery notifications (NA)This entity supports the Common Get Operation.This entity supports the Common Get Multiple Operation.This entity supports the Common Create Operation.This entity supports the Common Delete Operation.",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of the threshold"
            },
            "name": {
              "type": "string",
              "description": "A word, term, or phrase by which a Performance threshold is known and distinguished from other thresholds."
            },
            "thresholdRule": {
              "type": "array",
              "items": {
                "$ref": "../Common/ThresholdRule.schema.json#/definitions/ThresholdRule"
              },
              "description": "A Performance Threshold contains a set of Performance threshold rules of different conditions (Raise, Clear) and different severities"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "ThresholdCondition": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThresholdCondition.schema.json",
      "title": "ThresholdCondition",
      "definitions": {
        "ThresholdCondition": {
          "type": "string",
          "enum": [
            "Raise",
            "Clear"
          ]
        }
      }
    }
  ],
  "ThresholdJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThresholdJob.schema.json",
      "title": "ThresholdJob",
      "definitions": {
        "ThresholdJob": {
          "type": "object",
          "properties": {
            "adminState": {
              "type": "string",
              "enum": [
                0,
                2,
                1
              ]
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "executionState": {
              "type": "string"
            },
            "granularity": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "jobPriority": {
              "type": "integer",
              "format": "int32"
            },
            "lastModifiedTime": {
              "type": "string",
              "format": "date-time"
            },
            "monitoredObjectsCriteria": {
              "type": "string"
            },
            "performanceThreshold": {
              "type": "integer",
              "format": "int64"
            },
            "scheduleDefinition": {
              "type": "string"
            },
            "trackingRecord": {
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "ThresholdRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThresholdRef.schema.json",
      "title": "ThresholdRef",
      "definitions": {
        "ThresholdRef": {
          "$id": "#ThresholdRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "ThresholdRule": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThresholdRule.schema.json",
      "title": "ThresholdRule",
      "definitions": {
        "ThresholdRule": {
          "type": "object",
          "description": "ThresholdRule A base entity for concrete definition of thresholds.This datatype  is  abstract",
          "properties": {
            "measurement": {
              "$ref": "../Common/Measurement.schema.json#/definitions/Measurement"
            },
            "consequence": {
              "type": "array",
              "items": {
                "$ref": "Consequence.schema.json#/definitions/Consequence"
              },
              "description": "A threshold crossing or a threshold ceased to be crossing results in a Performance consequence."
            },
            "perfAlarmSpecThresholdCrossingDescription": {
              "type": "string",
              "description": "A specific description of the threshold crossing (intended to be populated e under the alarm under CrossedThreshold structure)."
            },
            "performanceAlarmSpecification": {
              "$ref": "../Resource/PerformanceAlarmSpecification.schema.json#/definitions/PerformanceAlarmSpecification"
            },
            "thresholdRuleCondition": {
              "type": "string",
              "description": "A concrete threshold may have two possible values: \\\"Raise\\\" - a threshold was crossed or \\\"Clear\\\" - a threshold ceased crossing"
            },
            "thresholdRuleName": {
              "type": "string",
              "description": "A word, term, or phrase by which a Performance threshold rule is known and distinguished from other threshold rules"
            },
            "thresholdRuleSeverity": {
              "type": "string",
              "description": "A threshold can be generated in different severity levels. A crossing for each level may require a different condition and possibly trigger a different consequence. The supported severity levels are equivalent to the possible severity level of alarms."
            }
          },
          "allOf": [
            {
              "$ref": "../EngagedParty/Rule.schema.json#Rule"
            }
          ]
        }
      }
    }
  ],
  "ThresholdType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ThresholdType.schema.json",
      "title": "ThresholdType",
      "definitions": {
        "ThresholdType": {
          "type": "string",
          "description": "The Threshold Type may be either LogicDefinition or PreDefined",
          "enum": [
            "LogicDefinition",
            "PreDefined"
          ]
        }
      }
    }
  ],
  "Ticket": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Ticket.schema.json",
      "title": "Ticket",
      "definitions": {
        "Ticket": {
          "$id": "#Ticket",
          "description": "A trouble ticket represents a record used for reporting and managing the resolution of resource problems",
          "type": "object",
          "properties": {
            "correlationId": {
              "type": "string",
              "description": "Additional identifier coming from an external system"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the trouble was discovered"
            },
            "description": {
              "type": "string",
              "description": "Description of the trouble"
            },
            "href": {
              "type": "string",
              "description": "Reference of the trouble ticket"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the trouble ticket"
            },
            "resolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the service was brought back to its original condition"
            },
            "severity": {
              "type": "string",
              "description": "The severity of the trouble. It can be for example : minor, major, critical"
            },
            "status": {
              "type": "string",
              "description": "The current status of the Trouble Ticket"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date of state change"
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason of state change"
            },
            "subStatus": {
              "type": "string",
              "description": "The current sub status of the Trouble Ticket"
            },
            "targetResolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Foreseen trouble resolution date"
            },
            "ticketType": {
              "type": "string",
              "description": "Type of trouble ticket"
            },
            "relatedObject": {
              "type": "array",
              "description": "Any object(s) associated with this trouble ticket",
              "items": {
                "$ref": "../Common/RelatedObject.schema.json#RelatedObject"
              }
            },
            "note": {
              "type": "array",
              "description": "Any note(s) associated with this trouble ticket",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "Any Party/Parties associated with this trouble ticket",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TicketRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TicketRelationship.schema.json",
      "title": "TicketRelationship",
      "definitions": {
        "TicketRelationship": {
          "$id": "#TicketRelationship",
          "type": "object",
          "description": "Represents a relationship between trouble tickets",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of the trouble ticket relationship can be isChiled, dependent etc..."
            },
            "product": {
              "$ref": "../Common/TroubleTicketRef.schema.json#TroubleTicketRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TimePeriod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TimePeriod.schema.json",
      "title": "TimePeriod",
      "definitions": {
        "TimePeriod": {
          "$id": "#TimePeriod",
          "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
          "type": "object",
          "properties": {
            "startDateTime": {
              "description": "Start of the time period, using IETC-RFC-3339 format",
              "type": "string",
              "format": "date-time",
              "examples": [
                "1985-04-12T23:20:50.52Z",
                "2018-09-21T09:13:16-07:00"
              ]
            },
            "endDateTime": {
              "description": "End of the time period, using IETC-RFC-3339 format",
              "type": "string",
              "format": "date-time",
              "examples": [
                "1985-04-12T23:20:50.52Z",
                "2018-09-21T09:13:16-07:00"
              ]
            }
          }
        }
      }
    }
  ],
  "TimeSlot": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TimeSlot.schema.json",
      "title": "TimeSlot",
      "definitions": {
        "TimeSlot": {
          "$id": "#TimeSlot",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the TimeSlot"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the TimeSlot"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity."
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Start date and end date of the timeSlot"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TokenCredential": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TokenCredential.schema.json",
      "title": "TokenCredential",
      "definitions": {
        "TokenCredential": {
          "$id": "#TokenCredential",
          "description": "A Credential based on a token.",
          "type": "object",
          "properties": {
            "login": {
              "type": "string",
              "description": "credential login"
            },
            "tokenCredential": {
              "type": "string",
              "description": "Token credential identifier"
            }
          },
          "allOf": [
            {
              "$ref": "../engagedParty/Credential.schema.json#Credential"
            }
          ]
        }
      }
    }
  ],
  "TokenizedCard": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TokenizedCard.schema.json",
      "title": "TokenizedCard",
      "definitions": {
        "TokenizedCard": {
          "$id": "#TokenizedCard",
          "description": "A Tokenized Card method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "brand": {
              "type": "string",
              "description": "Card brand. Might be used for display purposes",
              "examples": [
                "Visa",
                "MasterCard",
                "AmericanExpress"
              ]
            },
            "cardType": {
              "type": "string",
              "description": "Card type. Might be used for display purposes.",
              "examples": [
                "Credit",
                "Debit"
              ]
            },
            "lastFourDigits": {
              "type": "string",
              "description": "The last four digits of the credit card.",
              "examples": [
                "0000"
              ]
            },
            "tokenType": {
              "type": "string",
              "description": "Token type (e.g.: emv).",
              "examples": [
                "emv"
              ]
            },
            "token": {
              "type": "string",
              "description": "The token. A series of randomly generated numbers."
            },
            "issuer": {
              "type": "string",
              "description": "The entity that issued the token.",
              "examples": [
                "Visa",
                "Mastercard"
              ]
            },
            "expirationDate": {
              "type": "string",
              "description": "The tokenised card's expiration date.",
              "format": "date-time",
              "examples": [
                "2025-11-20T10:19:46+0000"
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "tokenizedCard"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "TokenizedCardDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TokenizedCardDetails.schema.json",
      "title": "TokenizedCardDetails",
      "definitions": {
        "TokenizedCardDetails": {
          "$id": "#TokenizedCardDetails",
          "description": "Detailed information for a stored tokenized card",
          "type": "object",
          "properties": {
            "brand": {
              "type": "string",
              "description": "Card brand. Might be used for display purposes"
            },
            "issuer": {
              "type": "string",
              "description": "Whoever issued the token"
            },
            "lastFourDigits": {
              "type": "string",
              "description": "Last four digits of the credit card. Might be used for display purposes"
            },
            "token": {
              "type": "string",
              "description": "The token itself"
            },
            "tokenType": {
              "type": "string",
              "description": "Token type (e.g.: emv)"
            },
            "cardType": {
              "type": "string",
              "description": "Card type. Might be used for display purposes"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TokenizedCardMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TokenizedCardMethod.schema.json",
      "title": "TokenizedCardMethod",
      "definitions": {
        "TokenizedCardMethod": {
          "$id": "#TokenizedCardMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/TokenizedCardDetails.schema.json#TokenizedCardDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Topic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Topic.schema.json",
      "title": "Topic",
      "definitions": {
        "Topic": {
          "$id": "#Topic",
          "description": "Is a event channel provided by the Event Streaming API",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "name": {
              "type": "string",
              "description": "use to identify grouping of events, per domain, per event types, per access control-right and so on."
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "headerQuery": {
              "type": "string",
              "description": "is the filter that will be applied on the Event header properties."
            },
            "contentQuery": {
              "type": "string",
              "description": "is the filter that will be applied on the content of the Event."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TopologyDiscoveryJob": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TopologyDiscoveryJob.schema.json",
      "title": "TopologyDiscoveryJob",
      "definitions": {
        "TopologyDiscoveryJob": {
          "$id": "#TopologyDiscoveryJob",
          "description": "Represents a task used to discover topology from providers",
          "type": "object",
          "properties": {
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was completed"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the job was created"
            },
            "status": {
              "description": "Status of the topolology discover job",
              "$ref": "TaskStateType.schema.json#TaskStateType"
            },
            "topologyProvider": {
              "description": "Source providers of topology",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "URI with Query string",
                    "type": "string"
                  }
                }
              }
            },
            "graph": {
              "description": "The created topology graph",
              "$ref": "GraphRefOrValue.schema.json#GraphRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TopupBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TopupBalance.schema.json",
      "title": "TopupBalance",
      "definitions": {
        "TopupBalance": {
          "$id": "#TopupBalance",
          "description": "Represents a detailed description of a recharge operation requested over a bucket (defined by a specific product or reference to a product (i.e.: a commercial id such as an msisidn) and a service type)",
          "properties": {
            "relatedTopupBalance": {
              "$ref": "RelatedTopupBalance.schema.json#RelatedTopupBalance"
            },
            "isAutoTopup": {
              "type": "boolean",
              "description": "Indicates if the topup requested is an autotopup (to be processed periodically)"
            },
            "numberOfPeriods": {
              "type": "integer",
              "description": "For autotopup indicates the number of occurrences of the period the recharge operation must be executed. If not included then no limit is set to stop the execution of the topup every period"
            },
            "recurringPeriod": {
              "type": "string",
              "description": "For autotopup indicates the periodicity for the recharge operation (monthly, weekly, )"
            },
            "paymentMethod": {
              "description": "Payment method used for the recharge operation (e.g.: cash, credit card). Structure including at least attribute dname. Notice that the use of a voucher can be managed as a specific methodtype, where he voucher code can be passed as value.",
              "$ref": "../Customer/PaymentMethodRef.schema.json#PaymentMethodRef"
            },
            "payment": {
              "$ref": "../Customer/PaymentRef.schema.json#PaymentRef"
            },
            "voucher": {
              "type": "string",
              "description": "Identifier for a voucher when the topup can be performed by this means"
            }
          },
          "allOf": [
            {
              "$ref": "BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "TrackingRecord": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TrackingRecord.schema.json",
      "title": "TrackingRecord",
      "definitions": {
        "TrackingRecord": {
          "$id": "#TrackingRecord",
          "type": "object",
          "description": "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records",
          "properties": {
            "description": {
              "type": "string",
              "description": "Describes the action being done, such as: ack, clear",
              "example": [
                "acknowledge",
                "clear"
              ]
            },
            "characteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#Characteristic"
              },
              "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the TrackingRecord"
            },
            "systemId": {
              "type": "string",
              "description": "Describes the system Id from which the action was done"
            },
            "time": {
              "type": "string",
              "format": "date-time",
              "description": "Describes the time at which the action was done"
            },
            "user": {
              "type": "string",
              "description": "Describes the user doing the action"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "TrafficFlowObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Transportation/TrafficFlowObserved/schema.json",
      "title": "FIWARE - Transportation / TrafficFlowObserved",
      "description": "TrafficFlowObserved",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "TrafficFlowObserved"
              ],
              "description": "NGSI Entity type"
            },
            "laneId": {
              "type": "integer",
              "minimum": 0
            },
            "refRoadSegment": {
              "type": "string",
              "format": "uri"
            },
            "dateObserved": {
              "type": "string"
            },
            "dateObservedFrom": {
              "type": "string",
              "format": "date-time"
            },
            "dateObservedTo": {
              "type": "string",
              "format": "date-time"
            },
            "intensity": {
              "type": "number",
              "minimum": 0
            },
            "occupancy": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "averageVehicleSpeed": {
              "type": "number",
              "minimum": 0
            },
            "averageVehicleLength": {
              "type": "number",
              "minimum": 0
            },
            "averageGapDistance": {
              "type": "number",
              "minimum": 0
            },
            "congested": {
              "type": "boolean"
            },
            "averageHeadwayTime": {
              "type": "number",
              "minimum": 0
            },
            "laneDirection": {
              "type": "string",
              "enum": [
                "forward",
                "backward"
              ]
            },
            "reversedLane": {
              "type": "boolean"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved"
      ],
      "anyOf": [
        {
          "required": [
            "refRoadSegment"
          ]
        },
        {
          "required": [
            "location"
          ]
        },
        {
          "required": [
            "address"
          ]
        }
      ]
    }
  ],
  "TransferBalance": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TransferBalance.schema.json",
      "title": "TransferBalance",
      "definitions": {
        "TransferBalance": {
          "$id": "#TransferBalance",
          "description": "The TransferBalance resource is a detailed description of credit transfer operation requested between two buckets (reference to products owned by customers and consuming credit when using a service).",
          "properties": {
            "receiverBucketUsageType": {
              "type": "string",
              "description": "Type of prepay balance bucket (e.g.: roaming-data, data, roaming-voice etc)"
            },
            "requestor": {
              "description": "Identifier for the user/customer/entity that performs the transfer action.This can be used to indicate the identifier of an agent that performs the operation on behalf of a user via a customer service channel Structure including at least attributes “role” and “name”",
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "receiver": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty",
              "description": "Identifier for the user/customer/entity that receives the transfer when it is required to indicate additional customer hierarchy information regarding the entity receiving the balance transfer Structure including at least attributes “role” and “name”"
            },
            "costOwner": {
              "description": "Indicates which related party will bear the costs of the transfer. eg originator or receiver",
              "type": "string"
            },
            "receiverProduct": {
              "$ref": "../Product/ProductRef.schema.json#ProductRef"
            },
            "receiverBucket": {
              "description": "A reference to the bucket to which the balance will be transferred",
              "$ref": "BucketRef.schema.json#BucketRef"
            },
            "receiverLogicalResource": {
              "$ref": "../Resource/LogicalResourceRef.schema.json#LogicalResourceRef",
              "description": "A reference to the logical resource that can be used to identify the bucket balance for example where product ids are not unique."
            },
            "receiverPartyAccount": {
              "description": "A reference to the receiver account that owns the receiverlbucket impacted by the balance related operation",
              "$ref": "../EngagedParty/PartyAccountRef.schema.json#PartyAccountRef"
            },
            "transferCost": {
              "description": "Associated cost to be charged for the transfer operation (can be monetary or non-monetary)",
              "$ref": "../Common/Quantity.schema.json#Quantity"
            }
          },
          "allOf": [
            {
              "$ref": "BalanceAction.schema.json#BalanceAction"
            }
          ]
        }
      }
    }
  ],
  "TransferRule": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/TransferRule/schema.json",
      "title": "NGSI GTFS Schema - TransferRule",
      "description": "GTFS Transfer Rule",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:TransferRule"
              ],
              "description": "NGSI Entity type"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "hasOrigin": {
              "type": "string",
              "format": "uri"
            },
            "hasDestination": {
              "type": "string",
              "format": "uri"
            },
            "transferType": {
              "type": "string",
              "enum": [
                "0",
                "1",
                "2",
                "3"
              ]
            },
            "minimumTransferTime": {
              "type": "integer",
              "minValue": 1
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasOrigin",
        "hasDestination",
        "transferType"
      ]
    }
  ],
  "Trip": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/UrbanMobility/Trip/schema.json",
      "title": "NGSI GTFS Schema - Trip",
      "description": "GTFS Trip",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "gtfs:Trip"
              ],
              "description": "NGSI Entity type"
            },
            "shortName": {
              "type": "string"
            },
            "headSign": {
              "type": "string"
            },
            "hasRoute": {
              "type": "string",
              "format": "uri"
            },
            "location": {
              "type": "object",
              "oneOf": [
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "LineString"
                      ]
                    },
                    "coordinates": {
                      "$ref": "http://json-schema.org/geojson/geometry.json#/definitions/lineString"
                    }
                  }
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "MultiLineString"
                      ]
                    },
                    "coordinates": {
                      "type": "array",
                      "items": {
                        "$ref": "http://json-schema.org/geojson/geometry.json#/definitions/lineString"
                      }
                    }
                  }
                }
              ]
            },
            "block": {
              "type": "string"
            },
            "hasService": {
              "type": "string",
              "format": "uri"
            },
            "direction": {
              "type": "number",
              "enum": [
                0,
                1
              ]
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "hasRoute"
      ]
    }
  ],
  "TroubleTicket": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TroubleTicket.schema.json",
      "title": "TroubleTicket",
      "definitions": {
        "TroubleTicket": {
          "$id": "#TroubleTicket",
          "type": "object",
          "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system",
          "properties": {
            "attachment": {
              "type": "array",
              "items": {
                "$ref": "../Common/AttachmentRefOrValue.schema.json#AttachmentRefOrValue"
              },
              "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge"
            },
            "channel": {
              "$ref": "../Common/ChannelRef.schema.json#ChannelRef",
              "description": "The channel that origin the trouble ticket"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the trouble ticket was created"
            },
            "description": {
              "type": "string",
              "description": "Description of the trouble or issue"
            },
            "expectedResolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The expected resolution date determined by the trouble ticket system"
            },
            "externalId": {
              "type": "string",
              "description": "Additional identifier coming from an external system"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink, a reference to the trouble ticket entity"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the trouble ticket"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time that the trouble ticked was last updated"
            },
            "name": {
              "type": "string",
              "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket"
            },
            "note": {
              "type": "array",
              "items": {
                "$ref": "../Common/Note.schema.json#Note"
              },
              "description": "The note(s) that are associated to the ticket."
            },
            "priority": {
              "type": "string",
              "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc..."
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#RelatedEntity"
              },
              "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated."
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "The related party(ies) that are associated to the ticket."
            },
            "requestedResolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The resolution date requested by the user"
            },
            "resolutionDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the trouble ticket was resolved"
            },
            "severity": {
              "type": "string",
              "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
            },
            "status": {
              "$ref": "../Common/TroubleTicketStatusType.schema.json#TroubleTicketStatusType",
              "description": "The current status of the trouble ticket"
            },
            "statusChange": {
              "type": "array",
              "items": {
                "$ref": "../Common/StatusChange.schema.json#StatusChange"
              },
              "description": "The status change history that are associated to the ticket.Populated by the server"
            },
            "statusChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time the status changed."
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason for changing the status"
            },
            "troubleTicketRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Common/TroubleTicketRelationship.schema.json#TroubleTicketRelationship"
              },
              "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets"
            },
            "ticketType": {
              "type": "string",
              "description": "represent a business type of the trouble ticket e.g. incident, complain, request"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TroubleTicketRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TroubleTicketRef.schema.json",
      "title": "TroubleTicketRef",
      "definitions": {
        "TroubleTicketRef": {
          "$id": "#TroubleTicketRef",
          "description": "TroubleTicket reference, for when a Trouble Ticket is used by other entities",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "TroubleTicketRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TroubleTicketRelationship.schema.json",
      "title": "TroubleTicketRelationship",
      "definitions": {
        "TroubleTicketRelationship": {
          "$id": "#TroubleTicketRelationship",
          "type": "object",
          "description": "Represents a relationship between trouble Trouble Tickets",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the Trouble Ticket"
            },
            "href": {
              "type": "string",
              "description": "Reference of the Trouble Ticket"
            },
            "name": {
              "type": "string",
              "description": "Name of the Trouble Ticket"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of the  Trouble Ticket relationship can be isChiled, dependent etc..."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "TroubleTicketStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "TroubleTicketStatusType.schema.json",
      "title": "TroubleTicketStatusType",
      "definitions": {
        "TroubleTicketStatusType": {
          "$id": "#TroubleTicketStatusType",
          "type": "string",
          "description": "Possible values for the status of the trouble ticket",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "closed",
            "resolved"
          ]
        }
      }
    }
  ],
  "UnAckAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UnAckAlarms.schema.json",
      "title": "UnAckAlarms",
      "definitions": {
        "UnAckAlarms": {
          "$id": "#UnAckAlarms",
          "description": "Task resource for unacknowledge alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "ackSystemId": {
              "description": "Name of the unacknowledging system",
              "type": "string"
            },
            "ackUserId": {
              "description": "Name of the unacknowledging user",
              "type": "string"
            },
            "ackTime": {
              "description": "Time of the unacknowledgement",
              "type": "string",
              "format": "date-time"
            },
            "alarmPattern": {
              "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm.",
              "type": "array",
              "items": {
                "$ref": "../Resource/Alarm.schema.json#Alarm"
              }
            },
            "unAckedAlarm": {
              "description": "The successfully unacknowledged alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "UnGroupAlarms": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UnGroupAlarms.schema.json",
      "title": "UnGroupAlarms",
      "definitions": {
        "UnGroupAlarms": {
          "$id": "#UnGroupAlarms",
          "description": "Task resource for ungroup alarms operation",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the task",
              "type": "string"
            },
            "href": {
              "description": "A reference to the task",
              "type": "string"
            },
            "state": {
              "description": "Current state of the operation task",
              "type": "string",
              "enum": [
                "acknowledged",
                "terminatedWithError",
                "inProgress",
                "done",
                "cancel",
                "canceled"
              ]
            },
            "sourceSystemId": {
              "description": "Source system identifier",
              "type": "string"
            },
            "alarmChangedTime": {
              "description": "Time of the uncorrelation",
              "type": "string",
              "format": "date-time"
            },
            "parentAlarm": {
              "description": "Root cause alarm",
              "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
            },
            "correlatedAlarm": {
              "description": "Correlated alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            },
            "unGroupedAlarm": {
              "description": "The successfully uncorrelated alarms",
              "type": "array",
              "items": {
                "$ref": "../Resource/AlarmRefOrValue.schema.json#AlarmRefOrValue"
              }
            }
          }
        }
      }
    }
  ],
  "Usage": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Usage.schema.json",
      "title": "Usage",
      "definitions": {
        "Usage": {
          "$id": "#Usage",
          "description": "An occurrence of employing a Product, Service, or Resource for its intended purpose, which is of interest to the business and can have charges applied to it. It is comprised of characteristics, which represent attributes of usage.",
          "type": "object",
          "properties": {
            "usageDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of usage",
              "examples": [
                "2020-09-21T09:13:16-07:00"
              ]
            },
            "description": {
              "type": "string",
              "description": "Description of usage",
              "examples": [
                "Voicemail Retrieval",
                "File Upload"
              ]
            },
            "status": {
              "$ref": "../Product/UsageStatusType.schema.json#UsageStatusType"
            },
            "usageType": {
              "type": "string",
              "description": "Type of usage"
            },
            "usageSpecification": {
              "$ref": "../Product/UsageSpecificationRef.schema.json#UsageSpecificationRef"
            },
            "usageCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Product/UsageCharacteristic.schema.json#UsageCharacteristic"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "ratedProductUsage": {
              "type": "array",
              "items": {
                "$ref": "../Product/RatedProductUsage.schema.json#RatedProductUsage"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UsageCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageCharacteristic.schema.json",
      "title": "UsageCharacteristic",
      "definitions": {
        "UsageCharacteristic": {
          "$id": "#UsageCharacteristic",
          "description": "Provides the value of a given characteristic",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Characteristic.schema.json#Characteristic"
            }
          ]
        }
      }
    }
  ],
  "UsageConsumption": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageConsumption.schema.json",
      "title": "UsageConsumption",
      "definitions": {
        "UsageConsumption": {
          "$id": "#UsageConsumption",
          "type": "object",
          "description": "An usage consumption enables to know at a given point the balances and the consumption counters related to various buckets (SMS, Voice, Data for example). It could be calculated for a device identified by a public key (msisdn number for a mobile device for example or PSTN or VOIP number for a fix device), for a subscribed offer or option or for an user.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Usage consumption name"
            },
            "description": {
              "type": "string",
              "description": "Free short text describing the usage consumption content"
            },
            "creationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the request creation"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the status was last changed"
            },
            "state": {
              "$ref": "../Common/TaskStateType.schema.json#TaskStateType",
              "description": "State of the report report defined in the state engine"
            },
            "validPeriod": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Validity period"
            },
            "relatedParty": {
              "type": "array",
              "description": "Reference and role of the related parties for which the usage consumption is requested",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              }
            },
            "bucketRefOrValue": {
              "type": "array",
              "description": "Bucket(s) included in the offer or option subscribed.",
              "items": {
                "$ref": "../Customer/BucketRefOrValue.schema.json#BucketRefOrValue"
              }
            },
            "product": {
              "type": "array",
              "items": {
                "description": "a reference to the Product(s) associated to the request",
                "$ref": "UsageConsumptionProductRef.schema.json#UsageConsumptionProductRef"
              }
            },
            "service": {
              "type": "array",
              "items": {
                "description": "a reference to the Service(s) associated to the request",
                "$ref": "../Service/ServiceRef.schema.json#ServiceRef"
              }
            },
            "logicalResource": {
              "type": "array",
              "items": {
                "description": "a reference to the Logical Resource(s) associated to the request",
                "$ref": "../Resource/UsageConsumptionLogicalResourceRef.schema.json#UsageConsumptionLogicalResourceRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UsageConsumptionLogicalResourceRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageConsumptionLogicalResourceRef.schema.json",
      "title": "UsageConsumptionLogicalResourceRef",
      "definitions": {
        "UsageConsumptionLogicalResourceRef": {
          "$id": "#UsageConsumptionLogicalResourceRef",
          "description": "reference to the LogicalResource eg MSISDN",
          "type": "object",
          "properties": {
            "consumptionSummary": {
              "type": "array",
              "items": {
                "description": "a reference to the Product(s) associated to the request",
                "$ref": "../Product/ConsumptionSummary.schema.json#ConsumptionSummary"
              }
            }
          },
          "allOf": [
            {
              "$ref": "ResourceRef.schema.json#ResourceRef"
            }
          ]
        }
      }
    }
  ],
  "UsageConsumptionProductRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageConsumptionProductRef.schema.json",
      "title": "UsageConsumptionProductRef",
      "definitions": {
        "UsageConsumptionProductRef": {
          "$id": "#UsageConsumptionProductRef",
          "type": "object",
          "properties": {
            "consumptionSummary": {
              "type": "array",
              "items": {
                "description": "a reference to the Product(s) associated to the request",
                "$ref": "../Product/ConsumptionSummary.schema.json#ConsumptionSummary"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Product/ProductRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "UsageSpecCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageSpecCharacteristic.schema.json",
      "title": "UsageSpecCharacteristic",
      "definitions": {
        "UsageSpecCharacteristic": {
          "$id": "#UsageSpecCharacteristic",
          "description": "A detailed description of an attribute that defines a particular type of usage, described by its name, category, type, presence and a set of allowed values",
          "type": "object",
          "properties": {
            "configurable": {
              "type": "boolean",
              "description": "Boolean indicating if usageSpecCharacteristic is configurable or not"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail what the usage specification characteristic is"
            },
            "name": {
              "type": "string",
              "description": "The name of the usage specification characteristic"
            },
            "usageSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Product/UsageSpecCharacteristicValue.schema.json#UsageSpecCharacteristicValue"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UsageSpecCharacteristicValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageSpecCharacteristicValue.schema.json",
      "title": "UsageSpecCharacteristicValue",
      "definitions": {
        "UsageSpecCharacteristicValue": {
          "$id": "#UsageSpecCharacteristicValue",
          "description": "A value that can be assigned to a UsageSpecCharacteristic.",
          "type": "object",
          "properties": {
            "default": {
              "type": "boolean",
              "description": "If true, this is the default value for a characteristic"
            },
            "value": {
              "type": "string",
              "description": "A narrative that explains in detail what the usage specification characteristic is"
            },
            "valueFrom": {
              "type": "string",
              "description": "The low range value that a characteristic can take on"
            },
            "valueTo": {
              "type": "string",
              "description": "The upper range value that a characteristic can take on"
            },
            "valueType": {
              "type": "string",
              "description": "A kind of value that the characteristic can take on, such as numeric, text"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UsageSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageSpecification.schema.json",
      "title": "UsageSpecification",
      "definitions": {
        "UsageSpecification": {
          "$id": "#UsageSpecification",
          "description": "A detailed description of a usage event that are of interest to the business and can have charges applied to it. It is comprised of characteristics, which define all attributes known for a particular type of usage.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/EntitySpecification.schema.json#EntitySpecification"
            }
          ]
        }
      }
    }
  ],
  "UsageSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageSpecificationRef.schema.json",
      "title": "UsageSpecificationRef",
      "definitions": {
        "UsageSpecificationRef": {
          "$id": "#UsageSpecificationRef",
          "description": "UsageSpecification reference. UsageSpecification is a detailed description of a usage event that are of interest to the business and can have charges applied to it. It is comprised of characteristics, which define all attributes known for a particular type of usage.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the usage specification"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UsageStatusType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageStatusType.schema.json",
      "title": "UsageStatusType",
      "definitions": {
        "UsageStatusType": {
          "$id": "#UsageStatusType",
          "type": "string",
          "description": "Possible values for the status of the Usage",
          "examples": [
            "rated",
            "billed"
          ],
          "enum": [
            "received",
            "rejected",
            "recycled",
            "guided",
            "rated",
            "rerated",
            "billed"
          ]
        }
      }
    }
  ],
  "UsageType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UsageType.schema.json",
      "title": "UsageType",
      "definitions": {
        "UsageType": {
          "$id": "#UsageType",
          "type": "string",
          "description": "Valid values for the usage type are",
          "enum": [
            "monetary",
            "voice",
            "data",
            "sms",
            "other"
          ]
        }
      }
    }
  ],
  "User": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "User.schema.json",
      "title": "User",
      "definitions": {
        "User": {
          "$id": "#User",
          "description": "Generic User structure used to define commonalities between sub concepts of PartyUser and Financial User.",
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UserAsset": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UserAsset.schema.json",
      "title": "UserAsset",
      "definitions": {
        "UserAsset": {
          "properties": {
            "assetType": {
              "type": "string",
              "description": "Second level to define the type of managed element for product/service/resource managed entities (e.g.: mobile line subscription, video platform license, mobile equipment, etc). Allows identifying the specific asset within the server referenced. Supported values are implementation and application specific. Other values can be added if those listed are not enough",
              "enum": [
                "mobile",
                "landline",
                "iptv",
                "broadband",
                "email",
                "invoicing"
              ]
            },
            "entitlement": {
              "type": "array",
              "items": {
                "$ref": "Entitlement.schema.json#/definitions/Entitlement"
              },
              "description": "information about individual entitlements to define access levels to operate over different functions that can be defined in an asset"
            },
            "entityType": {
              "type": "string",
              "description": "Type of managed entity (e.g.: product, resource, service, customer, account)",
              "enum": [
                "customer",
                "account",
                "product",
                "service",
                "resource"
              ]
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of referenced entity within the entity/asset pair (customerId, accountId, mobile line number, ...)",
              "examples": [
                "f066ffd5-e685-43bc-ad57-bfb7639decb1"
              ]
            },
            "role": {
              "type": "string",
              "description": "Represents the part played by an individual in relation to being granted a set of entitlements for manageable assets (e.g.: owner, user, viewer, ...)",
              "examples": [
                "owner"
              ]
            }
          },
          "required": [
            "entityType",
            "id"
          ],
          "allOf": [
            {
              "$ref": "Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "UserContext": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/User/UserContext/schema.json",
      "title": "FIWARE - User Context schema",
      "description": "Information on the context of an anonymized in a given point in time",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "refActivity": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "refUserDevice": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "refUser": {
              "oneOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
                },
                {
                  "type": "string",
                  "format": "uri"
                }
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "UserContext"
              ],
              "description": "NGSI Entity type"
            }
          }
        }
      ],
      "anyOf": [
        {
          "required": [
            "id",
            "type",
            "location",
            "refUser"
          ]
        },
        {
          "required": [
            "id",
            "type",
            "address",
            "refUser"
          ]
        },
        {
          "required": [
            "id",
            "type",
            "refActivity",
            "refUser"
          ]
        }
      ]
    }
  ],
  "UserRole": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UserRole.schema.json",
      "title": "UserRole",
      "definitions": {
        "UserRole": {
          "$id": "#UserRole",
          "description": "A UserRole defines access levels to operate over a given function that can be included in an asset.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the userRole"
            },
            "href": {
              "type": "string",
              "description": "Unique URI used to access to the userRole resource"
            },
            "involvementRole": {
              "type": "string",
              "description": "Indication of the part that a user plays in its involvement with a manageable asset (product, service or resource)"
            },
            "entitlement": {
              "type": "array",
              "items": {
                "$ref": "../Common/Entitlement.schema.json#Entitlement"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "UserRoleRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UserRoleRef.schema.json",
      "title": "UserRoleRef",
      "definitions": {
        "UserRoleRef": {
          "$id": "#UserRoleRef",
          "description": "A UserRoleRef is a detailed information concerning an individual access entitlement.",
          "type": "object",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hypertext Reference of the user role."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the user role"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Userinfo": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "UserInfo.schema.json",
      "title": "Userinfo",
      "definitions": {
        "Userinfo": {
          "properties": {
            "address": {
              "description": "Structure including the End-User's preferred postal address",
              "$ref": "../Common/GeographicAddress.schema.json#/definitions/GeographicAddress"
            },
            "birthdate": {
              "type": "string",
              "description": "End-User's birthday, represented as an [ISO8601-2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates",
              "examples": [
                "1970-11-02"
              ]
            },
            "email": {
              "type": "string",
              "description": "End-User's preferred e-mail address. Its value MUST conform to the [RFC5322] addr-spec syntax",
              "example": "jane.doe@email.com"
            },
            "email_verified": {
              "type": "boolean",
              "default": false,
              "description": "True if the user's email has been verified."
            },
            "family_name": {
              "type": "string",
              "description": "Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters",
              "examples": [
                "Doe"
              ]
            },
            "gender": {
              "type": "string",
              "description": "End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable",
              "examples": [
                "female"
              ]
            },
            "given_name": {
              "type": "string",
              "description": "Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters",
              "examples": [
                "Jane"
              ]
            },
            "legalId": {
              "type": "array",
              "items": {
                "$ref": "../Common/IndividualIdentification.schema.json#/definitions/IndividualIdentification"
              },
              "description": "Identification documentation of the contact"
            },
            "locale": {
              "type": "string",
              "description": "End-User's locale, represented as a [RFC5646] language tag. This is typically an [ISO639-1] language code in lowercase and an [ISO3166-1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US",
              "examples": [
                "en"
              ]
            },
            "middle_name": {
              "type": "string",
              "description": "Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used",
              "examples": [
                "Mary"
              ]
            },
            "name": {
              "type": "string",
              "description": "End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences",
              "examples": [
                "Jane Mary Doe"
              ]
            },
            "nickname": {
              "type": "string",
              "description": "Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael",
              "examples": [
                "JaneDoe"
              ]
            },
            "phone_number": {
              "type": "string",
              "description": "End-User's preferred telephone number. [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 82) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678",
              "examples": [
                "+1 (425) 555-1212"
              ]
            },
            "phone_number_verified": {
              "type": "boolean",
              "default": false,
              "description": "True if the user's phone number has been verified."
            },
            "picture": {
              "type": "string",
              "description": "URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User",
              "examples": [
                "https://some.url.com/janeDoe.jpg"
              ]
            },
            "preferred_username": {
              "type": "string",
              "description": "Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace",
              "examples": [
                "janeDoe"
              ]
            },
            "profile": {
              "type": "string",
              "description": "URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User",
              "examples": [
                "https://my.blog.com/janeDoe"
              ]
            },
            "sub": {
              "type": "string",
              "description": "Subject - Unique Identifier for the End-User",
              "examples": [
                "a066ffd5-f685-43bc-ad57-bfb7639decb0"
              ]
            },
            "userAssets": {
              "type": "array",
              "items": {
                "$ref": "../Common/UserAsset.schema.json#/definitions/UserAsset"
              },
              "description": "List of additional profile information"
            },
            "website": {
              "type": "string",
              "description": "URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with",
              "examples": [
                "https://janedoe.com"
              ]
            },
            "zoneinfo": {
              "type": "string",
              "description": "String from zoneinfo time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles",
              "examples": [
                "America/Los_Angeles"
              ]
            }
          },
          "required": [
            "sub",
            "name"
          ],
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/Entity"
            }
          ]
        }
      }
    }
  ],
  "ValidFor": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "ValidFor.schema.json",
      "title": "ValidFor",
      "definitions": {
        "ValidFor": {
          "$id": "#ValidFor",
          "type": "object",
          "properties": {
            "endDateTime": {
              "type": "string",
              "format": "date-time"
            },
            "startDateTime": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    }
  ],
  "Value": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Value.schema.json",
      "title": "Value",
      "definitions": {
        "Value": {
          "$id": "#Value",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Vertex": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Vertex.schema.json",
      "title": "Vertex",
      "definitions": {
        "Vertex": {
          "type": "object",
          "description": "A Vertex is connected by directed Edges to other vertices in a Graph.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "vertexSpecification": {
              "$ref": "VertexSpecificationRef.schema.json#VertexSpecificationRef"
            },
            "graph": {
              "description": "Graph which this Vertex is contained in.",
              "$ref": "GraphRef.schema.json#GraphRef"
            },
            "subGraph": {
              "description": "SubGraph which this Vertex represents.",
              "$ref": "GraphRefOrValue.schema.json#GraphRefOrValue"
            },
            "entity": {
              "description": "Entity which this Vertex represents.",
              "$ref": "EntityRef.schema.json#EntityRef"
            },
            "edge": {
              "description": "Directed Edges which this Vertex is connected by.",
              "type": "array",
              "items": {
                "$ref": "EdgeRef.schema.json#EdgeRef"
              }
            },
            "vertexCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "Characteristic.schema.json#Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "VertexRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexRef.schema.json",
      "title": "VertexRef",
      "definitions": {
        "VertexRef": {
          "$id": "#VertexRef",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "VertexRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexRefOrValue.schema.json",
      "title": "VertexRefOrValue",
      "definitions": {
        "VertexRefOrValue": {
          "$id": "#VertexRefOrValue",
          "description": "A Vertex is connected by directed Edges to other vertices in a Graph.",
          "type": "object",
          "properties": {},
          "allOf": [
            {
              "$ref": "VertexRef.schema.json#VertexRef"
            },
            {
              "$ref": "Vertex.schema.json#Vertex"
            }
          ]
        }
      }
    }
  ],
  "VertexSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexSpecification.schema.json",
      "title": "VertexSpecification",
      "definitions": {
        "VertexSpecification": {
          "type": "object",
          "description": "A Vertex is connected by directed Edges to other vertices in a Graph.\nA VertexSpecification is a base class that represents a generic means for implementing a particular type of Vertex. In essence, a VertexSpecification defines the common attributes and relationships of a set of related Vertices, while Vertex defines a specific instance that is based on a particular VertexSpecification.",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name given to this REST resource"
            },
            "description": {
              "type": "string",
              "description": "Description of this REST resource"
            },
            "version": {
              "type": "string",
              "description": "Vertex Specification version"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which this REST resource is valid"
            },
            "lastUpdate": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the last update of this REST resource"
            },
            "lifecycleStatus": {
              "type": "string",
              "description": "Used to indicate the current lifecycle status of the vertex specification"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
              },
              "description": "A related party defines party or party role linked to a specific entity."
            },
            "vertexSpecCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "VertexSpecificationCharacteristic.schema.json#VertexSpecificationCharacteristic"
              },
              "description": "A characteristic quality or distinctive feature of a VertexSpecification."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            },
            {
              "$ref": "../Common/Addressable.schema.json#Addressable"
            }
          ]
        }
      }
    }
  ],
  "VertexSpecificationCharacteristic": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexSpecificationCharacteristic.schema.json",
      "title": "VertexSpecificationCharacteristic",
      "definitions": {
        "VertexSpecificationCharacteristic": {
          "$id": "#VertexSpecificationCharacteristic",
          "description": "This class defines the characteristic features of a vertex specification. Every VertexSpecification has a variety of important attributes, methods, constraints, and relationships, which distinguish a vertex specification from other vertex specifications.",
          "type": "object",
          "properties": {
            "vertexSpecCharRelationship": {
              "type": "array",
              "items": {
                "$ref": "VertexSpecificationCharacteristicRelationship.schema.json#VertexSpecificationCharacteristicRelationship"
              },
              "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
            },
            "vertexSpecCharacteristicValue": {
              "type": "array",
              "items": {
                "$ref": "../Common/CharacteristicValueSpecification.schema.json#CharacteristicValueSpecification"
              },
              "description": "A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a VertexSpecificationCharacteristic object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding VertexSpecificationCharacteristic object can take on."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/CharacteristicSpecificationBase.schema.json#CharacteristicSpecificationBase"
            }
          ]
        }
      }
    }
  ],
  "VertexSpecificationCharacteristicRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexSpecificationCharacteristicRelationship.schema.json",
      "title": "VertexSpecificationCharacteristicRelationship",
      "definitions": {
        "VertexSpecificationCharacteristicRelationship": {
          "$id": "#VertexSpecificationCharacteristicRelationship",
          "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among VertexSpecificationCharacteristics. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID.",
          "type": "object",
          "properties": {
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
            },
            "name": {
              "type": "string",
              "description": "Name of the target characteristic within the specification"
            },
            "characteristicSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the characteristic within the specification"
            },
            "vertexSpecificationId": {
              "type": "string",
              "description": "Unique identifier of the vertex specification containing the target characteristic"
            },
            "vertexSpecificationHref": {
              "type": "string",
              "format": "uri",
              "description": "Hyperlink reference to the vertex specification containing the target characteristic"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "The period for which the object is valid"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "VertexSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VertexSpecificationRef.schema.json",
      "title": "VertexSpecificationRef",
      "definitions": {
        "VertexSpecificationRef": {
          "$id": "#VertexSpecificationRef",
          "type": "object",
          "description": "A Vertex is connected by directed Edges to other vertices in a Graph.\nA VertexSpecification is a base class that represents a generic means for implementing a particular type of Vertex. In essence, a VertexSpecification defines the common attributes and relationships of a set of related Vertices, while Vertex defines a specific instance that is based on a particular VertexSpecification.",
          "properties": {
            "version": {
              "type": "string",
              "description": "Vertex Specification version"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#EntityRef"
            }
          ]
        }
      }
    }
  ],
  "Violation": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Violation.schema.json",
      "title": "Violation",
      "definitions": {
        "Violation": {
          "$id": "#Violation",
          "type": "object",
          "properties": {
            "actualValue": {
              "type": "string"
            },
            "comment": {
              "type": "string"
            },
            "consequence": {
              "type": "string"
            },
            "operator": {
              "type": "string"
            },
            "referenceValue": {
              "type": "string"
            },
            "tolerance": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "violationAverage": {
              "type": "string"
            },
            "attachment": {
              "$ref": "../Common/AttachmentRef.schema.json#AttachmentRef"
            },
            "rule": {
              "$ref": "../EngagedParty/RuleRef.schema.json#RuleRef"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "Voucher": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Voucher.schema.json",
      "title": "Voucher",
      "definitions": {
        "Voucher": {
          "$id": "#Voucher",
          "description": "A voucher method of payment.",
          "type": "object",
          "required": [
            "@type"
          ],
          "properties": {
            "code": {
              "type": "string",
              "description": "Code that identifies the voucher.",
              "examples": [
                "VCJLP0000"
              ]
            },
            "description": {
              "type": "string",
              "description": "Description of the voucher i.e.: get one and receive one free.",
              "examples": [
                "Buy one and receive one free."
              ]
            },
            "value": {
              "$ref": "../Common/Quantity.schema.json#Quantity",
              "description": "The value of the voucher."
            },
            "discount": {
              "type": "string",
              "description": "The discount that the voucher applies when it's a discount voucher.",
              "examples": [
                "50%",
                "25%",
                "70%"
              ]
            },
            "expirationDate": {
              "type": "string",
              "description": "The voucher's expiration date.",
              "format": "date-time",
              "examples": [
                "2025-11-20T10:19:46+0000"
              ]
            },
            "campaign": {
              "type": "string",
              "description": "Campaign this voucher belongs to.",
              "examples": [
                "Black Friday mega sale."
              ]
            },
            "@type": {
              "type": "string",
              "enum": [
                "voucher"
              ]
            }
          },
          "allOf": [
            {
              "$ref": "../Customer/PaymentMethod.schema.json#PaymentMethod"
            }
          ]
        }
      }
    }
  ],
  "VoucherDetails": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VoucherDetails.schema.json",
      "title": "VoucherDetails",
      "definitions": {
        "VoucherDetails": {
          "$id": "#VoucherDetails",
          "description": "Detailed information of a voucher",
          "type": "object",
          "properties": {
            "campaign": {
              "type": "string",
              "description": "Campaign this voucher belongs to"
            },
            "code": {
              "type": "string",
              "description": "Code that identifies the voucher"
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "The vouchers expiration date"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "Discount that the voucher applies when it is a discount"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "VoucherMethod": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "VoucherMethod.schema.json",
      "title": "VoucherMethod",
      "definitions": {
        "VoucherMethod": {
          "$id": "#VoucherMethod",
          "type": "object",
          "properties": {
            "details": {
              "$ref": "../Customer/VoucherDetails.schema.json#VoucherDetails"
            },
            "description": {
              "type": "string",
              "description": "Text describing the contents of the payment method"
            },
            "href": {
              "type": "string",
              "description": "A resource URI pointing to the resource in the server that stores the detailed information. This is typically the resource url to retrieve individual details for the specific payment method"
            },
            "id": {
              "type": "string",
              "description": "Unique Identifier within the server for the payment method."
            },
            "name": {
              "type": "string",
              "description": "Friendly name assigned to the payment method"
            },
            "preferred": {
              "type": "boolean",
              "description": "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account"
            },
            "status": {
              "type": "string"
            },
            "statusDate": {
              "type": "string",
              "format": "date-time"
            },
            "validFor": {
              "$ref": "../Common/TimePeriod.schema.json#TimePeriod",
              "description": "Date interval in which the payment method is valid"
            },
            "relatedParty": {
              "$ref": "../EngagedParty/RelatedParty.schema.json#RelatedParty"
            },
            "account": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AccountRef.schema.json#AccountRef"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "WasteContainer": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/WasteManagement/WasteContainer/schema.json",
      "title": "FIWARE - Waste Management / Waste Container",
      "description": "A waste container",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WasteContainer"
              ],
              "description": "NGSI Entity type"
            },
            "fillingLevel": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fixed",
                  "underground",
                  "ground",
                  "portable",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "cargoWeight": {
              "type": "number",
              "minimum": 0
            },
            "temperature": {
              "type": "number"
            },
            "methaneConcentration": {
              "type": "number",
              "minimum": 0
            },
            "storedWasteKind": {
              "type": "string",
              "enum": [
                "organic",
                "inorganic",
                "glass",
                "oil",
                "plastic",
                "metal",
                "paper",
                "batteries",
                "electronics",
                "hazardous",
                "other"
              ]
            },
            "storedWasteOrigin": {
              "type": "string",
              "enum": [
                "household",
                "municipal",
                "industrial",
                "construction",
                "hostelry",
                "agriculture",
                "other"
              ]
            },
            "storedWasteCode": {
              "type": "string"
            },
            "serialNumber": {
              "type": "string"
            },
            "regulation": {
              "type": "string"
            },
            "responsible": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "dateServiceStarted": {
              "type": "string",
              "format": "date-time"
            },
            "dateLastEmptying": {
              "type": "string",
              "format": "date-time"
            },
            "nextActuationDeadline": {
              "type": "string",
              "format": "date-time"
            },
            "actuationHours": {
              "type": "string"
            },
            "dateLastCleaning": {
              "type": "string",
              "format": "date-time"
            },
            "nextCleaningDeadline": {
              "type": "string",
              "format": "date-time"
            },
            "isleId": {
              "type": "string"
            },
            "status": {
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "ok",
                "lidOpen",
                "dropped",
                "moved"
              ]
            },
            "refWasteContainerModel": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refWasteContainerIsle": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "refDevice": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "TimeInstant": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "WasteContainerIsle": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/WasteManagement/WasteContainerIsle/schema.json",
      "title": "FIWARE - Waste Management / Waste Container Isle",
      "description": "A waste container isle",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WasteContainerIsle"
              ],
              "description": "NGSI Entity type"
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "containerFix",
                  "underground",
                  "fenced",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "insertHolesNumber": {
              "type": "number",
              "minimum": 0
            },
            "refWasteContainer": {
              "type": "array",
              "items": {
                "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "location"
      ]
    }
  ],
  "WasteContainerModel": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/WasteManagement/WasteContainerModel/schema.json",
      "title": "FIWARE - Waste Management / Waste Container Model",
      "description": "A waste container model",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/PhysicalObject-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WasteContainerModel"
              ],
              "description": "NGSI Entity type"
            },
            "width": {
              "type": "number",
              "minimum": 0
            },
            "height": {
              "type": "number",
              "minimum": 0
            },
            "depth": {
              "type": "number",
              "minimum": 0
            },
            "weight": {
              "type": "number",
              "minimum": 0
            },
            "cargoVolume": {
              "type": "number",
              "minimum": 0
            },
            "maximumLoad": {
              "type": "number",
              "minimum": 0
            },
            "recommendedLoad": {
              "type": "number",
              "minimum": 0
            },
            "category": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "dumpster",
                  "trashCan",
                  "wheelieBin",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            },
            "insertHolesNumber": {
              "type": "number",
              "minimum": 0
            },
            "madeOf": {
              "type": "string",
              "enum": [
                "plastic",
                "wood",
                "metal",
                "other"
              ]
            },
            "madeOfCode": {
              "type": "string"
            },
            "brandName": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            },
            "manufacturerName": {
              "type": "string"
            },
            "compliantWith": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 0,
              "uniqueItems": true
            },
            "features": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "wheels",
                  "lid",
                  "roundedLid",
                  "insertHoles",
                  "lockable",
                  "other"
                ]
              },
              "minItems": 1,
              "uniqueItems": true
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "name"
      ]
    }
  ],
  "WaterQualityObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Environment/WaterQualityObserved/schema.json",
      "title": "GSMA / FIWARE - Water quality observed schema",
      "description": "Water Quality data model is intended to represent water quality parameters at a certain water mass (river,  lake, sea, etc.) section",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WaterQualityObserved"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string"
            },
            "measurand": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "temperature": {
              "type": "number"
            },
            "conductivity": {
              "type": "number",
              "minimum": 0
            },
            "conductance": {
              "type": "number",
              "minimum": 0
            },
            "tss": {
              "type": "number",
              "minimum": 0
            },
            "tds": {
              "type": "number",
              "minimum": 0
            },
            "turbidity": {
              "type": "number",
              "minimum": 0
            },
            "salinity": {
              "type": "number",
              "minimum": 0
            },
            "pH": {
              "type": "number",
              "minimum": 0,
              "maximum": 14
            },
            "orp": {
              "type": "number",
              "minimum": 0
            },
            "O2": {
              "type": "number",
              "minimum": 0
            },
            "Chla": {
              "type": "number",
              "minimum": 0
            },
            "PE": {
              "type": "number",
              "minimum": 0
            },
            "PC": {
              "type": "number",
              "minimum": 0
            },
            "NH4": {
              "type": "number",
              "minimum": 0
            },
            "NH3": {
              "type": "number",
              "minimum": 0
            },
            "Cl-": {
              "type": "number",
              "minimum": 0
            },
            "NO3": {
              "type": "number",
              "minimum": 0
            },
            "refPointOfInterest": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved",
        "location"
      ]
    }
  ],
  "WeatherAlert": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/WeatherAlarm/schema.json",
      "title": "Weather Alarm data model JSON Schema",
      "description": "A weather alert generated by a user or device in a given location",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/Alert/alert-schema.json#/definitions/Common-Alert"
        },
        {
          "type": "object",
          "properties": {
            "category": {
              "type": "string",
              "enum": [
                "weather"
              ]
            },
            "subCategory": {
              "$ref": "https://fiware.github.io/dataModels/specs/Weather/weather-schema.json#/definitions/WeatherAlertCategories"
            }
          }
        }
      ],
      "oneOf": [
        {
          "required": [
            "id",
            "type",
            "location",
            "alertSource",
            "category",
            "subCategory",
            "dateIssued"
          ]
        },
        {
          "required": [
            "id",
            "type",
            "address",
            "alertSource",
            "category",
            "subCategory",
            "dateIssued"
          ]
        }
      ]
    }
  ],
  "WeatherForecast": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Weather/WeatherForecast/schema.json",
      "title": "GSMA / FIWARE - Weather Forecast schema",
      "description": "A harmonised description of a Weather Forecast",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/Weather/weather-schema.json#/definitions/Weather-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WeatherForecast"
              ],
              "description": "NGSI Entity type"
            },
            "dateRetrieved": {
              "type": "string",
              "format": "date-time"
            },
            "dateIssued": {
              "type": "string",
              "format": "date-time"
            },
            "validity": {
              "title": "ISO8601 Interval",
              "type": "string"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validTo": {
              "type": "string",
              "format": "date-time"
            },
            "dayMaximum": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/specs/Weather/weather-schema.json#/definitions/Weather-AirConditions"
                }
              ]
            },
            "dayMinimum": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "https://fiware.github.io/dataModels/specs/Weather/weather-schema.json#/definitions/Weather-AirConditions"
                }
              ]
            },
            "uVIndexMax": {
              "type": "number",
              "minimum": 1
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateIssued",
        "address"
      ]
    }
  ],
  "WeatherObserved": [
    {
      "$schema": "http://json-schema.org/schema#",
      "id": "https://fiware.github.io/dataModels/specs/Weather/WeatherObserved/schema.json",
      "title": "GSMA / FIWARE - Weather Observed schema",
      "description": "An observation of weather conditions at a certain place and time. This data model has been developed in cooperation with mobile operators and the GSMA.",
      "type": "object",
      "allOf": [
        {
          "$ref": "https://github.com/tmforum-rand/schemas/blob/master/Common/Entity.schema.json#/definitions/Entity"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/GSMA-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/Location-Commons"
        },
        {
          "$ref": "https://fiware.github.io/dataModels/specs/Weather/weather-schema.json#/definitions/Weather-Commons"
        },
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "WeatherObserved"
              ],
              "description": "NGSI Entity type"
            },
            "dateObserved": {
              "type": "string",
              "format": "date-time"
            },
            "precipitation": {
              "type": "number",
              "minimum": 0
            },
            "atmosphericPressure": {
              "type": "number",
              "minimum": 0
            },
            "solarRadiation": {
              "type": "number",
              "minimum": 0
            },
            "illuminance": {
              "type": "number",
              "minimum": 0
            },
            "pressureTendency": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "raising",
                    "falling",
                    "steady"
                  ]
                },
                {
                  "type": "number"
                }
              ]
            },
            "dewPoint": {
              "type": "number"
            },
            "refDevice": {
              "$ref": "https://fiware.github.io/dataModels/common-schema.json#/definitions/EntityIdentifierType"
            },
            "streamGauge": {
              "type": "number"
            },
            "snowHeight": {
              "type": "number"
            }
          }
        }
      ],
      "required": [
        "id",
        "type",
        "dateObserved",
        "location"
      ]
    }
  ],
  "Work": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "Work.schema.json",
      "title": "Work",
      "definitions": {
        "Work": {
          "$id": "#Work",
          "type": "object",
          "properties": {
            "actualDuration": {
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "agreement": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#/definitions/AgreementRef"
              }
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#/definitions/AppointmentRef"
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was completed"
            },
            "currentDuration": {
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "deliveryTimeSlot": {
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            },
            "description": {
              "type": "string",
              "description": "Is the description of the work unit. It could be the same as the description of the work specification."
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the requester expects the work to be completed"
            },
            "name": {
              "type": "string",
              "description": "Name of the work unit. It could be the same as the name of the work specification."
            },
            "note": {
              "$ref": "../Common/Note.schema.json#/definitions/Note"
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date at which the work order which triggered this unit of work's creation/change/termination was created."
            },
            "percentageComplete": {
              "type": "number",
              "format": "float"
            },
            "place": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedPlaceRefOrValue.schema.json#/definitions/RelatedPlaceRefOrValue"
              }
            },
            "plannedDuration": {
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "quantity": {
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "scheduledDuration": {
              "$ref": "../Common/Quantity.schema.json#/definitions/Quantity"
            },
            "state": {
              "$ref": "../EngagedParty/WorkStateType.schema.json#/definitions/WorkStateType"
            },
            "work": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkRefOrValue.schema.json#/definitions/WorkRefOrValue"
              }
            },
            "workCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            },
            "workOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedWorkOrderItem.schema.json#/definitions/RelatedWorkOrderItem"
              }
            },
            "workPrice": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkPrice.schema.json#/definitions/WorkPrice"
              }
            },
            "workPriority": {
              "type": "string"
            },
            "workRelationship": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkRelationship.schema.json#/definitions/WorkRelationship"
              }
            },
            "workSpecification": {
              "$ref": "../EngagedParty/WorkSpecificationRef.schema.json#/definitions/WorkSpecificationRef"
            },
            "workType": {
              "type": "string"
            },
            "workforceEmployeeAssignment": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkforceEmployeeAssignment.schema.json#/definitions/WorkforceEmployeeAssignment"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkEligibilityUnavailabilityReason": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkEligibilityUnavailabilityReason.schema.json",
      "title": "WorkEligibilityUnavailabilityReason",
      "definitions": {
        "WorkEligibilityUnavailabilityReason": {
          "$id": "#WorkEligibilityUnavailabilityReason",
          "type": "object",
          "description": "Reason for eligibility result if the WorkQualification result is no (meaning the Unit of Work is not valid)",
          "properties": {
            "code": {
              "type": "string",
              "description": "Unavailability reason code"
            },
            "label": {
              "type": "string",
              "description": "Unavailability reason label"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "WorkLog": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkLog.schema.json",
      "title": "WorkLog",
      "definitions": {
        "WorkLog": {
          "$id": "#WorkLog",
          "description": "A record of the work performed on the change request during the investigation and resolution process.",
          "type": "object",
          "properties": {
            "createDateTime": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of worklog generated."
            },
            "description": {
              "type": "string",
              "description": "The description of the worklog."
            },
            "lastUpdateDateTime": {
              "type": "string",
              "description": "Date and time when the worklog updated."
            },
            "record": {
              "type": "array",
              "items": {
                "$ref": "../Common/Record.schema.json#Record"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkOrder": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkOrder.schema.json",
      "title": "WorkOrder",
      "definitions": {
        "WorkOrder": {
          "$id": "#WorkOrder",
          "type": "object",
          "required": [
            "workOrderItem"
          ],
          "properties": {
            "agreement": {
              "type": "array",
              "description": "A reference to an agreement defined in the context of the work order",
              "items": {
                "$ref": "../EngagedParty/AgreementRef.schema.json#/definitions/AgreementRef"
              }
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#/definitions/AppointmentRef"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#/definitions/BillingAccountRef"
            },
            "cancellationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order is cancelled. This is used when order is cancelled. "
            },
            "cancellationReason": {
              "type": "string",
              "description": "Reason why the order is cancelled. This is used when order is cancelled. "
            },
            "category": {
              "type": "string",
              "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. \"enterprise\", \"residential\", ...)"
            },
            "channel": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedChannel.schema.json#/definitions/RelatedChannel"
              }
            },
            "completionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was completed"
            },
            "description": {
              "type": "string",
              "description": "A free-text description of the order"
            },
            "expectedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Expected completion date amended by the provider"
            },
            "externalId": {
              "type": "string",
              "description": "ID given by the consumer to facilitate searches"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink to access the order"
            },
            "id": {
              "type": "string",
              "description": "ID created on repository side"
            },
            "note": {
              "$ref": "../Common/Note.schema.json#/definitions/Note"
            },
            "notificationContact": {
              "type": "string",
              "description": "Contact attached to the order to send back information regarding this order"
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "../Common/OrderRef.schema.json#/definitions/OrderRef"
              }
            },
            "orderDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order was created"
            },
            "orderTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderPrice.schema.json#/definitions/OrderPrice"
              }
            },
            "payment": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentRef.schema.json#/definitions/PaymentRef"
              }
            },
            "place": {
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            },
            "priority": {
              "type": "string",
              "description": "A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
            },
            "quote": {
              "type": "array",
              "items": {
                "$ref": "../Customer/QuoteRef.schema.json#/definitions/QuoteRef"
              }
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "requestedCompletionDate": {
              "type": "string",
              "format": "date-time",
              "description": "Requested completion date from the requestors perspective"
            },
            "requestedStartDate": {
              "type": "string",
              "format": "date-time",
              "description": "Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow provider to begin to operationally begin the fulfillment before a date."
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the order started"
            },
            "state": {
              "$ref": "../EngagedParty/WorkOrderStateType.schema.json#/definitions/WorkOrderStateType"
            },
            "stateChangeDate": {
              "type": "string",
              "format": "date-time",
              "description": "Last change date of the order state."
            },
            "version": {
              "type": "string",
              "description": "The version number allows for the tracking of multiple evolution steps during the lifecycle of the entity.\r\nIt can be correlated to the revision number related to the lifecycle management change of the entity."
            },
            "workOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkOrderItem.schema.json#/definitions/WorkOrderItem"
              }
            },
            "workOrderRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderRelationship.schema.json#/definitions/OrderRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkOrderItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkOrderItem.schema.json",
      "title": "WorkOrderItem",
      "definitions": {
        "WorkOrderItem": {
          "$id": "#WorkOrderItem",
          "type": "object",
          "description": "An identified part of the order. A work order is decomposed into one or more order items.",
          "properties": {
            "action": {
              "$ref": "../Customer/OrderItemActionType.schema.json#/definitions/OrderItemActionType"
            },
            "appointment": {
              "$ref": "../Customer/AppointmentRef.schema.json#/definitions/AppointmentRef"
            },
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#/definitions/BillingAccountRef"
            },
            "description": {
              "type": "string",
              "description": "Description of the Order Item"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)"
            },
            "itemPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItemPrice.schema.json#/definitions/OrderItemPrice"
              }
            },
            "itemTotalPrice": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItemPrice.schema.json#/definitions/OrderItemPrice"
              }
            },
            "note": {
              "$ref": "../Common/Note.schema.json#/definitions/Note"
            },
            "orderItem": {
              "type": "array",
              "items": {
                "$ref": "../Common/OrderItemRef.schema.json#/definitions/OrderItemRef"
              }
            },
            "payment": {
              "type": "array",
              "items": {
                "$ref": "../Customer/PaymentRef.schema.json#/definitions/PaymentRef"
              }
            },
            "relatedEntity": {
              "type": "array",
              "items": {
                "$ref": "../Common/RelatedEntity.schema.json#/definitions/RelatedEntity"
              }
            },
            "state": {
              "$ref": "../EngagedParty/WorkOrderItemStateType.schema.json#/definitions/WorkOrderItemStateType"
            },
            "work": {
              "$ref": "../EngagedParty/WorkRefOrValue.schema.json#/definitions/WorkRefOrValue"
            },
            "workOrderItem": {
              "type": "array",
              "items": {
                "$ref": "../EngagedParty/WorkOrderItem.schema.json#/definitions/WorkOrderItem"
              }
            },
            "workOrderItemRelationship": {
              "type": "array",
              "items": {
                "$ref": "../Customer/OrderItemRelationship.schema.json#/definitions/OrderItemRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "WorkOrderItemStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkOrderItemStateType.schema.json",
      "title": "WorkOrderItemStateType",
      "definitions": {
        "WorkOrderItemStateType": {
          "$id": "#WorkOrderItemStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "WorkOrderRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkOrderRef.schema.json",
      "title": "WorkOrderRef",
      "definitions": {
        "WorkOrderRef": {
          "$id": "#WorkOrderRef",
          "type": "object",
          "description": "WorkOrder reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "WorkOrderStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkOrderStateType.schema.json",
      "title": "WorkOrderStateType",
      "definitions": {
        "WorkOrderStateType": {
          "$id": "#WorkOrderStateType",
          "type": "string",
          "description": "Possible values for the state of the order",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial",
            "assessingCancellation",
            "pendingCancellation"
          ]
        }
      }
    }
  ],
  "WorkPrice": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkPrice.schema.json",
      "title": "WorkPrice",
      "definitions": {
        "WorkPrice": {
          "$id": "#WorkPrice",
          "type": "object",
          "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order.",
          "properties": {
            "billingAccount": {
              "$ref": "../Customer/BillingAccountRef.schema.json#/definitions/BillingAccountRef"
            },
            "description": {
              "type": "string",
              "description": "A narrative that explains in detail the semantics of this shipment price."
            },
            "name": {
              "type": "string",
              "description": "A short descriptive name such as \"Subscription price\"."
            },
            "price": {
              "$ref": "../Customer/Price.schema.json#/definitions/Price"
            },
            "priceAlteration": {
              "type": "array",
              "items": {
                "$ref": "../Product/PriceAlteration.schema.json#/definitions/PriceAlteration"
              }
            },
            "priceType": {
              "$ref": "../Customer/PriceType.schema.json#/definitions/PriceType"
            },
            "recurringChargePeriod": {
              "type": "string",
              "description": "Could be month, week..."
            },
            "unitOfMeasure": {
              "type": "string",
              "description": "Could be minutes, GB..."
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkQualification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkQualification.schema.json",
      "title": "WorkQualification",
      "definitions": {
        "WorkQualification": {
          "$id": "#WorkQualification",
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the qualification"
            },
            "effectiveQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Effective date to qualification completion"
            },
            "estimatedResponseDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the requester expect to provide an answer for the qualification request."
            },
            "expectedQualificationDate": {
              "type": "string",
              "format": "date-time",
              "description": "A date (DateTime). Deadline date when the requester expected a qualification answer."
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the qualification response expires"
            },
            "externalId": {
              "type": "string",
              "description": "Identifier provided by the requester"
            },
            "place": {
              "$ref": "../Common/PlaceRefOrValue.schema.json#/definitions/PlaceRefOrValue"
            },
            "relatedParty": {
              "type": "array",
              "description": "A list of related party references, defines party or party role linked to this request.",
              "items": {
                "$ref": "../EngagedParty/RelatedParty.schema.json#/definitions/RelatedParty"
              }
            },
            "state": {
              "description": "State of the workQualification (acknowledged, inProgress, terminatedWithError, done)",
              "$ref": "../Common/TaskStateType.schema.json#/definitions/TaskStateType"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkQualificationItem": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkQualificationItem.schema.json",
      "title": "WorkQualificationItem",
      "definitions": {
        "WorkQualificationItem": {
          "$id": "#WorkQualificationItem",
          "type": "object",
          "description": "A WorkQualificationItem relates to a specific unit of work being checked in a qualification operation.",
          "properties": {
            "eligibilityUnavailabilityReason": {
              "type": "array",
              "items": {
                "$ref": "../Product/EligibilityUnavailabilityReason.schema.json#/definitions/EligibilityUnavailabilityReason"
              }
            },
            "expectedWorkDate": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the work is expected to take place"
            },
            "expirationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the qualification item response expires"
            },
            "id": {
              "type": "string",
              "description": "Id of the Work Qualification Item"
            },
            "work": {
              "description": "Work structure that allows to identify the unit of work'S composition, its Specification and Characteristics.",
              "$ref": "../EngagedParty/WorkRefOrValue.schema.json#/definitions/WorkRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "WorkQualificationItemRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkQualificationItemRelationship.schema.json",
      "title": "WorkQualificationItemRelationship",
      "definitions": {
        "WorkQualificationItemRelationship": {
          "$id": "#WorkQualificationItemRelationship",
          "type": "object",
          "description": "Structure used to describe relationship between WorkQualification items from the same WorkQualification .",
          "properties": {
            "id": {
              "type": "string",
              "description": "Id of the workQualificationItem (from the same workQualification)."
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "WorkQualificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkQualificationRelationship.schema.json",
      "title": "WorkQualificationRelationship",
      "definitions": {
        "WorkQualificationRelationship": {
          "$id": "#WorkQualificationRelationship",
          "type": "object",
          "description": "Structure used to describe relationship between WorkQualification item from the same WorkQualification.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the target qualification pointed to by this relationship"
            },
            "relationshipType": {
              "type": "string",
              "description": "The type of relationship"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkRef.schema.json",
      "title": "WorkRef",
      "definitions": {
        "WorkRef": {
          "$id": "#WorkRef",
          "type": "object",
          "description": "Unit of Work reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "WorkRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkRefOrValue.schema.json",
      "title": "WorkRefOrValue",
      "definitions": {
        "WorkRefOrValue": {
          "$id": "#WorkRefOrValue",
          "type": "object",
          "description": "A Unit of Work defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation &amp; @referredType are related to the work entity and not the related WorkRefOrValue class itself",
          "allOf": [
            {
              "$ref": "../EngagedParty/Work.schema.json#/definitions/Work"
            },
            {
              "$ref": "../EngagedParty/WorkRef.schema.json#/definitions/WorkRef"
            }
          ]
        }
      }
    }
  ],
  "WorkRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkRelationship.schema.json",
      "title": "WorkRelationship",
      "definitions": {
        "WorkRelationship": {
          "$id": "#WorkRelationship",
          "type": "object",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "relationshipType": {
              "type": "string"
            },
            "work": {
              "$ref": "../EngagedParty/WorkRefOrValue.schema.json#/definitions/WorkRefOrValue"
            },
            "workRelationshipCharacteristic": {
              "type": "array",
              "items": {
                "$ref": "../Common/Characteristic.schema.json#/definitions/Characteristic"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkSpecification": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkSpecification.schema.json",
      "title": "WorkSpecification",
      "definitions": {
        "WorkSpecification": {
          "$id": "#WorkSpecification",
          "type": "object",
          "description": "Definition of the nature of a Work Unit. For example, could be wiring, equipment installation, etc.",
          "properties": {
            "isAppointmentRequired": {
              "type": "boolean"
            },
            "workSpecRelationship": {
              "type": "array",
              "description": "Relationship to another work specification, might be dependency, substitution, etc.\r\n",
              "items": {
                "$ref": "../EngagedParty/WorkSpecificationRelationship.schema.json#/definitions/WorkSpecificationRelationship"
              }
            }
          },
          "allOf": [
            {
              "$ref": "../Common/EntitySpecification.schema.json#/definitions/EntitySpecification"
            }
          ]
        }
      }
    }
  ],
  "WorkSpecificationRef": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkSpecificationRef.schema.json",
      "title": "WorkSpecificationRef",
      "definitions": {
        "WorkSpecificationRef": {
          "$id": "#WorkSpecificationRef",
          "type": "object",
          "description": "Work specification reference",
          "allOf": [
            {
              "$ref": "../Common/EntityRef.schema.json#/definitions/EntityRef"
            }
          ]
        }
      }
    }
  ],
  "WorkSpecificationRefOrValue": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkSpecificationRefOrValue.schema.json",
      "title": "WorkSpecificationRefOrValue",
      "definitions": {
        "WorkSpecificationRefOrValue": {
          "$id": "#WorkSpecificationRefOrValue",
          "type": "object",
          "description": "A work specification defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation &amp; @referredType are related to the work specification entity and not the related WorkSpecificationRefOrValue class itself",
          "allOf": [
            {
              "$ref": "../EngagedParty/WorkSpecificationRef.schema.json#/definitions/WorkSpecificationRef"
            },
            {
              "$ref": "../EngagedParty/WorkSpecification.schema.json#/definitions/WorkSpecification"
            }
          ]
        }
      }
    }
  ],
  "WorkSpecificationRelationship": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkSpecificationRelationship.schema.json",
      "title": "WorkSpecificationRelationship",
      "definitions": {
        "WorkSpecificationRelationship": {
          "$id": "#WorkSpecificationRelationship",
          "type": "object",
          "description": "A migration, substitution, dependency or exclusivity relationship between/among entity specifications.",
          "required": [
            "relationshipType"
          ],
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "associationSpec": {
              "description": "A specification for an association used by this relationship\r\n",
              "$ref": "../Common/AssociationSpecificationRef.schema.json#/definitions/AssociationSpecificationRef"
            },
            "name": {
              "type": "string",
              "description": "The name given to the target entity specification instance"
            },
            "relationshipType": {
              "type": "string",
              "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
            },
            "role": {
              "type": "string",
              "description": "The association role for this entity specification"
            },
            "validFor": {
              "description": "The period for which this REST resource is valid",
              "$ref": "../Common/TimePeriod.schema.json#/definitions/TimePeriod"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#/definitions/Entity"
            }
          ]
        }
      }
    }
  ],
  "WorkStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkStateType.schema.json",
      "title": "WorkStateType",
      "definitions": {
        "WorkStateType": {
          "$id": "#WorkStateType",
          "type": "string",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial"
          ]
        }
      }
    }
  ],
  "WorkforceAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkforceAnalytics.schema.json",
      "title": "WorkforceAnalytics",
      "definitions": {
        "WorkforceAnalytics": {
          "$id": "#WorkforceAnalytics",
          "type": "object",
          "properties": {
            "employmentStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "yearlySalaryAmt": {
              "type": "number",
              "format": "integer"
            },
            "positionTitleStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "teamSize": {
              "type": "number",
              "format": "integer"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          }
        },
        "allOf": [
          {
            "$ref": "../Common/Entity.schema.json#Extensible"
          }
        ]
      }
    }
  ],
  "WorkforceEmployeeAssignment": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkforceEmployeeAssignment.schema.json",
      "title": "WorkforceEmployeeAssignment",
      "definitions": {
        "WorkforceEmployeeAssignment": {
          "$id": "#WorkforceEmployeeAssignment",
          "type": "object",
          "description": "Represents an assignment of a particular WorforceEmployeeRole for a particular unit of work in a specific timeframe. For example, assignment of a person in a network engineer role to a trouble shooting unit of work for at least 2 hours. The assignment is associated with a TimeSlot.",
          "required": [
            "id",
            "skillType",
            "description",
            "workforceEmployee"
          ],
          "properties": {
            "description": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "skillType": {
              "type": "string",
              "description": "Ex: primarySkill, secondarySkill"
            },
            "state": {
              "description": "Ex: primarySkill, secondarySkill",
              "$ref": "../EngagedParty/WorkforceEmployeeAssignmentStateType.schema.json#/definitions/WorkforceEmployeeAssignmentStateType"
            },
            "timeSlot": {
              "type": "array",
              "items": {
                "$ref": "../Customer/TimeSlot.schema.json#/definitions/TimeSlot"
              }
            },
            "workforceEmployee": {
              "$ref": "../EngagedParty/PartyRefOrValue.schema.json#/definitions/PartyRefOrValue"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Extensible.schema.json#/definitions/Extensible"
            }
          ]
        }
      }
    }
  ],
  "WorkforceEmployeeAssignmentStateType": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "WorkforceEmployeeAssignmentStateType.schema.json",
      "title": "WorkforceEmployeeAssignmentStateType",
      "definitions": {
        "WorkforceEmployeeAssignmentStateType": {
          "$id": "#WorkforceEmployeeAssignmentStateType",
          "type": "string",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "completed",
            "failed",
            "partial"
          ]
        }
      }
    }
  ],
  "eNodeBAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "eNodeBAnalytics.schema.json",
      "title": "eNodeBAnalytics",
      "definitions": {
        "eNodeBAnalytics": {
          "$id": "#eNodeBAnalytics",
          "type": "object",
          "properties": {
            "createdTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifiedTime": {
              "type": "string",
              "format": "date-time"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "eUICCProfileAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "eUICCProfileAnalytics.schema.json",
      "title": "eUICCProfileAnalytics",
      "definitions": {
        "eUICCProfileAnalytics": {
          "$id": "#eUICCProfileAnalytics",
          "type": "object",
          "properties": {
            "euiccManufactureDate": {
              "type": "string",
              "format": "date-time",
              "description": "eUICC manufacturing date"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time",
              "description": "Profile activation date"
            },
            "validTo": {
              "type": "string",
              "format": "date-time",
              "description": "Profile termination date"
            },
            "lastUpdateDate": {
              "type": "string",
              "format": "date-time",
              "description": "Last update date and time"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ],
  "eUICCUsageAnalytics": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "eUICCUsageAnalytics.schema.json",
      "title": "eUICCUsageAnalytics",
      "definitions": {
        "eUICCUsageAnalytics": {
          "$id": "#eUICCUsageAnalytics",
          "type": "object",
          "properties": {
            "customerStatusDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when status was set or changed last time"
            },
            "customerCreationDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date when customer was created"
            },
            "customerBirthDate": {
              "type": "string",
              "format": "date-time",
              "description": "Date of birth"
            },
            "arpuAmount": {
              "$ref": "../Common/Money.schema.json"
            },
            "dataPeriodStart": {
              "type": "string",
              "format": "date-time",
              "description": "The statrt of the period for which the usage info  is collected"
            },
            "dataPeriodEnd": {
              "type": "string",
              "format": "date-time",
              "description": "The end of the period for which the usage info  is collected"
            },
            "activityMostRecentDate": {
              "type": "string",
              "format": "date-time",
              "description": "Most recent activity date indicating recency of information"
            },
            "dataCreationTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data creation (e.g. system dump creation, event generation…)"
            },
            "runTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for data upload run"
            },
            "validFromTimestamp": {
              "type": "string",
              "format": "date-time",
              "description": "Time stamp for business validity of entity record"
            }
          },
          "allOf": [
            {
              "$ref": "../Common/Entity.schema.json#Extensible"
            }
          ]
        }
      }
    }
  ]
}